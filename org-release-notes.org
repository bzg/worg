#+title:  Old Release notes | Org mode
#+author:    Carsten Dominik
#+email:     carsten at orgmode dot org
#+description: Org: an Emacs Mode for Notes, Planning and Authoring
#+link:      git https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=%s
#+link:      doc https://orgmode.org/worg/doc.html#%s

Notes for the latest stable release are available on [[https://orgmode.org/Changes.html][orgmode.org]].

* Version 9.5

** Important announcements and breaking changes

*** The =contrib/= now lives in a separate repository

Org's repository has been trimmed from the =contrib/= directory.

The old contents of the =contrib/= directory now lives in a separate
repository at https://git.sr.ht/~bzg/org-contrib.

You can install this repository by cloning it and updating your
~load-path~ accordingly.  You can also install =org-contrib= as a
[[https://elpa.nongnu.org/nongnu/][NonGNU ELPA]] package.

*** Org ELPA and Org archives won't be available for Org > 9.5

[[https://orgmode.org/elpa.html][Org ELPA]] is still available for installing Org 9.5, either with or
without contributed packages, but future versions won't be available
via Org ELPA, as we are deprecating this installation method.

Also, Org 9.5 is available as =tar.gz= and =zip= archives, but this
installation method is also deprecated.

If you want to install the latest stable versions of Org, please use
the GNU ELPA package.  If you want to install the contributed files,
please use the NonGNU ELPA package.  If you want to keep up with the
latest unstable Org, please install from the Git repository.

See https://orgmode.org/org.html#Installation for the details.

*** =ditaa.jar= is not bundled with Org anymore

=ditaa.jar= used to be bundled with Org but it is not anymore.
See [[https://github.com/stathissideris/ditaa][the ditaa repository]] on how to install it.

*** ~org-adapt-indentation~ now defaults to =nil=

If you want to automatically indent headlines' metadata, set it to
=headline-data=.

If you want to automatically indent every line to the headline's
current indentation, set it to =t=.

Indent added by =RET= and =C-j= also depends on the value of
~electric-indent-mode~.  Enabling this mode by default in 9.4 revealed
some bugs caused confusing behavior.  If you disabled
~electric-indent-mode~ for this reason, it is time to try it again.
Hopefully problems have been fixed.  See [[https://orgmode.org/worg/org-faq.html#indentation][this FAQ]] for more details.

*** ~org-speed-commands-user~ is obsolete, use ~org-speed-commands~

Setting ~org-speed-commands-user~ in your configuration won't have any
effect.  Please set ~org-speed-commands~ instead, which see.

*** Some =ob-*.el= files have been moved to the org-contrib repo

These files have been moved to https://git.sr.ht/~bzg/org-contrib:

- ob-abc.el
- ob-asymptote.el
- ob-coq.el
- ob-ebnf.el
- ob-hledger.el
- ob-io.el
- ob-J.el
- ob-ledger.el
- ob-mscgen.el
- ob-picolisp.el
- ob-shen.el
- ob-stan.el
- ob-vala.el

See the discussion [[msg::87bl9rq29m.fsf@gnu.org][here]].

*** Compatibility with Emacs versions

We made it explicit that we aim at keeping the latest stable version
of Org compatible with at least Emacs V, V-1 and V-2, where V is the
stable major version of Emacs.

For example, if the current major version of Emacs is 28.x, then the
latest stable version of Org should be compatible with Emacs 28.x,
27.x and 26.x – but not with Emacs 25.x.

See [[https://orgmode.org/worg/org-maintenance.html#emacs-compatibility][this note on Worg]] and [[git::519947e508e081e71bf67db99e27b1c171ba4dfe][this commit]].

*** The keybinding for ~org-table-blank-field~ has been removed

If you prefer to keep the keybinding, you can add it back to
~org-mode-map~ like so:

#+begin_src emacs-lisp
(define-key org-mode-map (kbd "C-c SPC") #'org-table-blank-field)
#+end_src

** New features

*** New citation engine

Org 9.5 provides a new library =oc.el= which provides tooling to
handle citations in Org, e.g., activate, follow, insert, and export
them, respectively called "activate", "follow", "insert" and "export"
capabilities.  Libraries responsible for providing some, or all, of
these capabilities are called "citation processors".

The manual contains a few pointers to let you start and you may want
to check [[https://blog.tecosaur.com/tmio/2021-07-31-citations.html][this blog post]].  If you need help using this new features,
please ask on the mailing list.

Thanks to Nicolas Goaziou for implementing this, to Bruce D’Arcus for
helping him and to John Kitchin for paving the way with =org-ref.el=.

*** Async session evaluation

The =:async= header argument can be used for asynchronous evaluation
in session blocks for certain languages.

Currently, async evaluation is supported in Python.  There is also
functionality to implement async evaluation in other languages that
use comint, but this needs to be done on a per-language basis.

By default, async evaluation is disabled unless the =:async= header
argument is present.  You can also set =:async no= to force it off
(for example if you've set =:async= in a property drawer).

Async evaluation is disabled during export.
*** ~ox-koma-letter.el~ is now part of Org's core

~ox-koma-letter.el~ provides a KOMA scrlttr2 back-end for the Org
export engine.  It used to be in the =contrib/= directory but it is
now part of Org's core.

*** Support exporting DOI links

Org now supports export for DOI links, through its new =ol-doi.el=
library.  For backward compatibility, it is loaded by default.

*** Add a new ~:refile-targets~ template option

When exiting capture mode via ~org-capture-refile~, the variable
~org-refile-targets~ will be temporarily bound to the value of this
template option.

*** New startup options =#+startup: show<n>levels=

These startup options complement the existing =overview=, =content=,
=showall=, =showeverything= with a way to start the document with n
levels shown, where n goes from 2 to 5.

Example:

: #+startup: show3levels

*** New =u= table formula flag to enable Calc units simplification mode

A new =u= mode flag for Calc formulas in Org tables has been added to
enable Calc units simplification mode.

*** Support fontification of inline export snippets

See [[msg:87im57fh8j.fsf@gmail.com][this thread]].

*** New command =org-refile-reverse= bound to =C-c C-M-w=

You can now use =C-c C-M-w= to run ~org-refile-reverse~.

It is almost identical to ~org-refile~, except that it temporarily
toggles how ~org-reverse-note-order~ applies to the current buffer.
So if ~org-refile~ would append the entry as the last entry under the
target heading, ~org-refile-reverse~ will prepend it as the first
entry, and vice-versa.

*** LaTeX attribute ~:float~ now passes through arbitrary values

LaTeX users are able to define arbitrary float types, e.g. with the
float package.  The Org mode LaTeX exporter is now able to process and
export arbitrary float types.  The user is responsible for ensuring
that Org mode configures LaTeX to process any new float type.

*** Support verse and quote blocks in LaTeX export

The LaTeX export back-end accepts four attributes for verse blocks:
=:lines=, =:center=, =:versewidth= and =:latexcode=. The three first
require the external LaTeX package =verse.sty=, which is an extension
of the standard LaTeX environment.

The LaTeX export back-end accepts two attributes for quote blocks:
=:environment=, for an arbitrary quoting environment (the default
value is that of =org-latex-default-quote-environment=: ="quote"=) and
=:options=.

*** =org-set-tags-command= selects tags from ~org-global-tags-completion-table~

Let ~org-set-tags-command~ TAB fast tag completion interface complete
tags including from both buffer local and user defined persistent
global list (~org-tag-alist~ and ~org-tag-persistent-alist~).  Now
option ~org-complete-tags-always-offer-all-agenda-tags~ is honored.

*** Clocktable option =:formula %= now shows the per-file time percentages

This change only has an effect when multiple files are contributing to
a given clocktable (such as when =:scope agenda= has been specified).
The existing behavior is that such tables have an extra 'File' column,
and each individual file that contributes has its own summary line
with the headline value '*File time*'.  Those summary rows also
produce a rollup time value for the file in the 'Time' column.

Prior to this change, the built-in =%= formula did not produce a
calculation for those per-file times in the '%' column (the relevant
cells in the '%' column were blank).  With this change, the percentage
contribution of each individual file time to the total time is shown.

The more agenda files you have, the more useful this behavior becomes.

*** =ob-python.el= improvements to =:return= header argument

The =:return= header argument in =ob-python= now works for session
blocks as well as non-session blocks.  Also, it now works with the
=:epilogue= header argument -- previously, setting the =:return=
header would cause the =:epilogue= to be ignored.

This change allows more easily moving boilerplate out of the main code
block and into the header. For example, for plotting, we need to add
boilerplate to save the figure to a file and return the
filename. Instead of doing this within the code block, we can now
handle it through the header arguments as follows:

#+BEGIN_SRC org
,#+header: :var fname="/home/jack/tmp/plot.svg"
,#+header: :epilogue plt.savefig(fname)
,#+header: :return fname
,#+begin_src python :results value file
  import matplotlib, numpy
  import matplotlib.pyplot as plt
  fig=plt.figure(figsize=(4,2))
  x=numpy.linspace(-15,15)
  plt.plot(numpy.sin(x)/x)
  fig.tight_layout()
,#+end_src

,#+RESULTS:
[[file:/home/jack/tmp/plot.svg]]
#+END_SRC

As another example, we can use =:return= with the external [[https://pypi.org/project/tabulate/][tabulate]]
package, to convert pandas Dataframes into orgmode tables:

#+begin_src org
,#+header: :prologue from tabulate import tabulate
,#+header: :return tabulate(table, headers=table.columns, tablefmt="orgtbl")
,#+begin_src python :results value raw :session
  import pandas as pd
  table = pd.DataFrame({
      "a": [1,2,3],
      "b": [4,5,6]
  })
,#+end_src

,#+RESULTS:
|   | a | b |
|---+---+---|
| 0 | 1 | 4 |
| 1 | 2 | 5 |
| 2 | 3 | 6 |
#+end_src

*** Display images with width proportional to the buffer text width

Previously, if you used a =:width= attribute like =#+attr_html: :width 70%= or
=#+attr_latex: :width 0.7\linewidth= this would be interpreted as a 70px wide and
0.7px wide width specification respectively.

Now, percentages are transformed into floats (i.e. 70% becomes 0.7),
and float width specifications between 0.0 and 2.0 are now interpreted
as that portion of the text width in the buffer. For instance, the
above examples of =70%= and =0.7\linewidth= will result in an image
with width equal to the pixel-width of the buffer text multiplied by 0.7.

This functionality is implemented in a new function,
~org-display-inline-image--width~ which contains the width
determination logic previously in ~org-display-inline-images~ and the
new behaviour.

** New options
*** Option ~org-hidden-keywords~ now also applies to #+SUBTITLE:

The option ~org-hidden-keywords~ previously applied
to #+TITLE:, #+AUTHOR:, #+DATE:, and #+EMAIL:.  Now it can also be
used to hide the #+SUBTITLE: keyword.

*** New formatting directive ~%L~ for org-capture

The new ~%L~ formatting directive contains the bare link target, and
may be used to create links with programmatically generated
descriptions.

*** New option ~org-id-ts-format~

Earlier, IDs generated using =ts= method had a hard-coded format (i.e. =20200923T160237.891616=).
The new option allows user to customise the format.
Defaults are unchanged.

*** New argument for ~file-desc~ babel header

It is now possible to provide the =file-desc= header argument for a
babel source block but omit the description by passing an empty vector
as an argument (i.e., :file-desc []).  This can be useful because
providing =file-desc= without an argument results in the result of
=file= being used in the description.  Previously, the only way to
omit a file description was to omit the header argument entirely,
which made it difficult/impossible to provide a default value for
=file-desc=.

*** New option to set ~org-link-file-path-type~ to a function

~org-link-file-path-type~ can now be set to a function that takes the
full filename as an argument and returns the path to link to.

For example, if you use ~project.el~, you can set this function to use
relative links within a project as follows:

#+begin_src emacs-lisp
(setq (org-link-file-path-type
       (lambda (path)
         (let* ((proj (project-current))
                (root (if proj (project-root proj) default-directory)))
           (if (string-prefix-p (expand-file-name root) path)
               (file-relative-name path)
             (abbreviate-file-name path))))))
#+end_src

*** New options and new behavior for babel LaTeX SVG image files

Org babel now uses a two-stage process for converting latex source
blocks to SVG image files (when the extension of the output file is
~.svg~).  The first stage in the process converts the latex block into
a PDF file, which is then converted into an SVG file in the second
stage.  The TeX->PDF part uses the existing infrastructure for
~org-babel-latex-tex-to-pdf~.  The PDF->SVG part uses a command
specified in a new customization,
~org-babel-latex-pdf-svg-process~. By default, this uses inkscape for
conversion, but since it is fully customizable, any other command can
be used in its place. For instance, dvisvgm might be used here. This
two-part processing replaces the previous use of htlatex to process
LaTeX directly to SVG (htlatex is still used for HTML conversion).

Conversion to SVG exposes a number of additional customizations that
give the user full control over the contents of the latex source
block. ~org-babel-latex-preamble~, ~org-babel-latex-begin-env~ and
~org-babel-latex-end-env~ are new customization options added to allow
the user to specify the preamble and code that preceedes and proceeds
the contents of the source block.

*** New option ~org-html-meta-tags~ allows for HTML meta tags customization

New variable ~org-html-meta-tags~ makes it possible to customize the
=<meta>= tags used in an HTML export.  Accepts either a static list of
values, or a function that generates such a list (see
~org-html-meta-tags-default~ as an example of the latter).

*** Option ~org-agenda-bulk-custom-functions~ now supports collecting bulk arguments

When specifying a custom agenda bulk option, you can now also specify
a function which collects the arguments to be used with each call to
the custom function.

*** New faces to improve the contextuality of Org agenda views

Four new faces improve certain styles and offer more flexibility for
some Org agenda views: ~org-agenda-date-weekend-today~,
~org-imminent-deadline~, ~org-agenda-structure-secondary~,
~org-agenda-structure-filter~.  They inherit from existing faces in
order to remain backward-compatible.

Quoting from [[https://list.orgmode.org/87lf7q7gpq.fsf@protesilaos.com/][this thread]]:

#+begin_quote
+ The 'org-imminent-deadline' is useful to disambiguate generic
  warnings from deadlines.  For example, a warning could be rendered
  in a yellow colored text and have a bold weight, whereas a deadline
  might be red and styled with italics.

+ The 'org-agenda-structure-filter' applies to all tag/term filters
  in agenda views that search for keywords or patterns.  It is
  designed to inherit from 'org-agenda-structure' in addition to the
  'org-warning' face that was present before (and removes the
  generic 'warning' face from one place).  This offers the benefit
  of consistency, as, say, an increase in font height or a change in
  font family in 'org-agenda-structure' will propagate to the filter
  as well.  The whole header line thus looks part of a singular
  design.

+ The 'org-agenda-structure-secondary' complements the above for those
  same views where a description follows the header.  For instance, the
  tags view provides information to "Press N r" to filter by a
  numbered tag.  Themes/users may prefer to disambiguate this line
  from the header above it, such as by using a less intense color or by
  reducing its height relative to the 'org-agenda-structure'.

+ The 'org-agenda-date-weekend-today' provides the option to
  differentiate the current date on a weekend from the current date on
  weekdays.
#+end_quote

*** New option ~org-clock-ask-before-exiting~

By default, a function is now added to ~kill-emacs-query-functions~
that asks whether to clock out and save when there's a running clock.
Customize ~org-clock-ask-before-exiting~~ to nil to disable this new
behavior.

*** Option ~org-html-inline-image-rules~ now includes .webp

By default ox-html now inlines webp images.

*** ~org-html-head-include-scripts~ is now =nil= by default

See [[msg:498dbe2e-0cd2-c81e-7960-4a26c566a1f7@memebeam.org][this thread]].

*** New option ~org-html-content-class~

This is the CSS class name to use for the top level content wrapper.

*** New option ~org-babel-plantuml-svg-text-to-path~

** New features
*** =ob-python= improvements to =:return= header argument

This option, nil by default, allows to add a SVG-specific post-export
step that runs inkscape text-to-path replacement over the output file.

*** You can now configure ~org-html-scripts~ and ~org-html-style-default~

~org-html-scripts~ and ~org-html-style-default~ used to be constants,
you can now configure them.

*** New option ~org-attach-git-dir~

~org-attach-git-dir~ will decide whether to use ~org-attach-git-dir~
(the default) or use the attachment directory of the current node, if
it is correctly configured as a Git repository.

*** New option ~org-attach-sync-delete-empty-dir~

~org-attach-sync-delete-empty-dir~ controls the deletion of an empty
attachment directory at calls of ~org-attach-sync~.  There is
Never delete, Always delete and Query the user (default).

*** ~org-babel-default-header-args~ can now be specified as closures or strings

~org-babel-default-header-args~ now also accepts closures that
evaluate to a string. Previously, only direct strings were
supported. These closures are evaluated when point is at the source
block, which allows them to make use of contextual information at the
relevant source block. One example that illustrates the usefulness of
this addition (also given in the documentation for
~org-babel-default-header-args~) is:

#+begin_src elisp
(defun org-src-sha ()
  (let ((elem (org-element-at-point)))
    (concat (sha1 (org-element-property :value elem)) \".svg\")))

(setq org-babel-default-header-args:latex
      `((:results . \"file link replace\")
        (:file . (lambda () (org-src-sha)))))
#+end_src

This will set the ~:file~ header argument to the sha1 checksum of the
contents of the current latex source block.

Finally, the closures are only evaluated if they're not overridden for
a source block. This improves efficiency in cases where the result of
a compute-expensive closure would otherwise be discarded.

** Miscellaneous
*** =org-bibtex= includes =doi= and =url= entries when exporting to BiBTeX
=doi= and =url= entries have been made optional for some publication
types and will be exported if present for those types.
*** Missing or empty placeholders in "eval" macros are now =nil=
They used to be the empty string.
*** =org-goto-first-child= now works before first heading

When point is before first heading =org-goto-first-child= will move
point to the first child heading, or return nil if no heading exist
in buffer.  This is in line with the fact that everything before first
heading is regarded as outline level 0, i.e. the parent level of all
headings in the buffer.

Previously =org-goto-first-child= would do nothing before first
heading, except return nil.

*** Faces of all the heading text elements now conform to the headline face

In the past, faces of todo keywords, emphasised text, tags, and
priority cookies inherited =default= face.  The resulting headline
fontification was not always consistent, as discussed in [[msg::87h7sawubl.fsf@protesilaos.com][this bug
report]].  Now, the relevant faces adapt to face used to fontify the
current headline level.

Users who prefer to keep the old behaviour should change their face
customisation explicitly stating that =default= face is inherited.

Example of old face customisation:

#+begin_src emacs-lisp
(setq org-todo-keyword-faces '(("TODO"
                                :background "chocolate"
                                :height 0.75)))
#+end_src

To preserve the old behaviour the above customisation should be
changed to

#+begin_src emacs-lisp
(setq org-todo-keyword-faces '(("TODO"
                                :inherit default
                                :background "chocolate"
                                :height 0.75)))
#+end_src

*** Storing ID-links before first heading uses title as description

Storing links to files using ~org-store-link~ (=<C-c l>=) when
~org-id-link-to-org-use-id~ is not nil will now store the title as
description of the link, if available.  If no title exists it falls
back to the filename as before.

*** Change in =org-tags-expand= signature

The function does not allow for a third optional parameter anymore.
*** LaTeX environment =#+results= are now removed

If a babel src block produces a raw LaTeX environment, it will now be
recognised as a result, and so replaced when re-evaluated.

*** Tag completion now uses =completing-read-multiple=

Tag completion now uses =completing-read-multiple= with a simple
completion table, which should allow better interoperability with
custom completion functions.

*** Providing =directory-empty-p= from Emacs 28 as =org-directory-empty-p=

*** =org-get-last-sibling= marked as obsolete

Use =org-get-previous-sibling= instead.  This is just a rename to have
a more consistent naming.  E.g. recall the pair of funtctions
=next-line= / =previous-line=.

*** Make org-protocol compatible with =URLSearchParams= JavaScript class

Decoder of query part of org-protocol URI recognizes "+" as an encoded
space characters now, so it is possible to avoid call to =encodeURIComponent=
for each parameter and use more readable expression in bookmarklet:

#+begin_example
'org-protocol://store-link?' + new URLSearchParams({
      url: location.href, title: document.title})
#+end_example

*** Remove obsolete LaTeX packages from ~org-latex-default-packages-alist~

The LaTeX packages =grffile= and =textcomp= are redundant, with their
capabilities being merged into =graphicx= and the LaTeX core
respectively a while ago.

* Version 9.4
** Incompatible changes
*** Possibly broken internal file links: please check and fix

A bug has been affecting internal links to headlines, like

: [[*Headline][A link to a headline]]

Storing a link to a headline may have been broken in your setup and
those links may appear as

: [[*TODO Headline][A link to a headline]]

Following the link above will result in an error: the TODO keyword
should not be part of internal file links.

You can use the following command to fix links in an Org buffer:

#+begin_src emacs-lisp
(defun org-fix-links ()
  "Fix ill-formatted internal links.
E.g. replace [[*TODO Headline][headline]] by [[*Headline][headline]].
Go through the buffer and ask for the replacement."
  (interactive)
  (visible-mode 1)
  (save-excursion
    (goto-char (point-min))
    (let ((regexp (format "\\[\\[\\*%s\\s-+"
                          (regexp-opt org-todo-keywords-1 t))))
      (while (re-search-forward regexp nil t)
        (when (and (save-excursion
                     (goto-char (match-beginning 0))
                     (looking-at-p org-link-bracket-re))
                   (y-or-n-p "Fix link (remove TODO keyword)? "))
	  (replace-match "[[*")))))
  (visible-mode -1))
#+end_src

*** Calling conventions changes when opening or exporting custom links

This changes affects export back-ends, and libraries providing new
link types.

Function used in ~:follow~ link parameter is required to accept a
second argument.  Likewise, function used in ~:export~ parameter needs
to accept a fourth argument.  See ~org-link-set-parameters~ for
details.

Eventually, the function ~org-export-custom-protocol-maybe~ is now
called with a fourth argument.  Even though the 3-arguments definition
is still supported, at least for now, we encourage back-end developers
to switch to the new signature.

*** Python session return values must be top-level expression statements

Python blocks with ~:session :results value~ header arguments now only
return a value if the last line is a top-level expression statement.
Also, when a None value is returned, "None" will be printed under
"#+RESULTS:", as it already did with ~:results value~ for non-session
blocks.

*** In HTML export, change on how outline-container-* is set

When the headline has a =CUSTOM_ID=, use this custom id to build the
div id.  For example, if you have =:CUSTOM_ID: my-headline= then the
resulting <div> will be ~<div id="outline-container-my-headline">~.

You may want to check whether your HTML files are rendered differently
after this change.

*** New keybinding =<C-c C-TAB>= for ~org-force-cycle-archived~

~org-force-cycle-archived~ used to be associated with =<C-TAB>= but
this keybinding is used in Emacs for navigating tabs in Emacs.  The
new keybinding is =<C-c C-TAB>=.

** New default settings for some options

These options now default to =t=:

- ~org-loop-over-headlines-in-active-region~
- ~org-fontify-done-headline~
- ~org-src-tab-acts-natively~

You may want to read the docstrings of these options to understand the
consequences of this change.

Also, ~org-startup-folded~ now defaults to ~showeverything~.

** New features

*** Looping agenda commands over headlines

~org-agenda-loop-over-headlines-in-active-region~ allows you to loop
agenda commands over the active region.

When set to =t= (the default), loop over all headlines.  When set to
='start-level=, loop over headlines with the same level as the first
headline in the region.  When set to a string, loop over lines
matching this regular expression.

*** New minor mode ~org-table-header-line-mode~

Turn on the display of the first data row of the table at point in the
window header line when this first row is not visible anymore in the
buffer.

You can activate this minor mode by default by setting the option
~org-table-header-line-p~ to =t=.  You can also change the face for
the header line by customizing the ~org-table-header~ face.

*** New minor mode ~org-list-checkbox-radio-mode~

When this minor mode is on, checkboxes behave as radio buttons: if a
checkbox is turned on, other checkboxes at the same level are turned
off.

If you want to occasionally toggle a checkbox as a radio button
without turning this minor mode on, you can use =<C-c C-x C-r>= to
call ~org-toggle-radio-button~.

You can also add =#+ATTR_ORG: :radio t= right before the list to tell
Org to use radio buttons for this list only.

*** New allowed value for ~org-adapt-indentation~

~org-adapt-indentation~ now accepts a new value, ='headline-data=.

When set to this value, Org will only adapt indentation of headline
data lines, such as planning/clock lines and property/logbook drawers.
Also, with this setting, =org-indent-mode= will keep these data lines
correctly aligned with the headline above.

*** Numeric priorities are now allowed (up to 65)

You can now set ~org-priority-highest/lowest/default~ to integers to
use numeric priorities globally or set, for example

#+PRIORITIES: 1 10 5

to define a buffer-local range and default for priorities.  Priority
commands should work as usual.  You cannot use numbers superior to 64
for numeric priorities, as it would clash with priorities like [#A]
where the "A" is internally converted to its numeric value of 65.

*** Property drawers allowed before first headline

Property drawers are now allowed before the first headline.

Org mode is moving more towards making things before the first
headline behave just as if it was at outline level 0.  Inheritance for
properties will work also for this level.  In other words: defining
things in a property drawer before the first headline will make them
"inheritable" for all headlines.

*** Refinement in window behavior on exiting Org source buffer

After editing a source block, Org will restore the window layout when
~org-src-window-setup~ is set to a value that modifies the layout.

*** Display remote inline images

Org now knows how to display remote images inline.

Whether the images are actually displayed is controlled by the new
option ~org-display-remote-inline-images~.

*** New option to resolve open clock at a provided time

~org-resolve-clocks~ now has a `t' option, which works just like the
`k' option, but the user specifies a time of day, not a number of
minutes.

*** New step value =semimonth= accepted for clock tables

*** Allow text rescaling in column view

You can now use =C-x C-+= in column view: the columns face size will
increase or decrease, together with the column header size.

*** New startup option =#+startup: num=

When this startup option is set, display headings as numerated.

Use =#+startup: nonum= to turn this off.

*** New tool for custom links

Org provides a new tool ~org-link-open-as-file~, useful when defining
new link types similar to "file"-type links.  See docstring for
details.

*** New optional numeric argument for ~org-return~

In situations where ~org-return~ calls ~newline~, multiple newlines
can now be inserted with this prefix argument.

*** New source code block header argument =:file-mode=

Source code block header argument =:file-mode= can set file
permissions if =:file= argument is provided.

*** =RET= and =C-j= now obey ~electric-indent-mode~

Since Emacs 24.4, ~electric-indent-mode~ is enabled by default.  In
most major modes, this causes =RET= to reindent the current line and
indent the new line, and =C-j= to insert a newline without indenting.

Org mode now obeys this minor mode: when ~electric-indent-mode~ is
enabled, and point is neither in a table nor on a timestamp or a link:

- =RET= (bound to ~org-return~) reindents the current line and indents
  the new line;
- =C-j= (bound to the new command ~org-return-and-maybe-indent~)
  merely inserts a newline.

To get the previous behaviour back, disable ~electric-indent-mode~
explicitly:

#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))
#+end_src

*** =ob-C.el= allows the inclusion of non-system header files

In C and C++ blocks, ~:includes~ arguments that do not start with a
~<~ character will now be formatted as double-quoted ~#include~
statements.

*** =ob-clojure.el= supports inf-clojure.el and ClojureScript evaluation

You can now set ~(setq org-babel-clojure-backend 'inf-clojure)~ and
evaluate Clojure source blocks using [[https://github.com/clojure-emacs/inf-clojure][inf-clojure]].  With a header
argument like =:alias "alias"= the Clojure REPL will boot with
=clojure -Aalias=.  Otherwise Clojure will boot with =lein=, =boot= or
=tools.deps=, depending on whether the current directory contains a
=project.clj=, =build.boot= or =deps.edn=, falling back on
~inf-clojure-generic-cmd~ in case no such file is present.

Also, when using [[https://github.com/clojure-emacs/cider][cider]], you can now use =#+begin_src clojurescript= to
execute ClojureScript code from Org files.  Note that this works only
if your Org file is associated with a cider session that knows how to
run ClojureScript code.  A bare =lein repl= session outside of a
directory configured for ClojureScript will /not/ work.

*** =ob-java.el= supports Java command line arguments

Babel Java blocks recognize header argument =:cmdargs= and pass its
value in call to =java=.

*** =ob-screen.el= now accepts =:screenrc= header argument

Screen blocks now recognize the =:screenrc= header argument and pass
its value to the screen command via the "-c" option. The default
remains =/dev/null= (i.e. a clean screen session)

*** =ob-plantuml=: now supports using PlantUML executable to generate diagrams

Set =org-plantuml-exec-mode= to ='plantuml= in order to use the
executable instead of JAR. When using an executable it is also
possible to configure executable location as well as arguments via:
=org-plantuml-executable-path= and =org-plantuml-executable-args=.

** New commands
*** ~org-table-header-line-mode~

Turn on a minor mode to display the first data row of the table at
point in the header-line when the beginning of the table is invisible.

*** ~org-agenda-ctrl-c-ctrl-c~

Hitting =<C-c C-c>= in an agenda view now calls ~org-agenda-set-tags~.

*** ~org-hide-entry~

This command is the counterpart of ~org-show-entry~.

*** ~org-columns-toggle-or-columns-quit~

=<C-c C-c>= bound to ~org-columns-toggle-or-columns-quit~ replaces the
recent ~org-columns-set-tags-or-toggle~.  Tag setting is still
possible via column view value edit or with =<C-c C-q>=.

*** ~org-datetree-find-month-create~

Find or create a month entry for a date.

** New options and settings
*** New option ~org-html-prefer-user-labels~

When non-nil, use =NAME= affiliated keyword, or raw target values, to
generate anchor's ID.  Otherwise, consistently use internal naming
scheme.

=CUSTOM_ID= values are still always used, when available.
*** New option for using tabs in ~org-agenda-window-setup~

Choosing ~other-tab~ for ~org-agenda-window-setup~ will open the
agenda view in a new tab.  This will work with versions of Emacs since
27.1 when ~tab-bar-mode~ was introduced.

*** New option ~org-table-header-line-p~

Setting this option to =t= will activate ~org-table-header-line-mode~
in org-mode buffers.

*** New option ~org-startup-numerated~

When this option is =t=, Org files will start using ~(org-num-mode 1)~
and headings will be visually numerated.

You can turn this on/off on a per-file basis with =#+startup: num= or
=#+startup: nonum=.

*** New option ~org-clock-auto-clockout-timer~

When this option is set to a number and the user configuration
contains =(org-clock-auto-clockout-insinuate)=, Org will clock out the
currently clocked in task after that number of seconds of idle time.

This is useful when you often forget to clock out before being idle
and don't want to have to manually set the clocking time to take into
account.

*** New option to group captured datetime entries by month

A new `:tree-type month' option was added to org-capture-templates to
group new datetime entries by month.

*** New option to show source buffers using "plain" display-buffer

There is a new option ~plain~ to ~org-src-window-setup~ to show source
buffers using ~display-buffer~.  This allows users to control how
source buffers are displayed by modifying ~display-buffer-alist~ or
~display-buffer-base-action~.

*** New option ~org-archive-subtree-save-file-p~

Archiving a subtree used to always save the target archive buffer.
Commit [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=b186d1d7][b186d1d7]] changed this behavior by always not saving the target
buffer, because batch archiving from agenda could take too much time.

This new option ~org-archive-subtree-save-file-p~ defaults to the
value =from-org= so that archiving a subtree will save the target
buffer when done from an org-mode buffer, but not from the agenda.
You can also set this option to =t= or to =from-agenda=.

*** New option ~org-show-notification-timeout~

This option will add a timeout to notifications.

*** New option ~org-latex-to-html-convert-command~

This new option allows you to convert a LaTeX fragment directly into
HTML.

*** New option ~org-babel-shell-results-defaults-to-output~

By default, source code blocks are executed in "functional mode": it
means that the results of executing them are the value of their last
statement (see [[https://orgmode.org/manual/Results-of-Evaluation.html][the documentation]].)

The value of a shell script's execution is its exit code.  But most
users expect the results of executing a shell script to be its output,
not its exit code.

So we introduced this option, that you can set to =nil= if you want
to stick using ~:results value~ as the implicit header.

In all Babel libraries, the absence of a ~:results~ header should
produce the same result than setting ~:results value~, unless there is
an option to explicitly create an exception.

See [[https://list.orgmode.org/CA+A2iZaziAfMeGpBqL6qGrzrWEVvLvC0DUw++T4gCF3NGuW-DQ@mail.gmail.com/][this thread]] for more context.

*** New option in ~org-attach-store-link-p~

~org-attach-store-link-p~ has a new option to store a file link to the
attachment.
*** New option ~org-fontify-todo-headline~

This feature is the same as ~org-fontify-done-headline~, but for TODO
headlines instead.  This allows you to distinguish TODO headlines from
normal headlines.  The face can be customized via ~org-headline-todo~.

*** New default value for ~org-file-apps~

The new value uses Emacs as the application for opening directory.

*** New hook ~org-agenda-filter-hook~

Functions in this hook are run after ~org-agenda-filter~ is called.

** Removed or renamed functions and variables
*** Deprecated ~org-flag-drawer~ function

Use ~org-hide-drawer-toggle~ instead.

*** Deprecated ~org-hide-block-toggle-maybe~ function

Use ~org-hide-block-toggle~ instead.

*** Deprecated ~org-hide-block-toggle-all~ function

This function was not used in the code base, and has no clear use
either.  It has been marked for future removal.  Please contact the
mailing list if you use this function.

*** Deprecated ~org-return-indent~ function

In Elisp code, use ~(org-return t)~ instead.  Interactively, =C-j= is
now bound to ~org-return-and-maybe-indent~, which indents the new line
when ~electric-indent-mode~ is disabled.

*** Removed ~org-maybe-keyword-time-regexp~

The variable was not used in the code base.

*** Removed ~org-export-special-keywords~

The variable was not used in the code base.

*** Renamed ~org-at-property-block-p~

The new name is ~org-at-property-drawer-p~, which is less confusing.

*** Renamed ~org-columns-set-tags-or-toggle~

See [[*~org-columns-toggle-or-columns-quit~]].

*** Renamed priority options

From ~org-lowest-priority~ to ~org-priority-lowest~.
From ~org-default-priority~ to ~org-priority-default~.
From ~org-highest-priority~ to ~org-priority-highest~.
From ~org-enable-priority-commands~ to ~org-priority-enable-commands~.
From ~org-show-priority~ to ~org-priority-show~.

** Miscellaneous
*** =ob-screen.el= now respects screen =:session= name

Screen babel session are now named based on the =:session= header
argument (defaults to ~default~).

Previously all session names had  ~org-babel-session-~ prepended.

*** Forward/backward paragraph functions in line with the rest of Emacs

~org-forward-paragraph~ and ~org-backward-paragraph~, bound to
~<C-UP>~ and ~<C-DOWN>~ functions mimic more closely behaviour of
~forward-paragraph~ and ~backward-paragraph~ functions when
available.

They also accept an optional argument for multiple calls.

See their docstring for details.
*** ~org-table-to-lisp~ no longer checks if point is at a table

The caller is now responsible for the check.  It can use, e.g.,
~org-at-table-p~.

The function is also much more efficient than it used to be, even on
very large tables.

*** New function ~org-collect-keywords~
*** Drawers' folding use an API similar to block's

Tooling for folding drawers interactively or programmatically is now
on par with block folding.  In particular, ~org-hide-drawer-toggle~,
a new function, is the central place for drawer folding.

*** Duration can be read and written in compact form

~org-duration-to-minutes~ understands =1d3h5min= as a duration,
whereas ~org-duration-from-minutes~ can output this compact form if
the duration format contains the symbol ~compact~.

*** C-n, C-p, SPC and DEL in agenda commands dispatch window

You can now use =<C-n>=, =<C-p>=, =<SPC>= and =<DEL>= key to scroll up
and down the agenda and attach dispatch window.

*** =<C-c C-c>= in agenda calls ~org-agenda-set-tags~

Both =<C-c C-q>= and =<C-c C-c>= set the tags of the headline in the
Org buffer.  Both keybindings are now available from the agenda too.

*** Allow to use an empty HTML extension

Using =(setq org-html-extension "")= or setting the HTML extension in
any fashion will produce the expected output, with no trailing period
to the resulting HTML file.

*** Handle repeated tasks with =.+= type and hours step

A task using a =.+= repeater and hours step is repeated starting from
now. E.g.,

#+begin_example
,,** TODO Wash my hands
   DEADLINE: <2019-04-05 08:00 Sun .+1h>
   Marking this DONE shifts the date to exactly one hour from now.
#+end_example

*** The format of equation reference in HTML export can now be specified

By default, HTML (via MathJax) and LaTeX export equation references
using different commands. LaTeX must use ~\ref{%s}~ because it is used
for all labels; however, HTML (via MathJax) uses ~\eqref{%s}~ for
equations producing inconsistent output. New option
~org-html-equation-reference-format~ sets the command used in HTML
export.

*** =ob-haskell.el= supports compilation with =:compile= header argument

By default, Haskell blocks are interpreted. By adding =:compile yes=
to a Haskell source block, it will be compiled, executed and the
results will be displayed.

*** Support for ~org-edit-special~ with LaTeX fragments

Calling ~org-edit-special~ on an inline LaTeX fragment calls a new
function, ~org-edit-latex-fragment~. This functions in a comparable
manner to editing inline source blocks, bringing up a minibuffer set
to LaTeX mode. The math-mode deliminators are read only.

*** ~org-capture-current-plist~ is now accessible during ~org-capture-mode-hook~
*** New =org-refile.el= file

Org refile variables and functions have been moved to a new file.

*** The end of a 7 years old bug

This bug [[https://lists.gnu.org/archive/html/emacs-orgmode/2013-08/msg00072.html][originally reported]] by Matt Lundin and investigated by Andrew
Hyatt has been fixed.  Thanks to both of them.
* Version 9.3

** Incompatible changes
*** Change bracket link escaping syntax

Org used to percent-encode sensitive characters in the URI part of the
bracket links.

Now, escaping mechanism uses the usual backslash character, according
to the following rules, applied in order:

1. All consecutive =\= characters at the end of the link must be
   escaped;
2. Any =]= character at the very end of the link must be escaped;
3. All consecutive =\= characters preceding =][= or =]]= patterns must
   be escaped;
4. Any =]= character followed by either =[= or =]= must be escaped;
5. Others =]= and =\= characters need not be escaped.

When in doubt, use the function ~org-link-escape~ in order to turn
a link string into its properly escaped form.

The following function will help switching your links to the new
syntax:

#+begin_src emacs-lisp
(defun org-update-link-syntax (&optional no-query)
  "Update syntax for links in current buffer.
Query before replacing a link, unless optional argument NO-QUERY
is non-nil."
  (interactive "P")
  (org-with-point-at 1
    (let ((case-fold-search t))
      (while (re-search-forward "\\[\\[[^]]*?%\\(?:2[05]\\|5[BD]\\)" nil t)
        (let ((object (save-match-data (org-element-context))))
          (when (and (eq 'link (org-element-type object))
                     (= (match-beginning 0)
                        (org-element-property :begin object)))
            (goto-char (org-element-property :end object))
            (let* ((uri-start (+ 2 (match-beginning 0)))
                   (uri-end (save-excursion
                              (goto-char uri-start)
                              (re-search-forward "\\][][]" nil t)
                              (match-beginning 0)))
                   (uri (buffer-substring-no-properties uri-start uri-end)))
              (when (or no-query
                        (y-or-n-p
                         (format "Possibly obsolete URI syntax: %S.  Fix? "
                                 uri)))
                (setf (buffer-substring uri-start uri-end)
                      (org-link-escape (org-link-decode uri)))))))))))
#+end_src

The old ~org-link-escape~ and ~org-link-unescape~ functions have been
renamed into ~org-link-encode~ and ~org-link-decode~.

*** Change match group number in ~org-link-bracket-re~

Link description, if any, is located in match group 2 instead of match
group 3.

*** ob-clojure does not auto prepend ~(ns ..)~ statement anymore

When tangling, user usually just wants to tangle literally code instead
of prepend inserting a ~(ns ..)~ statement before source block
code.  Now, when you have no ~:ns~ header argument specified, this
behavior will not happen automatically.

*** Change in behavior on exit from an Org edit buffer

Org will no longer attempt to restore the window configuration in the
frame to which the user returns after editing a source block with
~org-edit-src-code~.  Instead, the window configuration will remain as
it is.

*** Change default value for ~org-email-link-description-format~

When linking from a mail buffer, Org used to truncate the subject of
the message to 30 characters in order to build the description of the
link.  This behavior was considered as too surprising.  As
a consequence, Org no longer truncates subjects.

You can get the old behaviour back with the following:

: (setq org-email-link-description-format "Email %c: %.30s")

*** ~:file~ header argument no longer assume "file" ~:results~

The "file" ~:results~ value is now mandatory for a code block
returning a link to a file.  The ~:file~ or ~:file-ext~ header
arguments no longer imply a "file" result is expected.

*** Plain numbers are hours in Column View mode

See [[git:3367ac9457]] for details.

*** All LaTeX preview backends use now xcolor

The dvipng backend was previously relying on fg and bg parameters to
be passed to the CLI. This didn't work when xcolor was directly or
indirectly used in the document (e.g. tkiz is a user of xcolor). Since
every other backend was already using xcolor to set fg and bg, the CLI
alternative was removed and there is no more a :use-xcolor options
since now it's implicitly always true.

*** Org-Attach Git commit

[[*Org-Attach has been refactored and extended][Refactoring of Org-Attach]] affected the Git commit functionality.  Not
much, but the following changes are required if you still need to
auto-commit attachments to git:

- Customization of ~org-attach-annex-auto-get~ needs to be renamed to
  ~org-attach-git-annex-auto-get~.

- Customization of ~org-attach-commit~ is no longer needed.  Instead
  one need to require the =org-attach-git= module in the startup.

** New features
*** New option to wrap source code lines in HTML export

When new option ~html-wrap-src-lines~ (with variable
~org-html-wrap-src-lines~) is non-nil, HTML export wraps source code
lines in HTML ~code~ elements.

*** New option to handle schedules and deadlines in iCalendar export

Export ignore done tasks with a deadline when
~org-icalendar-use-deadline~ contains ~event-if-todo-not-done~.
Likewise, scheduled done tasks are also ignored when
~org-icalendar-use-scheduled~ contains the same symbol.

*** Add split-window-right option for src block edit window placement

Given the increasing popularity of wide screen monitors, splitting
horizontally may make more sense than splitting vertically.  An
option, ~split-window-right~, to request horizontal splitting has been
added to ~org-src-window-setup~.

*** Org-Attach has been refactored and extended

Org attach has been refactored and the functionality extended.  It
should now be easier to understand how it works.  A few improvements
and extra options have been added as well.

From the initial comment in org-attach source-code:

- Attachments are managed either by using a custom property DIR or by
  using property ID from org-id.  When DIR is defined, a location in
  the filesystem is directly attached to the outline node.  When
  org-id is used, attachments are stored in a folder named after the
  ID, in a location defined by ~org-attach-id-dir~.  DIR has
  precedence over ID when both parameters are defined for the current
  outline node (also when inherited parameters are taken into
  account).

From now on inheritance requires no extra property and will adhere to
~org-attach-use-inheritance~ by default.  Inheritance can be
customized to always be activated or never be activated in
~org-attach-use-inheritance~.

The ATTACH_DIR property is deprecated in favour of the shorter
property DIR.  Links to folders inside the DIR property can now be
declared as relative links.  This is not enabled by default, but can
be set in ~org-attach-dir-relative~.

When adding new attachment to the outline node the preferred way of
doing so can be customized.  Take a look at
~org-attach-preferred-new-method~.  It defaults to using ID since that
was the behaviour before this change.

If both DIR and ID properties are set on the same node, DIR has
precedence and will be used.

One can now also choose to build attachment-directory-paths in a
customized way.  This is an advanced topic, but in some case it makes
sense to parse an ID in a different way than the default one.  Create
your own function and add it to the beginning of
~org-attach-id-to-path-function~list~ if you want to customize the ID
based folder structure.

If you've used ATTACH_DIR properties to manage attachments, use the
following code to rename that property to DIR which supports the same
functionality.  ATTACH_DIR_INHERIT is no longer supported and is
removed.

#+begin_src emacs-lisp
  (defun org-update-attach-properties ()
      "Change properties for Org-Attach."
      (interactive)
      (org-with-point-at 1
	(while (outline-next-heading)
	  (let ((DIR (org--property-local-values "ATTACH_DIR" nil)))
	    (when DIR
	      (org-set-property "DIR" (car DIR))
	      (org-delete-property "ATTACH_DIR"))))
	(org-delete-property-globally "ATTACH_DIR_INHERIT")))
#+end_src

For those who hate breaking changes, even though the changes are made
to clean things up; fear not.  ATTACH_DIR will still continue to work.
It's just not documented any longer.  When you get the chance, run the
code above to clean things up anyways!

**** New hooks
Two hooks are added to org-attach:
- org-attach-after-change-hook
- org-attach-open-hook

They are added mostly for internal restructuring purposes, but can
ofc. be used for other things as well.

*** New link-type: Attachment

Attachment-links are now first-class citizens.  They mimic file-links
in everything they do but use the existing attachment-folder as a base
when expanding the links. Both =DIR= and =ID= properties are used to
try to resolve the links, in exactly the same way as Org-Attach uses
those properties.

*** Handle overlay specification for notes in Beamer export

This aligns Beamer notes with slide overlays.

*** Add support for lettered lists in Texinfo

Using =:enum A= or =:enum a= Texinfo attribute switches an otherwise
numbered list to a lettered list.

*** Add a dispatcher command to insert dynamic blocks

You can add new dynamic blocks with function
~org-dynamic-block-define~.  All such dynamic blocks can be used by
~org-dynamic-block-insert-dblock~ command.

*** Babel

**** ob-emacs-lisp sets ~lexical-binding~ in Org edit buffers

When editing an Elisp src block, the editing buffer's
~lexical-binding~ is set according to the src block's =:lexical=
parameter.

**** Add LaTeX output support in PlantUML

*** New minor mode to display headline numbering

Use =<M-x org-num-mode>= to get a visual indication of the numbering
in the outline.  The numbering is also automatically updated upon
changes in the buffer.

*** New property =HTML_HEADLINE_CLASS= in HTML export

The new property =HTML_HEADLINE_CLASS= assigns a class attribute to
a headline.

*** Allow LaTeX attributes and captions for "table.el" tables

Supported LaTeX attributes are ~:float~, ~:center~, ~:font~ and
~:caption~.

*** Attach buffer contents to headline

With =<b>= key from attachment dispatcher (=<C-c C-a>=), it is now
possible to write the contents of a buffer to a file in the headline
attachment directory.

*** iCalendar export respects a =CLASS= property

Set the =CLASS= property on an entry to specify a visibility class for
that entry only during iCalendar export. The property can be set to
anything the calendar server supports. The iCalendar standard defines
the values =PUBLIC=, =CONFIDENTIAL=, =PRIVATE=, which can be
interpreted as publicly visible, accessible to a specific group, and
private respectively.

This property can be inherited during iCalendar export, depending on
the value of ~org-use-property-inheritance~.

*** New parameter for =INCLUDE= keyword

Add =:coding CODING-SYSTEM= to include files using a different coding
system than the main Org document.  For example:

#+begin_example
,#+INCLUDE: "myfile.cmd" src cmd :coding cp850-dos
#+end_example

*** New values in clock tables' step: =month= and =year=
*** ODT export handles numbers cookies in lists
*** New cell movement functions in tables

~S-<UP>~, ~S-<DOWN>~, ~S-<RIGHT>~, and ~S-<LEFT>~ now move cells in
the corresponding direction by swapping with the adjacent cell.

*** New option to natively fontify LaTeX snippets and environments

A 'native option was added to org-highlight-latex-and-related. It
matches the same structures than 'latex but it calls
org-src-font-lock-fontify-block instead, thus bringing about full
LaTeX font locking.

*** ~org-clone-subtree-with-time-shift~ learnt to shift backward in time

=<C-c C-x c>= (~org-clone-subtree-with-time-shift~) now takes a
negative value as a valid repeater to shift time stamps in backward
in cloned subtrees.  You can give, for example, ‘-3d’ to shift three
days in the past.

*** Toggle display of all vs. undone scheduled habits conveniently

=<C-u K>= (~org-habit-toggle-display-in-agenda~) in an agenda toggles
the display of all habits to those which are undone and scheduled.
This is a function for convenience.

*** New parameter for SQL Babel blocks: ~:dbconnection~

The new parameter ~:dbconnection~ allows to specify a connection name
in a SQL block header: this name is used to look up connection
parameters in ~sql-connection-alist~.

*** New =:scale= attribute supported by LaTeX exporters

The builtin "latex" exporters now accept and use a =:scale= attribute,
which scales an image by a given factor.

This attribute is wrapped adound the =scale= parameter of LaTeX's
=\includegraphics= (bitmap images) or a TiKZ's =\scalebox=.
Therefore, its value should be some string palatable to LaTeX as
a positive float Its default value is an empty string (i.e. disabled).

This attribute overrides the =:width= and =:height= attributes.

#+begin_example
,#+name: Beastie
,#+caption: I think I saw this curious horse already, but where ?
,#+LATEX_ATTR: :scale 2
[[https://orgmode.org/img/org-mode-unicorn-logo.png]]
#+end_example

*** Allow specifying the target for a table of contents

The =+TOC= keyword now accepts a =:target:= attribute that specifies
the headline to use for making the table of contents.

#+begin_example
,* Target
  :PROPERTIES:
  :CUSTOM_ID: TargetSection
  :END:
,** Heading A
,** Heading B
,* Another section
,#+TOC: headlines 1 :target "#TargetSection"
#+end_example

** New functions
*** ~org-dynamic-block-insert-dblock~

Use default keybinding =<C-c C-x x>= to run command
~org-dynamic-block-insert-dblock~.  It will prompt user to select
dynamic block in ~org-dynamic-block-alist~.

*** ~org-table-cell-up~
*** ~org-table-cell-down~
*** ~org-table-cell-left~
*** ~org-table-cell-right~
*** ~org-habit-toggle-display-in-agenda~
** Removed functions and variables
*** Removed Org Drill

You can install it back from MELPA.

*** ~org-babel-set-current-result-hash~
*** ~org-capture-insert-template-here~
*** ~org-attach-directory~

It has been deprecated in favour of ~org-attach-id-dir~ which is less
ambiguous given the restructured org-attach.

*** ~org-enable-fixed-width-editor~

This variable was not used through the code base.

** Miscellaneous
*** Change signature for ~org-list-to-subtree~

The function now accepts the level of the subtree as an optional
argument.  It no longer deduces it from the current level.

*** LaTeX preview is simplified

Function ~org-latex-preview~, formerly known as
~org-toggle-latex-fragment~, has a hopefully simpler and more
predictable behavior.  See its docstring for details.

*** ~org-table-copy-down~ supports patterns

When ~org-table-copy-increment~ is non-nil, it is now possible to
increment fields like =A1=, or =0A=, i.e., any string prefixed or
suffixed with a whole number.

*** No more special indentation for description items

Descriptions items are indented like regular ones, i.e., text starts
after the bullet.  Special indentation used to introduce bugs when
inserting sub-items in a description list.

*** New hook: ~org-todo-repeat-hook~

This hook was actually introduced in Org 9.2.1, but wasn't advertised.

*** Org Table reads numbers starting with 0 as strings
*** Disable fast tag selection interface via prefix arg

A call of ~org-set-tags-command~ with prefix argument C-u C-u avoids
the fast tag selection interface and instead offers the plain
interface.

*** ~:mkdirp~ now supports create directory for ~:dir~ path

The ~:mkdirp~ header argument used to only work for ~:tangle~ tangle
files. Now ~:mkdirp~ works for ~:dir~ too. This is more convenient for
specify default directory and with ~:file~ header argument.

*** New variable: ~org-agenda-breadcrumbs-separator~

If breadcrumbs are showed in org-agenda with the help of "%b" format
in ~org-agenda-prefix-format~, user can customize breadcrumbs's
separator using ~org-agenda-breadcrumbs-separator~.

*** New variable ~org-attach-commands~

This variable makes it possible to customize the list of commands for
the attachment dispatcher.

*** New ID method based on timestamp

If one chooses, it is now possible to create ID's based on timestamp
(ISO8601) instead of UUID by changing org-id-method to ts.

For an improved folder structure when using timestamp as ID, make sure
to promote ~org-attach-id-ts-folder-format~ to the first element of
~org-attach-id-to-path-function-list~ in your configuration at the
same time.

*** New customization: ~org-id-locations-relative~

New customization to make the persisting of org-id-locations between
sessions to store links to files as relative instead of absolute.  The
links will be stored as relative to the path of org-id-locations-file.

*** ~org-ctrl-c-tab~ is functional before the first headline

I.e. treat the whole file as if it was a subtree.

Also fold everything below the chosen level.  Former behavior was to
leave unfolded subtrees unfolded.

*** ~org-kill-note-or-show-branches~ is functional before the first headline

I.e. treat the whole file as if it was a subtree.

*** Respect narrowing when agenda command is restricted to buffer

* Version 9.2
** Incompatible changes
*** Removal of OrgStruct mode mode and radio lists

OrgStruct minor mode and radio lists mechanism (~org-list-send-list~
and ~org-list-radio-lists-templates~) are removed from the code base.

Note that only radio /lists/ have been removed, not radio tables.

If you want to manipulate lists like in Org in other modes, we suggest
to use orgalist.el, which you can install from GNU ELPA.

If you want to use Org folding outside of Org buffers, you can have a
look at the outshine package in the MELPA repository.

*** Change in the structure template expansion

Org 9.2 comes with a new template expansion mechanism, combining
~org-insert-structure-template~ bound to ~C-c C-,~.

If you customized the ~org-structure-template-alist~ option manually,
you probably need to udpate it, see the docstring for accepted values.

If you prefer using previous patterns, e.g. =<s=, you can activate
them again by requiring Org Tempo library:

: (require 'org-tempo)

or add it to ~org-modules~.

If you need complex templates, look at the ~tempo-define-template~
function or at solutions like Yasnippet.

*** Change to Noweb expansion

Expansion check =:noweb-ref= only if no matching named block is found
in the buffer.  As a consequence, any =:noweb-ref= value matching the
name of a source block in the buffer is ignored. A simple fix is to
give every concerned source-block, including the named one, a new,
unique, Noweb reference.

#+BEGIN_SRC org
  ,#+NAME: foo
  ,#+BEGIN_SRC emacs-lisp
    1
  ,#+END_SRC

  ,#+BEGIN_SRC emacs-lisp :noweb-ref foo
    2
  ,#+END_SRC

  ,#+BEGIN_SRC emacs-lisp :noweb yes
    <<foo>>
  ,#+END_SRC
#+END_SRC

should become

#+BEGIN_SRC org
  ,#+NAME: foo
  ,#+BEGIN_SRC emacs-lisp :noweb-ref bar
    1
  ,#+END_SRC

  ,#+BEGIN_SRC emacs-lisp :noweb-ref bar
    2
  ,#+END_SRC

  ,#+BEGIN_SRC emacs-lisp :noweb yes
    <<bar>>
  ,#+END_SRC
#+END_SRC

*** Default/accepted values of ~org-calendar-to-agenda-key~

The default value and accepted value of  ~org-calendar-to-agenda-key~
changed.  This is an excerpt of the new docstring:

: When set to ‘default’, bind the function to ‘c’, but only if it is
: available in the Calendar keymap.  This is the default choice because
: ‘c’ can then be used to switch back and forth between agenda and calendar.
:
: When nil, ‘org-calendar-goto-agenda’ is not bound to any key.

Check the full docstring for more.

*** Change the signature of the ~org-set-effort~ function

Here is the new docstring:

: (org-set-effort &optional INCREMENT VALUE)
:
: Set the effort property of the current entry.
: If INCREMENT is non-nil, set the property to the next allowed
: value.  Otherwise, if optional argument VALUE is provided, use
: it.  Eventually, prompt for the new value if none of the previous
: variables is set.

*** Placeholders in =(eval ...)= macros are always strings

Within =(eval ...)= macros, =$1=-like placeholders are always replaced
with a string.  As a consequence, they must not be enclosed within
quotes. As an illustration, consider the following, now valid,
examples:

#+begin_example
  ,#+macro: join (eval (concat $1 $2))
  ,#+macro: sum (eval (+ (string-to-number $1) (string-to-number $2)))

  {{{join(a,b)}}} => ab
  {{{sum(1,2)}}}  => 3
#+end_example

However, there is no change in non-eval macros:

#+begin_example
  ,#+macro: disp argument: $1

  {{{disp(text)}}} => argument: text
#+end_example

*** =align= STARTUP value no longer narrow table columns

Columns narrowing (or shrinking) is now dynamic. See [[*Dynamically
narrow table columns]] for details. In particular, it is decoupled from
aligning.

If you need to automatically shrink columns upon opening an Org
document, use =shrink= value instead, or in addition to align:

#+BEGIN_EXAMPLE
,#+STARTUP: align shrink
#+END_EXAMPLE

*** ~org-get-tags~ meaning change

Function ~org-get-tags~ used to return local tags to the current
headline.  It now returns all the inherited tags in addition to the
local tags.  In order to get the old behaviour back, you can use:

: (org-get-tags nil t)

*** Alphabetic sorting in tables and lists

When sorting alphabetically, ~org-table-sort-lines~ and ~org-sort-list~
now sort according to the locale’s collation rules instead of by
code-point.

*** Change the name of the :tags clocktable option to :match

The =:match= (renamed from =:tags=) option allows to limit clock entries
to those matching a todo-tags matcher.

The old =:tags= option can be set to =t= to display a headline's tags in a
dedicated column.

This is consistent with the naming of =org-dblock-write:columnview=
options, where =:match= is also used as a headlines filter.

** New features
*** Add ~:results link~ support for Babel

With this output format, create a link to the file specified in
~:file~ header argument, without actually writing any result to it:

#+begin_example
,#+begin_src shell :dir "data/tmp" :results link :file "crackzor_1.0.c.gz"
wget -c "http://ben.akrin.com/crackzor/crackzor_1.0.c.gz"
,#+end_src

,#+results:
[[file:data/tmp/crackzor_1.0.c.gz]]
#+end_example

*** Add ~:session~ support of ob-js for js-comint
#+begin_src js :session "*Javascript REPL*"
console.log("stardiviner")
#+end_src
*** Add ~:session~ support of ob-js for Indium
#+begin_src js :session "*JS REPL*"
console.log("stardiviner")
#+end_src
*** Add ~:session~ support of ob-js for skewer-mode
#+begin_src js :session "*skewer-repl*"
console.log("stardiviner")
#+end_src
*** Add support for links to LaTeX equations in HTML export
Use MathJax links when enabled (by ~org-html-with-latex~), otherwise
add a label to the rendered equation.
*** Org Tempo may used for snippet expansion of structure template.
See manual and the commentary section in ~org-tempo.el~ for details.
*** Exclude unnumbered headlines from table of contents
Set their =UNNUMBERED= property to the special =notoc= value.  See
manual for details.
*** ~org-archive~ functions update status cookies

Archiving headers through ~org-archive-subtree~ and
~org-archive-to-archive-sibling~ such as the ones listed below:

#+BEGIN_SRC org
  ,* Top [1/2]
  ,** DONE Completed
  ,** TODO Working
#+END_SRC

Will update the status cookie in the top level header.

*** Disable =org-agenda-overriding-header= by setting to empty string

The ~org-agenda-overriding-header~ inserted into agenda views can now
be disabled by setting it to an empty string.

*** Dynamically narrow table columns

With ~C-c TAB~, it is now possible to narrow a column to the width
specified by a width cookie in the column, or to 1 character if there
is no such cookie.  The same keybinding expands a narrowed column to
its previous state.

Editing the column automatically expands the whole column to its full
size.

*** =org-columns-summary-types= entries can take an optional COLLECT function

You can use this to make collection of a property from an entry
conditional on another entry. E.g. given this configuration:

#+BEGIN_SRC emacs-lisp
  (defun custom/org-collect-confirmed (property)
    "Return `PROPERTY' for `CONFIRMED' entries"
    (let ((prop (org-entry-get nil property))
	  (confirmed (org-entry-get nil "CONFIRMED")))
      (if (and prop (string= "[X]" confirmed))
	  prop
	"0")))

  (setq org-columns-summary-types
	'(("X+" org-columns--summary-sum
	   custom/org-collect-confirmed)))
#+END_SRC

You can have a file =bananas.org= containing:

#+BEGIN_SRC org
  ,#+columns: %ITEM %CONFIRMED %Bananas{+} %Bananas(Confirmed Bananas){X+}

  ,* All shipments
  ,** Shipment 1
     :PROPERTIES:
     :CONFIRMED: [X]
     :Bananas:  4
     :END:

  ,** Shipment 2
     :PROPERTIES:
     :CONFIRMED: [ ]
     :BANANAS:  7
     :END:
#+END_SRC

... and when going to the top of that file and entering column view
you should expect to see something like:

| ITEM          | CONFIRMED | Bananas | Confirmed Bananas |
|---------------+-----------+---------+-------------------|
| All shipments |           |      11 |                 4 |
| Shipment 1    | [X]       |       4 |                 4 |
| Shipment 2    | [ ]       |       7 |                 7 |

#+BEGIN_EXAMPLE
  ,#+STARTUP: shrink
#+END_EXAMPLE
*** Allow to filter by tags/property when capturing colview

You can now use =:match= to filter entries using a todo/tags/properties
matcher.

*** Add support for Oracle's database alias in Babel blocks
=ob-sql= library already support running SQL blocks against an Oracle
database using ~sqlplus~.  Now it's possible to use alias names
defined in =TNSNAMES= file instead of specifying full connection
parameters.  See example bellow.

#+BEGIN_SRC org
  you can use the previous full connection parameters
  ,#+BEGIN_SRC sql :engine oracle :dbuser me :dbpassword my_insecure_password :database my_db_name :dbhost my_db_host :dbport 1521
  select sysdate from dual;
  ,#+END_SRC

  or the alias defined in your TNSNAMES file
  ,#+BEGIN_SRC sql :engine oracle :dbuser me :dbpassword my_insecure_password :database my_tns_alias
  select sysdate from dual;
  ,#+END_SRC
#+END_SRC

*** ~org-agenda-set-restriction-lock~ toggle agenda restriction at point

You can set an agenda restriction lock with =C-x C-x <= or with =<= at the
beginning of a headline when using Org speed commands.  Now, if there
is already a restriction at point, hitting =<= again (or =C-x C-x <=) will
remove it.

** New commands and functions

*** ~org-insert-structure-template~

This function can be used to wrap existing text of Org elements in
a #+BEGIN_FOO/#+END_FOO block.  Bound to C-c C-x w by default.

*** ~org-export-excluded-from-toc-p~

See docstring for details.

*** ~org-timestamp-to-time~
*** ~org-timestamp-from-string~
*** ~org-timestamp-from-time~
*** ~org-attach-dired-to-subtree~

See docstring for details.

*** ~org-toggle-narrow-to-subtree~

Toggle the narrowing state of the buffer: when in a narrowed state,
widen, otherwise call ~org-narrow-to-subtree~ to narrow.

This is attached to the "s" speed command, so that hitting "s" twice
will go back to the widen state.

*** ~org-browse-news~

Browse https://orgmode.org/Changes.html to let users read informations
about the last major release.

There is a new menu entry for this in the "Documentation" menu item.

*** ~org-info-find-node~

From an Org file or an agenda switch to a suitable info page depending
on the context.

The function is bound to =C-c C-x I=.

** Removed commands and functions
*** ~org-outline-overlay-data~
Use ~org-save-outline-visibility~ instead.
*** ~org-set-outline-overlay-data~
Use ~org-save-outline-visibility~ instead.
*** ~org-get-string-indentation~
It was not used throughout the code base.
*** ~org-fix-indentation~
It was not used throughout code base.
*** ~org-context-p~
Use ~org-element-at-point~ instead.
*** ~org-preserve-lc~
It is no longer used in the code base.
*** ~org-try-structure-completion~
Org Tempo may be used as a replacement.  See details above.
** Removed options

*** org-babel-use-quick-and-dirty-noweb-expansion

See [[*Change to Noweb expansion][Change to Noweb expansion]] for explanations.

** Miscellaneous

*** New default value for ~org-texinfo-table-scientific-notation~

It is now nil, which means numbers in scientific notation are not
handled specially by default.

*** New default value for ~org-latex-table-scientific-notation~

It is now nil, which means numbers in scientific notation are not
handled specially by default.

*** New face: ~org-upcoming-distant-deadline~

It is meant to be used as the face for distant deadlines, see
~org-agenda-deadline-faces~

*** ~org-paste-subtree~ no longer breaks sections

Unless point is at the beginning of a headline, ~org-paste-subtree~
now pastes the tree before the next visible headline.  If you need to
break the section, use ~org-yank~ instead.

*** ~org-table-insert-column~ inserts a column to the right

It used to insert it on the left.  With this change,
~org-table-insert-column~ and ~org-table-delete-column~ are
reciprocal.

*** ~org-publish-resolve-external-link~ accepts a new optional argument.
*** ~org-irc.el~ now supports exporting =irc:= links properly

Previously, irc links were exported by ~ox-md~ and ~ox-html~ as normal
file links, which lead to them being broken in web browsers. Now both
of these exporters will properly export to =irc:= links, which will
open properly in irc clients from web browsers.

*** ~org-comment-dwim~ (bound to =M-;=) now comments headings, if point is on a heading
*** Add support for open source block in window below

Set option ~org-src-window-setup~ to ~split-window-below~.

*** Alphabetic sorting in headings and tags now uses the locale’s sorting rules

When sorting alphabetically, ~org-sort-entries~ and
~org-tags-sort-function~ now sort according to the locale’s collation
rules instead of by code-point.
*** New speed command "k" to kill (cut) the subtree at point
* Version 9.1

** Incompatible changes

*** Variables relative to clocksum duration are obsolete

~org-time-clocksum-format~, ~org-time-clocksum-use-fractional~ and
~org-time-clocksum-fractional-format~ are obsolete.  If you changed
them, consider modifying ~org-duration-format~ instead.

Variable ~org-time-clocksum-use-effort-durations~ is also obsolete.
Consider setting ~org-duration-units~ instead.

*** ~org-at-timestamp-p~ optional argument accepts different values

See docstrings for the allowed values.  For backward compatibility,
~(org-at-timestamp-p t)~ is still supported, but should be updated
accordingly.

*** ~org-capture-templates~ no longer accepts S-expressions as file names

Since functions are allowed there, a straightforward way to migrate
is to turn, e.g.,

: (file (sexp))

into

: (file (lambda () (sexp)))

*** Deleted contributed packages

=org-ebib.el, =org-bullets.el= and =org-mime.el= have been deleted
from the contrib/ directory.

You can now find them here :

- https://github.com/joostkremers/ebib
- https://github.com/sabof/org-bullets
- https://github.com/org-mime/org-mime

*** Change ~org-texinfo-classes~ value

The value cannot support functions to create sectionning commands
anymore.  Also, the sectionning commands should include commands for
appendices.  See the docstring for more information.

*** Removal of ~:sitemap-sans-extension~

The publishing property is no longer recognized, as a consequence of
changes to site-map generation.

You can get the same functionality by setting ~:sitemap-format-entry~
to the following

#+BEGIN_SRC elisp
(lambda (entry style project)
  (cond ((not (directory-name-p entry))
	 (format "[[file:%s][%s]]"
		 (file-name-sans-extension entry)
		 (org-publish-find-title entry project)))
	((eq style 'tree) (file-name-nondirectory (directory-file-name entry)))
	(t entry)))
#+END_SRC

*** Change signature for ~:sitemap-function~

~:sitemap-function~ now expects to be called with two arguments.  See
~org-publish-project-alist~ for details.

*** Change signature for some properties in ~org-list-to-generic~

~:istart~, ~:icount~, ~:iend~ and ~:isep~ now expect the type of the
list as their first argument.

*** Change signature for ~org-get-repeater~

The optional argument is now a string to extract the repeater from.
See docstring for details.

*** Change signature for ~org-time-string-to-time~

See docstring for changes.

*** Change order of items in ~org-agenda-time-grid~

~org-agenda-time-grid~ gained an extra item to allow users to customize
the string displayed after times in the agenda. See docstring for
details.

*** ~tags-todo~ custom searches now include DONE keywords

Use "/!" markup when filtering TODO keywords to get only not-done TODO
keywords.

*** Removal of =ob-scala.el=

See [[https://github.com/ensime/emacs-scala-mode/issues/114][this github issue]].

You can use =ob-scala.el= as packaged in scala-mode, available from the
MELPA repository.

** New features
*** iCalendar export uses inheritance for TIMEZONE and LOCATION properties
Both these properties can be inherited during iCalendar export,
depending on the value of ~org-use-property-inheritance~.
*** iCalendar export respects a TIMEZONE property
Set the TIMEZONE property on an entry to specify a time zone for that
entry only during iCalendar export.  The property value should be
specified as in "Europe/London".
*** ~org-attach~ can move directory contents
When setting a new directory for an entry, org-attach offers to move
files over from the old directory.  Using a prefix arg will reset the
directory to old, ID based one.
*** New Org duration library
This new library implements tools to read and print time durations in
various formats (e.g., "H:MM", or "1d 2h 3min"...).

See ~org-duration-to-minutes~ and ~org-duration-from-minutes~
docstrings.

*** Agenda
**** New variable : ~org-agenda-show-future-repeats~
**** New variable : ~org-agenda-prefer-last-repeat~
**** New variable : ~org-deadline-past-days~
See docstring for details.
**** Binding C-c C-x < for ~org-agenda-set-restriction-lock-from-agenda~
**** New auto-align default setting for =org-agenda-tags-column=

=org-agenda-tags-column= can now be set to =auto=, which will
automatically align tags to the right edge of the window.  This is now
the default setting.

*** New value for ~org-publish-sitemap-sort-folders~

The new ~ignore~ value effectively allows toggling inclusion of
directories in published site-maps.

*** Babel

**** Scheme: support for tables
**** Scheme: new variable: ~org-babel-scheme-null-to~

This new custom option allows to use a empty list or null symbol to
format the table output, initially assigned to ~hlines~.

**** Scheme: new header ~:prologue~

A new block code header has been created for Org Babel that enables
developers to prepend code to the scheme block being processed.

Multiple ~:prologue~ headers can be added each of them using a string
with the content to be added.

The scheme blocks are prepared by surronding the code in the block
with a let form. The content of the ~:prologue~ headers are prepended
before this let form.

**** Support for hledger accounting reports added
**** Clojure: new setting ~org-babel-clojure-sync-nrepl-timeout~

Creation of a new setting to specify the Cider timeout.  By setting
the =org-babel-clojure-sync-nrepl-timeout= setting option.  The value
is in seconds and if set to =nil= then no timeout will occur.
**** Clojure: new header ~:show-process~

A new block code header has been created for Org Babel that enables
developers to output the process of an ongoing process into a new
window/buffer.

You can tell Org Babel to output the process of a running code block.

To show that output you only have to specify the =:show-process=
option in the code block's header like this:

#+begin_example
,#+BEGIN_SRC clojure :results output :show-process t
  (dotimes [n 10]
    (println n ".")
    (Thread/sleep 500))
,#+END_SRC
#+end_example

If =:show-process= is specified that way, then when you will run the
code using =C-c C-c= a new window will open in Emacs.  Everything that
is output by the REPL will immediately be added to that new window.

When the processing of the code is finished, then the window and its
buffer will be closed and the results will be reported in the
=#+RESULTS= section.

Note that the =:results= parameter's behavior is *not* changed.  If
=silent= is specified, then no result will be displayed.  If =output=
is specified then all the output from the window will appears in the
results section.  If =value= is specified, then only the last returned
value of the code will be displayed in the results section.

**** Maxima: new headers ~:prologue~ and ~:epilogue~
Babel options ~:prologue~ and ~:epilogue~ have been implemented for
Maxima src blocks which prepend and append, respectively, the given
code strings.  This can be useful for specifying formatting settings
which would add clutter to exported code.  For instance, you can use
this ~:prologue "fpprintprec: 2; linel: 50;"~ for presenting Maxima
results in a beamer presentation.
**** PlantUML: add support for header arguments

[[http://plantuml.com/][Plantuml]] source blocks now support the [[https://orgmode.org/manual/prologue.html#prologue][~:prologue~]], [[https://orgmode.org/manual/epilogue.html#epilogue][~:epilogue~]] and
[[https://orgmode.org/manual/var.html#var][~:var~]] header arguments.

**** SQL: new engine added ~sqsh~

A new engine was added to support ~sqsh~ command line utility for use
against Microsoft SQL Server or Sybase SQL server.

More information on ~sqsh~ can be found here: [[https://sourceforge.net/projects/sqsh/][sourceforge/sqsh]]

To use ~sqsh~ in an *sql* =SRC_BLK= set the =:engine= like this:

#+begin_example
,#+BEGIN_SRC sql :engine sqsh :dbhost my_host :dbuser master :dbpassword pass :database support
Select * From Users
Where clue > 0
,#+END_SRC
#+end_example

**** SQL: new engine added =vertica=

A new engine was added to support vsql command line utility for use
against HP Vertica.

More information on =vsql= can be found here: [[https://my.vertica.com/docs/7.2.x/HTML/index.htm#Authoring/ConnectingToHPVertica/vsql/UsingVsql.htm][my.vertica.com]]

To use =vertica= in an sql =SRC_BLK= set the =:engine= like this:

#+BEGIN_EXAMPLE
  ,#+BEGIN_SRC sql :engine vertica :dbhost my_host :dbuser dbadmin :dbpassword pw :database vmart
  SELECT * FROM nodes;
  ,#+END_SRC
#+END_EXAMPLE
**** C++: New header ~:namespaces~

The new ~:namespaces~ export option can be used to specify namespaces
to be used within a C++ org source block.  Its usage is similar to
~:includes~, in that it can accept multiple, space-separated
namespaces to use.  This header is equivalent to adding ~using
namespace <name>;~ in the source block. Here is a "Hello World" in C++
using ~:namespaces~:

#+begin_example
  ,#+BEGIN_SRC C++ :results output :namespaces std :includes <iostream>
    cout << "Hello World" << endl;
  ,#+END_SRC
#+end_example

**** Support for Vala language

[[https://wiki.gnome.org/Projects/Vala][Vala]] language blocks support two special header arguments:

- ~:flags~ passes arguments to the compiler
- ~:cmdline~ passes commandline arguments to the generated executable

Support for [[https://orgmode.org/manual/var.html#var][~:var~]] does not exist yet, also there is no [[https://orgmode.org/manual/session.html#session][~:session~]]
support because Vala is a compiled language.

The Vala compiler binary can be changed via the ~defcustom~
~org-babel-vala-compiler~.

*** New ~function~ scope argument for the Clock Table
Added a nullary function that returns a list of files as a possible
argument for the scope of the clock table.
*** Export
**** Implement vernacular table of contents in Markdown exporter
Global table of contents are generated using vanilla Markdown syntax
instead of HTML.  Also #+TOC keyword, including local table of
contents, are now supported.
**** Add Slovanian translations
**** Implement ~org-export-insert-image-links~
This new function is meant to be used in back-ends supporting images
as descriptions of links, a.k.a. image links.  See its docstring for
details.
**** New macro : ~{{{n}}}~
This macro creates and increment multiple counters in a document.  See
manual for details.
**** Add global macros through ~org-export-global-macros~
With this variable, one can define macros available for all documents.
**** New keyword ~#+EXPORT_FILE_NAME~
Similarly to ~:EXPORT_FILE_NAME:~ property, this keyword allows the
user to specify the name of the output file upon exporting the
document.  This also has an effect on publishing.
**** Horizontal rules are no longer ignored in LaTeX table math mode
**** Use ~compilation-mode~ for compilation output
**** Plain lists accept a new ~:separator~ attribute in Texinfo

The new ~:separator~ attribute splits a tag from a description list
item into multiple parts.  This allows to have two-column tables with
multiple entries in the first column.  See manual for more details.

**** ~latex-environment~ elements support ~caption~ keywords for LaTeX export
*** ~org-edit-special~ can edit LaTeX environments

Using ~C-c '~ on a LaTeX environment opens a sub-editing buffer.  By
default, major mode in that buffer is ~latex-mode~, but it can be
changed by configuring ~org-src-lang-modes~.

*** ~org-list-to-generic~ includes a new property: ~:ifmt~

~:ifmt~ is a function to be called on the body of each item.  See
~org-list-to-generic~ documentation for details.

*** New variable : ~org-bibtex-headline-format-function~
This allow to use a different title than entry title.

*** ~org-attach~ supports attaching files from URLs

Using ~C-c C-a u~ prompts for a URL pointing to a file to be attached
to the document.

*** New option for ~org-refile-use-outline-path~
~org-refile-use-outline-path~ now supports the setting ~buffer-name~,
which causes refile targets to be prefixed with the buffer’s
name. This is particularly useful when used in conjunction with
~uniquify.el~.

*** ~org-file-contents~ now allows the FILE argument to be a URL.
This allows ~#+SETUPFILE:~ to accept a URL instead of a local file
path.  The URL contents are auto-downloaded and saved to a temporary
cache ~org--file-cache~.  A new optional argument ~NOCACHE~ is added
to ~org-file-contents~.

*** ~org-mode-restart~ now resets the newly added ~org--file-cache~.
Using ~C-c C-c~ on any keyword (like ~#+SETUPFILE~) will reset the
that file cache.

*** New option : ~org-table-duration-hour-zero-padding~
This variable allow computed durations in tables to be zero-padded.

*** New mode switch for table formulas : =U=
This mode omits seconds in durations.

** Removed functions

*** Org Timeline

This feature has been removed.  Use a custom agenda view, possibly
narrowed to current buffer to achieve a similar functionality.

*** ~org-agenda-skip-entry-when-regexp-matches~ is obsolete

Use ~org-agenda-skip-if~ instead.

*** ~org-agenda-skip-subtree-when-regexp-matches~ is obsolete

Use ~org-agenda-skip-if~ instead.

*** ~org-agenda-skip-entry-when-regexp-matches-in-subtree~ is obsolete

Use ~org-agenda-skip-if~ instead.

*** ~org-minutes-to-clocksum-string~ is obsolete

Use ~org-duration-from-minutes~ instead.

*** ~org-hh:mm-string-to-minutes~ is obsolete

Use ~org-duration-to-minutes~ instead.

*** ~org-duration-string-to-minutes~ is obsolete

Use ~org-duration-to-minutes~ instead.

*** ~org-gnus-nnimap-cached-article-number~ is removed.

This function relied on ~nnimap-group-overview-filename~, which was
removed from Gnus circa September 2010.

** Removed options

*** ~org-agenda-repeating-timestamp-show-all~ is removed.

For an equivalent to a ~nil~ value, set
~org-agenda-show-future-repeats~ to nil and
~org-agenda-prefer-last-repeat~ to ~t~.

*** ~org-gnus-nnimap-query-article-no-from-file~ is removed.

This variable has no effect, as it was relying on a function that was
removed from Gnus circa September 2010.

*** ~org-usenet-links-prefer-google~ is obsolete.

Use ~org-gnus-prefer-web-links~ instead.

*** ~org-publish-sitemap-file-entry-format~ is deprecated

One can provide new ~:sitemap-format-entry~ property for a function
equivalent to the removed format string.

*** ~org-enable-table-editor~ is removed.

Setting it to a ~nil~ value broke some other features (e.g., speed
keys).

*** ~org-export-use-babel~ cannot be set to ~inline-only~

The variable is now a boolean.

*** ~org-texinfo-def-table-markup~ is obsolete

Use ~org-texinfo-table-default-markup~ instead.

** New functions

*** ~org-publish-find-property~

This function can be used as a tool to format entries in a site-map,
in addition to ~org-publish-find-title~ and ~org-publish-find-date~.

*** ~org-list-to-org~

It is the reciprocal of ~org-list-to-lisp~, which see.

*** ~org-agenda-set-restriction-lock-from-agenda~

Call ~org-agenda-set-restriction-lock~ from the agenda.

** Miscellaneous

*** The Library of Babel now on Worg

The library-of-babel.org used to be accessible from the =doc/=
directory, distributed with Org’s core.  It is now accessible
from the Worg community-driven documentation [[https://orgmode.org/worg/library-of-babel.html][here]].

If you want to contribute to it, please see [[https://orgmode.org/worg/org-contribute.html][how to contribute]].

*** Allow multiple columns view

Columns view is not limited to a single buffer anymore.
*** Org Attach obeys ~dired-dwim-target~

When a Dired buffer is opened next to the Org document being edited,
the prompt for file to attach can start in the Dired buffer's
directory if `dired-dwim-target' in non-nil.

*** ~org-fill-paragraph~ can now fill a whole region
*** More specific anniversary descriptions

Anniversary descriptions (used in the agenda view, for instance)
include the point in time, when the anniversary appears.  This is,
in its most general form, just the date of the anniversary.  Or
more specific terms, like "today", "tomorrow" or "in n days" are
used to describe the time span.

This feature allows to automatically change the description of an
anniversary, depending on if it occurs in the next few days or
far away in the future.

*** Computed dates in tables appear as inactive time stamps

*** Save point before opening a file with an unknown search option

When following a file link with a search option (e.g., =::#custom-id=)
that doesn't exist in the target file, save positon before raising an
error.  As a consequence, it is possible to jump back to the original
document with ~org-mark-ring-goto~ (default binding =C-c &=).

*** ~org-get-heading~ accepts two more optional arguments

See docstring for details.

*** New option ~org-babel-uppercase-example-markers~

This variable is a ~defcustom~ and replaces the variable
~org-babel-capitalize-example-region-markers~, which is a ~defvar~ and
is now obselete.
*** =INCLUDE= keywords in commented trees are now ignored.
*** Default value for ~org-texinfo-text-markup-alist~ changed.

Now ~=...=~ markup uses ~@samp{}~ instead of ~@verb{}~.  You can use
~@verb{}~ again by customizing the variable.
*** Texinfo exports example blocks as ~@example~
*** Texinfo exports inline src blocks as ~@code{}~
*** Texinfo default table markup is ~@asis~
It used to be ~@samp~ but ~@asis~ is neutral and, therefore, more
suitable as a default value.
*** Texinfo default process includes ~--no-split~ option
*** New entities : ~\dollar~ and ~\USD~
*** ~org-parse-time-string~ accepts a new optional argument
=ZONE= specifies the current time zone.
*** ~org-time-string-to-seconds~ now accepts an optional =ZONE= argument
*** Support for date style URLs in =org-protocol://open-source=
    URLs like =https://cool-blog.com/2017/05/20/cool-post/= are
    covered by rewrite rules.

*** Add (C) =COMMENT= support to ~org-structure-template-alist~

* Version 9.0

** Incompatible changes

*** Emacs 23 support has been dropped

From now on, Org expects at least Emacs 24.3, although Emacs 24.4 or
above is suggested.

*** XEmacs support has been dropped

Incomplete compatibility layer with XEmacs has been removed.  If you
want to take over maintainance of this compatibility, please contact
our mailing list.

*** New syntax for export blocks

Export blocks are explicitly marked as such at the syntax level to
disambiguate their parsing from special blocks.  The new syntax is

#+BEGIN_SRC org
,#+BEGIN_EXPORT backend
...
,#+END_EXPORT
#+END_SRC

instead of

#+BEGIN_SRC org
,#+BEGIN_backend
...
,#+END_backend
#+END_SRC

As a consequence, =INCLUDE= keywords syntax is modified, e.g.,

#+BEGIN_SRC org
,#+INCLUDE: "file.org" HTML
#+END_SRC

becomes

#+BEGIN_SRC org
,#+INCLUDE: "file.org" export html
#+END_SRC

The following function repairs export blocks and =INCLUDE= keywords
using previous syntax:

#+BEGIN_SRC emacs-lisp
(defun org-repair-export-blocks ()
  "Repair export blocks and INCLUDE keywords in current buffer."
  (interactive)
  (when (eq major-mode 'org-mode)
    (let ((case-fold-search t)
          (back-end-re (regexp-opt
                        '("HTML" "ASCII" "LATEX" "ODT" "MARKDOWN" "MD" "ORG"
                          "MAN" "BEAMER" "TEXINFO" "GROFF" "KOMA-LETTER")
                        t)))
      (org-with-wide-buffer
       (goto-char (point-min))
       (let ((block-re (concat "^[ \t]*#\\+BEGIN_" back-end-re)))
         (save-excursion
           (while (re-search-forward block-re nil t)
             (let ((element (save-match-data (org-element-at-point))))
               (when (eq (org-element-type element) 'special-block)
                 (save-excursion
                   (goto-char (org-element-property :end element))
                   (save-match-data (search-backward "_"))
                   (forward-char)
                   (insert "EXPORT")
                   (delete-region (point) (line-end-position)))
                 (replace-match "EXPORT \\1" nil nil nil 1))))))
       (let ((include-re
              (format "^[ \t]*#\\+INCLUDE: .*?%s[ \t]*$" back-end-re)))
         (while (re-search-forward include-re nil t)
           (let ((element (save-match-data (org-element-at-point))))
             (when (and (eq (org-element-type element) 'keyword)
                        (string= (org-element-property :key element) "INCLUDE"))
               (replace-match "EXPORT \\1" nil nil nil 1)))))))))
#+END_SRC

Moreover, ~:export-block~ keyword used in ~org-export-define-backend~ and
~org-export-define-derived-backend~ is no longer used and needs to be
removed.

*** Footnotes

**** [1]-like constructs are not valid footnotes

Using =[1]= as a footnote was already discouraged in the manual, since
it introduced too many false-positives in many Org documents.  These
constructs are now unsupported.

If you used =[N]= in some of your documents, consider turning them into
=[fn:N]=.

**** /Org Footnote/ library doesn't handle non-Org buffers

Commands for footnotes in an Org document no longer try to do
something in non-Org ones.  If you need to have footnotes there,
consider using the =footnote.el= library, shipped with Emacs.

In particular, ~org-footnote-tag-for-non-org-mode-files~ no longer
exists.

*** ~org-file-apps~ no longer accepts S-expressions as commands

The variable now accepts functions of two arguments instead of plain
S-expressions.  Replacing a S-expresion with an appropriate function
is straightforward.  For example

: ("pdf" . (foo))

becomes

: ("pdf" . (lambda (file link) (foo)))

*** The ~{{{modification-time}}}~ macro can get time via =vc=

The modification time will be determined via =vc.el= if the second
argument is non-nil.  See the manual for details.

*** Preparation and completion functions in publishing projects change signature

Preparation and completion functions are now called with an argument,
which is the project property list.  It used to be dynamically scoped
through the ~project-plist~ variable.

*** Old Babel header properties are no longer supported

Using header arguments as property names is no longer possible.  As
such, the following

#+BEGIN_EXAMPLE
,* Headline
:PROPERTIES:
:exports: code
:var: a=1 b=2
:var+: c=3
:END:
#+END_EXAMPLE

should be written instead

#+BEGIN_EXAMPLE
,* Headline
:PROPERTIES:
:header-args: :exports code
:header-args: :var a=1 b=2
:header-args+: :var c=3
:END:
#+END_EXAMPLE

Please note that, however, old properties were defined at the source
block definition.  Current ones are defined where the block is called.

** New features

*** ~org-eww~ has been moved into core
*** New org-protocol key=value syntax

Org-protocol can now handle query-style parameters such as:

#+begin_example
org-protocol://store-link?url=http:%2F%2Flocalhost%2Findex.html&title=The%20title
org-protocol://capture?template=x&title=Hello&body=World&url=http:%2F%2Fexample.com
#+end_example

Old-style links such as
: org-protocol://store-link:/http:%2F%2Flocalhost%2Findex.html/The%20title
continue to be supported.

If you have defined your own handler functions for
~org-protocol-protocol-alist~, change them to accept either a property
list (for new-style links) or a string (for old-style links).  Use
~org-protocol-parse-parameters~ to convert old-style links into property
lists.

*** New Org linter library

~org-lint~ can check syntax and report common issues in Org documents.

*** New option ~date-tree-last~ for ~org-agenda-insert-diary-strategy~

When ~org-agenda-insert-diary-strategy~ is set to ~date-tree-last~, diary
entries are added to last in the date tree.

*** New ~vbar~ entity

~\vbar~ or ~\vbar{}~ will be exported unconditionnally as a =|=,
unlike to existing ~\vert~, which is expanded as ~&vert;~ when using
a HTML derived export back-end.

*** Export

**** New =#+latex_compiler= keyword to set LaTeX compiler.

PDFLaTeX, XeLaTeX, and LuaLaTeX are supported.  See the manual for
details.

**** New option ~org-export-with-broken-links~

This option tells the export process how to behave when encountering
a broken internal link.  See its docstring for more information.

**** Attributes support in custom language environments for LaTeX export

Custom language environments for LaTeX export can now define the
string to be inserted during export, using attributes to indicate the
position of the elements. See variable ~org-latex-custom-lang-environments~
for more details.

**** New Texinfo ~options~ attribute on special blocks

Using ~:options~ as a Texinfo attribute, it is possible to add
information to custom environments.  See manual for details.

**** New HTML ~id~ attributes on special, example and quote blocks

If the block has a =#+NAME:= attribute assigned, then the HTML element
will have an ~id~ attribute with that name in the HTML export. This
enables one to create links to these elements in other places, e.g.,
~<a href="#name">text</a>~.

**** Listings with captions are now numbered in HTML export

The class associated to the numbering is "listing-number".  If you
don't want these blocks to be numbered, as it was the case until now,
You may want to add ~.listing-number { display: none; }~ to the CSS
used.

**** Line Numbering in SRC/EXAMPLE blocks support arbitrary start number

The ~-n~ option to ~SRC~ and ~EXAMPLE~ blocks can now take a numeric
argument to specify the staring line number for the source or example
block.  The ~+n~ option can now take a numeric argument that will be
added to the last line number from the previous block as the starting
point for the SRC/EXAMPLE block.

#+BEGIN_SRC org
,#+BEGIN_SRC emacs-lisp -n 20
;; this will export with line number 20
(message "This is line 21")
,#+END_SRC
,#+BEGIN_SRC emacs-lisp +n 10
;; This will be listed as line 31
(message "This is line 32")
,#+END_SRC
#+END_SRC

**** Allow toggling center for images in LaTeX export

With the global variable ~org-latex-images-centered~ or the local
attribute ~:center~ it is now possible to center an image in LaTeX
export.

**** Default CSS class ~org-svg~ for SVG images in HTML export

SVG images exported in HTML are now by default assigned a CSS class
~org-svg~ if no CSS class is specified with the ~:class~ attribute. By
default, the CSS styling of class ~org-svg~ specifies an image width of
90\thinsp{}% of the container the image.

**** Markdown footnote export customization

Variables ~org-md-footnotes-section~ and ~org-md-footnote-format~
introduced for =ox-md.el=.  Both new variables define template strings
which can be used to customize the format of the exported footnotes
section and individual footnotes, respectively.

*** Babel

**** Blocks with coderefs labels can now be evaluated

The labels are removed prior to evaluating the block.

**** Support for Lua language
**** Support for SLY in Lisp blocks

See ~org-babel-lisp-eval-fn~ to activate it.

**** Support for Stan language

New ob-stan.el library.

Evaluating a Stan block can produce two different results.

1. Dump the source code contents to a file.

   This file can then be used as a variable in other blocks, which
   allows interfaces like RStan to use the model.

2. Compile the contents to a model file.

   This provides access to the CmdStan interface.  To use this, set
   ~org-babel-stan-cmdstan-directory~ and provide a ~:file~ argument
   that does not end in ".stan".

For more information and usage examples, visit
https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-stan.html

**** Support for Oracle databases via ~sqlplus~

=ob-sql= library supports running SQL blocks against an Oracle
database using ~sqlplus~.  Use with properties like this (all
mandatory):

#+BEGIN_EXAMPLE
:engine oracle
:dbhost <host.com>
:dbport <1521>
:dbuser <username>
:database <database>
:dbpassword <secret>
#+END_EXAMPLE

**** Improved support to Microsoft SQL Server via ~sqlcmd~

=ob-sql= library removes support to the ~msosql~ engine which uses the
deprecated ~osql~ command line tool, and replaces it with ~mssql~
engine which uses the ~sqlcmd~ command line tool.  Use with properties
like this:

#+BEGIN_EXAMPLE
:engine mssql
:dbhost <host.com>
:dbuser <username>
:dbpassword <secret>
:database <database>
#+END_EXAMPLE

If you want to use the *trusted connection* feature, omit *both* the
=dbuser= and =dbpassword= properties and add =cmdline -E= to the properties.

If your Emacs is running in a Cygwin environment, the =ob-sql= library
can pass the converted path to the =sqlcmd= tool.

**** Improved support of header arguments for postgresql 

The postgresql engine in a sql code block supports now ~:dbport~ nd
~:dbpassword~ as header arguments.

**** Support for additional plantuml output formats

The support for output formats of [[http://plantuml.com/][plantuml]] has been extended to now
include:

All Diagrams:
- png ::
- svg ::
- eps ::
- pdf ::
- vdx ::
- txt :: ASCII art
- utxt :: ASCII art using unicode characters

Class Diagrams:
- xmi ::
- html ::

State Diagrams:
- scxml ::

The output formats are determined by the file extension specified
using the :file property, e.g.:

#+begin_src plantuml :file diagram.png
@startuml
Alice -> Bob: Authentication Request
Bob --> Alice: Authentication Response

Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
#+end_src

Please note that *pdf* *does not work out of the box* and needs additional
setup in addition to plantuml.  See [[http://plantuml.com/pdf.html]] for
details and setup information.

*** Rewrite of radio lists

Radio lists, i.e, Org plain lists in foreign buffers, have been
rewritten to be on par with Radio tables.  You can use a large set of
parameters to control how a given list should be rendered.  See manual
for details.

*** org-bbdb-anniversaries-future

Used like ~org-bbdb-anniversaries~, it provides a few days warning for
upcoming anniversaries (default: 7 days).

*** Clear non-repeated SCHEDULED upon repeating a task

If the task is repeated, and therefore done at least one, scheduling
information is no longer relevant.  It is therefore removed.

See [[git:481719fbd5751aaa9c672b762cb43aea8ee986b0][commit message]] for more information.

*** Support for ISO week trees

ISO week trees are an alternative date tree format that orders entries
by ISO week and not by month.

For example:

: * 2015
: ** 2015-W35
: ** 2015-W36
: *** 2015-08-31 Monday

They are supported in org-capture via ~file+weektree~ and
~file+weektree+prompt~ target specifications.

*** Accept ~:indent~ parameter when capturing column view

When defining a "columnview" dynamic block, it is now possible to add
an :indent parameter, much like the one in the clock table.

On the other hand, stars no longer appear in an ITEM field.

*** Columns view

**** ~org-columns~ accepts a prefix argument

When called with a prefix argument, ~org-columns~ apply to the whole
buffer unconditionally.

**** New variable : ~org-agenda-view-columns-initially~

The variable used to be a ~defvar~, it is now a ~defcustom~.

**** Allow custom summaries

It is now possible to add new summary types, or override those
provided by Org by customizing ~org-columns-summary-types~, which see.

**** Allow multiple summaries for any property

Columns can now summarize the same property using different summary
types.

*** Preview LaTeX snippets in buffers not visiting files
*** New option ~org-attach-commit~

When non-nil, commit attachments with git, assuming the document is in
a git repository.

*** Allow conditional case-fold searches in ~org-occur~

When set to ~smart~, the new variable ~org-occur-case-fold-search~ allows
to mimic =isearch.el=: if the regexp searched contains any upper case
character (or character class), the search is case sensitive.
Otherwise, it is case insensitive.

*** More robust repeated =ox-latex= footnote handling

Repeated footnotes are now numbered by referring to a label in the
first footnote.

*** The ~org-block~ face is inherited by ~src-blocks~

This works also when =org-src-fontify-natively= is non-nil.  It is also
possible to specify per-languages faces.  See =org-src-block-faces= and
the manual for details.

*** Links are now customizable

Links can now have custom colors, tooltips, keymaps, display behavior,
etc.  Links are now centralized in ~org-link-parameters~.

** New functions

*** ~org-next-line-empty-p~

It replaces the deprecated ~next~ argument to ~org-previous-line-empty-p~.

*** ~org-show-children~

It is a faster implementation of ~outline-show-children~.

** Removed functions

*** ~org-agenda-filter-by-tag-refine~ has been removed.

Use ~org-agenda-filter-by-tag~ instead.

*** ~org-agenda-todayp~ is deprecated.

Use ~org-agenda-today-p~ instead.

*** ~org-babel-get-header~ is removed.

Use ~org-babel--get-vars~ or ~assq~ instead, as applicable.

*** ~org-babel-trim~ is deprecated.

Use ~org-trim~ instead.

*** ~org-element-remove-indentation~ is deprecated.

Use ~org-remove-indentation~ instead.

*** ~org-image-file-name-regexp~ is deprecated

Use ~image-file-name-regexp~ instead.
The never-used-in-core ~extensions~ argument has been dropped.

*** ~org-list-parse-list~ is deprecated

Use ~org-list-to-lisp~ instead.

*** ~org-on-heading-p~ is deprecated

A comment to this effect was in the source code since 7.8.03, but
now a byte-compiler warning will be generated as well.

*** ~org-table-p~ is deprecated

Use ~org-at-table-p~ instead.

*** ~org-table-recognize-table.el~ is deprecated

It was not called by any org code since 2010.

*** Various reimplementations of cl-lib functions are deprecated

The affected functions are:
- ~org-count~
- ~org-remove-if~
- ~org-remove-if-not~
- ~org-reduce~
- ~org-every~
- ~org-some~

Additionally, ~org-sublist~ is deprecated in favor of ~cl-subseq~.  Note
the differences in indexing conventions: ~org-sublist~ is 1-based and
end-inclusive; ~cl-subseq~ is 0-based and end-exclusive.

** Removed options

*** Remove all options related to ~ido~ or ~iswitchb~

This includes ~org-completion-use-iswitchb~ and ~org-completion-use-ido~.
Instead Org uses regular functions, e.g., ~completion-read~ so as to
let those libraries operate.

*** Remove ~org-list-empty-line-terminates-plain-lists~

Two consecutive blank lines always terminate all levels of current
plain list.

*** ~fixltx2e~ is removed from ~org-latex-default-packages-alist~

fixltx2e is obsolete, see LaTeX News 22.

** Miscellaneous
*** Add Icelandic smart quotes
*** Allow multiple receiver locations in radio tables and lists
*** Allow angular links within link descriptions

It is now allowed to write, e.g.,
~[[http:orgmode.org][<file:unicorn.png>]]~ as an equivalent to
~[[http:orgmode.org][file:unicorn.png]]~.  The advantage of the former
is that spaces are allowed within the path.

*** Beamer export back-ends uses ~org-latex-prefer-user-labels~
*** ~:preparation-function~ called earlier during publishing

Functions in this list are called before any file is associated to the
current projet.  Thus, they can be used to generate to be published
Org files.

*** Function ~org-remove-indentation~ changes.

The new algorithm doesn't remove TAB characters not used for
indentation.

*** Secure placeholders in capture templates

Placeholders in capture templates are no longer expanded recursively.
However, ~%(...)~ constructs are expanded very late, so you can fill
the contents of the S-exp with the replacement text of non-interactive
placeholders.  As before, interactive ones are still expanded as the
very last step, so the previous statement doesn't apply to them.

Note that only ~%(...)~ placeholders initially present in the
template, or introduced using a file placeholder, i.e., ~%[...]~ are
expanded.  This prevents evaluating potentially malicious code when
another placeholder, e.g., ~%i~ expands to a S-exp.

*** Links stored by ~org-gnus-store-link~ in nnir groups

Since gnus nnir groups are temporary, ~org-gnus-store-link~ now refers
to the article's original group.

*** ~org-babel-check-confirm-evaluate~ is now a function instead of a macro

The calling convention has changed.

*** HTML export table row customization changes

Variable ~org-html-table-row-tags~ has been split into
~org-html-table-row-open-tag~ and ~org-html-table-row-close-tag~.
Both new variables can be either a string or a function which will be
called with 6 parameters.

*** =ITEM= special property returns headline without stars
*** Rename ~org-insert-columns-dblock~ into ~org-columns-insert-dblock~

The previous name is, for the time being, kept as an obsolete alias.

*** ~org-trim~ can preserve leading indentation.

When setting a new optional argument to a non-nil value, ~org-trim~
preserves leading indentation while removing blank lines at the
beginning of the string.  The behavior is identical for white space at
the end of the string.

*** Function ~org-info-export~ changes.

HTML links created from certain info links now point to =gnu.org= URL's rather
than just to local files. For example info links such as =info:emacs#List
Buffers= used to be converted to HTML links like this:

: <a href="emacs.html#List-Buffers">emacs#List Buffers</a>

where local file =emacs.html= is referenced.
For most folks this file does not exist.
Thus the new behavior is to generate this HTML link instead:

: <a href="http://www.gnu.org/software/emacs/manual/html_mono/emacs.html#List-Buffers">emacs#List Buffers</a>

All emacs related info links are similarly translated plus few other
=gnu.org= manuals.

*** Repeaters with a ~++~ interval and a time can be shifted to later today

Previously, if a recurring task had a timestamp of
~<2016-01-01 Fri 20:00 ++1d>~ and was completed on =2016-01-02= at
=08:00=, the task would skip =2016-01-02= and would be rescheduled for
=2016-01-03=.  Timestamps with ~++~ cookies and a specific time will
now shift to the first possible future occurrence, even if the
occurrence is later the same day the task is completed.  (Timestamps
already in the future are still shifted one time further into the
future.)

*** ~org-mobile-action-alist~ is now a defconst

It used to be a defcustom, with a warning that it shouldn't be
modified anyway.

*** ~file+emacs~ and ~file+sys~ link types are deprecated

They are still supported in Org 9.0 but will eventually be removed in
a later release.  Use ~file~ link type along with universal arguments
to force opening it in either Emacs or with system application.

*** New defcustom ~org-babel-J-command~ stores the j command
*** New defalias ~org-babel-execute:j~

Allows J source blocks be indicated by letter j.  Previously the
indication letter was solely J.

*** ~org-open-line~ ignores tables at the very beginning of the buffer

When ~org-special-ctrl-o~ is non-nil, it is impractical to create
a blank line above a table at the beginning of the document. Now, as
a special case, ~org-open-line~ behaves normally in this situation.

*** ~org-babel-hash-show-time~ is now customizable

The experimental variable used to be more or less confidential, as
a ~defvar~.

*** New ~:format~ property to parsed links

It defines the format of the original link.  Possible values are:
~plain~, ~bracket~ and ~angle~.

* Version 8.3

** Incompatible changes

*** Properties drawers syntax changes

Properties drawers are now required to be located right after a
headline and its planning line, when applicable.

It will break some documents as TODO states changes were sometimes
logged before the property drawer.

The following function will repair them:

#+BEGIN_SRC emacs-lisp
(defun org-repair-property-drawers ()
  "Fix properties drawers in current buffer.
 Ignore non Org buffers."
  (when (eq major-mode 'org-mode)
    (org-with-wide-buffer
     (goto-char (point-min))
     (let ((case-fold-search t)
           (inline-re (and (featurep 'org-inlinetask)
                           (concat (org-inlinetask-outline-regexp)
                                   "END[ \t]*$"))))
       (org-map-entries
        (lambda ()
          (unless (and inline-re (org-looking-at-p inline-re))
            (save-excursion
              (let ((end (save-excursion (outline-next-heading) (point))))
                (forward-line)
                (when (org-looking-at-p org-planning-line-re) (forward-line))
                (when (and (< (point) end)
                           (not (org-looking-at-p org-property-drawer-re))
                           (save-excursion
                             (and (re-search-forward org-property-drawer-re end t)
                                  (eq (org-element-type
                                       (save-match-data (org-element-at-point)))
                                      'drawer))))
                  (insert (delete-and-extract-region
                           (match-beginning 0)
                           (min (1+ (match-end 0)) end)))
                  (unless (bolp) (insert "\n"))))))))))))
#+END_SRC 
*** =#+CATEGORY= keywords no longer apply partially to document

It was possible to use several such keywords and have them apply to
the text below until the next one, but strongly deprecated since Org
5.14 (2008).

=#+CATEGORY= keywords are now global to the document.  You can use node
properties to set category for a subtree, e.g.,

#+BEGIN_SRC org
,* Headline
   :PROPERTIES:
   :CATEGORY: some category
   :END:
#+END_SRC
*** New variable to control visibility when revealing a location

~org-show-following-heading~, ~org-show-siblings~,
~org-show-entry-below~ and ~org-show-hierarchy-above~ no longer exist.
Instead, visibility is controlled through a single variable:
~org-show-context-detail~, which see.

*** Replace disputed keys again when reading a date

~org-replace-disputed-keys~ has been ignored when reading date since
version 8.1, but the former behavior is restored again.

Keybinding for reading date can be customized with a new variable
~org-read-date-minibuffer-local-map~.

*** No default title is provided when =TITLE= keyword is missing

Skipping =TITLE= keyword no longer provides the current file name, or
buffer name, as the title. Instead, simply ignore the title.

*** Functions signature changes

The following functions require an additional argument.  See their
docstring for more information.

- ~org-export-collect-footnote-definitions~
- ~org-html-format-headline-function~
- ~org-html-format-inlinetask-function~
- ~org-latex-format-headline-function~
- ~org-latex-format-inlinetask-function~
- ~org-link-search~

*** Default bindings of =C-c C-n= and =C-c C-p= changed

The key sequences =C-c C-n= and =C-c C-p= are now bound to
~org-next-visible-heading~ and ~org-next-visible-heading~
respectively, rather than the =outline-mode= versions of these
functions.  The Org version of these functions skips over inline tasks
(and even-level headlines when ~org-odd-levels-only~ is set).

*** ~org-element-context~ no longer return objects in keywords

~org-element-context~ used to return objects on some keywords, i.e.,
=TITLE=, =DATE= and =AUTHOR=.  It now returns only the keyword.

*** Behavior of ~org-return~ changed

If point is before or after the headline title, insert a new line
without changing the headline.

*** ~org-timer-default-timer~ type changed from number to string

If you have, in your configuration, something like =(setq
org-timer-default-timer 10)= replace it with =(setq
org-timer-default-timer "10")=.
** New features

*** Hierarchies of tags
The functionality of nesting tags in hierarchies is added to org-mode.
This is the generalization of what was previously called "Tag groups"
in the manual.  That term is now changed to "Tag hierarchy".

The following in-buffer definition:
#+BEGIN_SRC org
  ,#+TAGS: [ Group : SubOne SubTwo ]
  ,#+TAGS: [ SubOne : SubOne1 SubOne2 ]
  ,#+TAGS: [ SubTwo : SubTwo1 SubTwo2 ]
#+END_SRC

Should be seen as the following tree of tags:
- Group
  - SubOne
    - SubOne1
    - SubOne2
  - SubTwo
    - SubTwo1
    - SubTwo2

Searching for "Group" should return all tags defined above.  Filtering
on SubOne filters also it's sub-tags.  Etc.

There is no limit on the depth for the tag hierarchy.

*** Additional syntax for non-unique grouptags
Additional syntax is defined for grouptags if the tags in the group
don't have to be distinct on a heading.

Grouptags had to previously be defined with { }.  This syntax is
already used for exclusive tags and Grouptags need their own,
non-exclusive syntax.  This behaviour is achieved with [ ].  Note: {
} can still be used also for Grouptags but then only one of the
given tags can be used on the headline at the same time.  Example:

[ group : sub1 sub2 ]

#+BEGIN_SRC org
  ,* Test                                                            :sub1:sub2:
#+END_SRC

This is a more general case than the already existing syntax for
grouptags; { }.

*** Define regular expression patterns as tags
Tags can be defined as grouptags with regular expressions as
"sub-tags".

The regular expressions in the group must be marked up within { }.
Example use:

: #+TAGS: [ Project : {P@.+} ]

Searching for the tag Project will now list all tags also including
regular expression matches for P@.+.  Good for example if tags for a
certain project is tagged with a common project-identifier,
i.e. P@2014_OrgTags.

*** Filtering in the agenda on grouptags (Tag hierarchies)
Filtering in the agenda on grouptags filter all of the related tags.
Exception if filter is applied with a (double) prefix-argument.

Filtering in the agenda on subcategories does not filter the "above"
levels anymore.

If a grouptag contains a regular expression the regular expression
is also used as a filter.

*** Minor refactoring of ~org-agenda-filter-by-tag~
Now uses the argument arg and optional argument exclude instead of
strip and narrow.  ARG because the argument has multiple purposes and
makes more sense than strip now.  The term narrowing is changed to
exclude.

The main purpose is for the function to make more logical sense when
filtering on tags now when tags can be structured in hierarchies.

*** Babel: support for sed scripts

Thanks to Bjarte Johansen for this feature.

*** Babel: support for Processing language

New ob-processing.el library.

This library implements necessary functions for implementing editing
of Processing code blocks, viewing the resulting sketches in an
external viewer, and HTML export of the sketches.

Check the documentation for more.

Thanks to Jarmo Hurri for this feature.

*** New behaviour for `org-toggle-latex-fragment'
The new behaviour is the following:

- With a double prefix argument or with a single prefix argument
  when point is before the first headline, toggle overlays in the
  whole buffer;

- With a single prefix argument, toggle overlays in the current
  subtree;

- On latex code, toggle overlay at point;

- Otherwise, toggle overlays in the current section.

*** Additional markup with =#+INCLUDE= keyword

The content of the included file can now be optionally marked up, for
instance as HTML.  See the documentation for details.

*** File links with =#+INCLUDE= keyword

Objects can be extracted via =#+INCLUDE= using file links.  It is
possible to include only the contents of the object.  See manual for
more information.

*** Drawers do not need anymore to be referenced in =#+DRAWERS=

One can use a drawer without listing it in the =#+DRAWERS= keyword,
which is now obsolete.  As a consequence, this change also deprecates
~org-drawers~ variable.

*** ~org-edit-special~ can edit export blocks

Using C-c ' on an export block now opens a sub-editing buffer.  Major
mode in that buffer is determined by export backend name (e.g.,
"latex" \to "latex-mode").  You can define exceptions to this rule by
configuring ~org-src-lang-modes~, which see.

*** Additional =:hline= processing to ob-shell

If the argument =:hlines yes= is present in a babel call, an optional
argument =:hlines-string= can be used to define a string to use as a
representation for the lisp symbol ='hline= in the shell program.  The
default is =hline=.

*** Markdown export supports switches in source blocks

For example, it is now possible to number lines using the =-n= switch
in a source block.

*** New option in ASCII export

Plain lists can have an extra margin by setting
~org-ascii-list-margin~ variable to an appopriate integer.

*** New blocks in ASCII export

ASCII export now supports =#+BEGIN_JUSTIFYRIGHT= and
=#+BEGIN_JUSTIFYLEFT= blocks.  See documentation for details.

*** More back-end specific publishing options

The number of publishing options specific to each back-end has been
increased.  See manual for details.

*** Export inline source blocks

Inline source code was used to be removed upon exporting.  They are
now handled as standard code blocks, i.e., the source code can appear
in the output, depending on the parameters.

*** Extend ~org-export-first-sibling-p~ and ~org-export-last-sibling-p~

These functions now support any element or object, not only headlines.

*** New function: ~org-export-table-row-in-header-p~

*** New function: ~org-export-get-reference~

*** New function: ~org-element-lineage~

This function deprecates ~org-export-get-genealogy~.  It also provides
more features.  See docstring for details.

*** New function: ~org-element-copy~

*** New filter: ~org-export-filter-body-functions~

Functions in this filter are applied on the body of the exported
document, befor wrapping it within the template.

*** Various improvements on radio tables

Radio tables feature now relies on Org's export framework ("ox.el").
~:no-escape~ parameter no longer exists, but additional global
parameters are now supported: ~:raw~, ~:backend~.  Moreover, there are
new parameters specific to some pre-defined translators, e.g.,
~:environment~ and ~:booktabs~ for ~orgtbl-to-latex~.  See translators
docstrings (including ~orgtbl-to-generic~) for details.

*** Non-floating minted listings in Latex export

It is not possible to specify =#+attr_latex: :float nil= in conjunction with
source blocks exported by the minted package.

*** Field formulas can now create columns as needed

Previously, evaluating formulas that referenced out-of-bounds columns
would throw an error. A new variable
~org-table-formula-create-columns~ was added to adjust this
behavior. It is now possible to silently add new columns, to do so
with a warning or to explicitly ask the user each time.

*** ASCII plot

Ability to plot values in a column through ASCII-art bars.  See manual
for details.

*** New hook: ~org-archive-hook~

This hook is called after successfully archiving a subtree, with point
on the original subtree, not yet deleted.

*** New option: ~org-attach-archive-delete~

When non-nil, attachments from archived subtrees are removed.

*** New option: ~org-latex-caption-above~

This variable generalizes ~org-latex-table-caption-above~, which is
now deprecated.  In addition to tables, it applies to source blocks,
special blocks and images.  See docstring for more information.

*** New option: ~org-latex-prefer-user-labels~

See docstring for more information.

*** Export unnumbered headlines

Headlines, for which the property ~UNNUMBERED~ is non-nil, are now
exported without section numbers irrespective of their levels.  The
property is inherited by children.

*** Tables can be sorted with an arbitrary function

It is now possible to specify a function, both programatically,
through a new optional argument, and interactively with ~f~ or ~F~
keys, to sort a table.

*** Table of contents can be local to a section

The ~TOC~ keywords now accepts an optional ~local~ parameter.  See
manual for details.

*** Countdown timers can now be paused

~org-timer-pause-time~ now pauses and restarts both relative and
countdown timers.

*** New option ~only-window~ for ~org-agenda-window-setup~

When ~org-agenda-window-setup~ is set to ~only-window~, the agenda is
displayed as the sole window of the current frame.

*** ~{{{date}}}~ macro supports optional formatting argument

It is now possible to supply and optional formatting argument to
~{{{date}}}~. See manual for details.

*** ~{{{property}}}~ macro supports optional search argument

It is now possible to supply an optional search option to
~{{{property}}}~ in order to retrieve remote properties optional.  See
manual for details.

*** New option ~org-export-with-title~

It is possible to suppress the title insertion with ~#+OPTIONS:
title:nil~ or globally using the variable ~org-export-with-title~.

*** New entities family: "\_ "

"\_ " are used to insert up to 20 contiguous spaces in various
back-ends.  In particular, this family can be used to introduce
leading spaces within table cells.

*** New MathJax configuration options

Org uses the MathJax CDN by default.  See the manual and the docstring
of ~org-html-mathjax-options~ for details.

*** New behaviour in `org-export-options-alist'

When defining a back-end, it is now possible to specify to give
`parse' behaviour on a keyword.  It is equivalent to call
`org-element-parse-secondary-string' on the value.

However, parsed =KEYWORD= is automatically associated to an
=:EXPORT_KEYWORD:= property, which can be used to override the keyword
value during a subtree export.  Moreover, macros are expanded in such
keywords and properties.

*** Viewport support in html export

Viewport for mobile-optimized website is now automatically inserted
when exporting to html.  See ~org-html-viewport~ for details.

*** New ~#+SUBTITLE~ export keyword

Org can typeset a subtitle in some export backends.  See the manual
for details.

*** Remotely edit a footnote definition

Calling ~org-edit-footnote-reference~ (C-c ') on a footnote reference
allows to edit its definition, as long as it is not anonymous, in
a dedicated buffer.  It works even if buffer is currently narrowed.

*** New function ~org-delete-indentation~ bound to ~M-^~

Work as ~delete-indentation~ unless at heading, in which case text is
added to headline text.

*** Support for images in Texinfo export

~Texinfo~ back-end now handles images.  See manual for details.

*** Support for captions in Texinfo export

Tables and source blocks can now have captions.  Additionally, lists
of tables and lists of listings can be inserted in the document with
=#+TOC= keyword.

*** Countdown timer support hh:mm:ss format

In addition to setting countdown timers in minutes, they can also be
set using the hh:mm:ss format.

*** Extend ~org-clone-subtree-with-time-shift~

~org-clone-subtree-with-time-shift~ now accepts 0 as an argument for
the number of clones, which removes the repeater from the original
subtree and creates one shifted, repeating clone.

*** New time block for clock tables: ~untilnow~

It encompasses all past closed clocks.

*** Support for the ~polyglossia~ LaTeX package

See the docstring of ~org-latex-classes~ and
~org-latex-guess-polyglossia-language~ for details.

*** None-floating tables, graphics and blocks can have captions

*** `org-insert-heading' can be forced to insert top-level headline

** Removed functions

*** Removed function ~org-translate-time~

Use ~org-timestamp-translate~ instead.

*** Removed function ~org-beamer-insert-options-template~

This function inserted a Beamer specific template at point or in
current subtree.  Use ~org-export-insert-default-template~ instead, as
it provides more features and covers all export back-ends.  It is also
accessible from the export dispatcher.

*** Removed function ~org-timer-cancel-timer~

~org-timer-stop~ now stops both relative and countdown timers.

*** Removed function ~org-export-solidify-link-text~

This function, being non-bijective, introduced bug in internal
references.  Use ~org-export-get-reference~ instead.

*** Removed function ~org-end-of-meta-data-and-drawers~

The function is superseded by ~org-end-of-meta-data~, called with an
optional argument.

*** Removed functions ~org-table-colgroup-line-p~, ~org-table-cookie-line-p~

These functions were left-over from pre 8.0 era.  They are not correct
anymore.  Since they are not needed, they have no replacement.
** Removed options

*** ~org-list-empty-line-terminates-plain-lists~ is deprecated

It will be kept in code base until next release, for backward
compatibility.

If you need to separate consecutive lists with blank lines, always use
two of them, as if this option was nil (default value).

*** ~org-export-with-creator~ is a boolean

Special ~comment~ value is no longer allowed.  It is possible to use
a body filter to add comments about the creator at the end of the
document instead.

*** Removed option =org-babel-sh-command=

This undocumented option defaulted to the value of =shell-file-name=
at the time of loading =ob-shell=.  The new behaviour is to use the
value of =shell-file-name= directly when the shell langage is =shell=.
To chose a different shell, either customize =shell-file-name= or bind
this variable locally.

*** Removed option =org-babel-sh-var-quote-fmt=

This undocumented option was supposed to provide different quoting
styles when changing the shell type.  Changing the shell type can now
be done directly from the source block and the quoting style has to be
compatible across all shells, so a customization doesn't make sense
anymore.  The chosen hard coded quoting style conforms to POSIX.

*** Removed option ~org-insert-labeled-timestamps-at-point~

Setting this option to anything else that the default value (nil)
would create invalid planning info.  This dangerous option is now
removed.

*** Removed option ~org-koma-letter-use-title~

Use org-export-with-title instead.  See also below.

*** Removed option ~org-entities-ascii-explanatory~

This variable has no effect since Org 8.0.

*** Removed option ~org-table-error-on-row-ref-crossing-hline~

This variable has no effect since August 2009.

*** Removed MathML-related options from ~org-html-mathjax-options~

MathJax automatically chooses the best display technology based on the
end-users browser.  You may force initial usage of MathML via
~org-html-mathjax-template~ or by setting the ~path~ property of
~org-html-mathjax-options~.

*** Removed comment-related filters

~org-export-filter-comment-functions~ and
~org-export-filter-comment-block-functions~ variables do not exist
anymore.
** Miscellaneous

*** Strip all meta data from ITEM special property

ITEM special property does not contain TODO, priority or tags anymore.

*** File names in links accept are now compatible with URI syntax

Absolute file names can now start with =///= in addition to =/=. E.g.,
=[[file:///home/me/unicorn.jpg]]=.

*** Footnotes in included files are now local to the file

As a consequence, it is possible to include multiple Org files with
footnotes in a master document without being concerned about footnote
labels colliding.

*** Mailto links now use regular URI syntax

This change deprecates old Org syntax for mailto links:
=mailto:user@domain::Subject=.

*** =QUOTE= keywords do not exist anymore

=QUOTE= keywords have been deprecated since Org 8.2.

*** Select tests to perform with the build system

The build system has been enhanced to allow test selection with a
regular expression by defining =BTEST_RE= during the test invocation.
This is especially useful during bisection to find just when a
particular test failure was introduced.

*** Exact heading search for external links ignore spaces and cookies

Exact heading search for links now ignore spaces and cookies. This is
the case for links of the form ~file:projects.org::*task title~, as
well as links of the form ~file:projects.org::some words~
when ~org-link-search-must-match-exact-headline~ is not nil.

*** ~org-latex-hyperref-template~, ~org-latex-title-command~ formatting

New formatting keys are supported.  See the respective docstrings.
Note, ~org-latex-hyperref-template~ has a new default value.

*** ~float, wasysym, marvosym~ are removed from ~org-latex-default-packages-alist~

If you require any of these package add them to your preamble via
~org-latex-packages-alist~. Org also uses default LaTeX ~\tolerance~
now.

*** When exporting, throw an error on unresolved id/fuzzy links and code refs

This helps spotting wrong links. 

* Version 8.2

** Incompatible changes

*** =xdg-open= has been removed again from =org-file-apps-defaults-gnu=

    This did not work properly in some environments as xdg-open is
    desktop specific.

** Important bug fixes

*** Match string for sparse trees can now contain a slash in a property value

    You can now have searches like SOMEPROP="aaa/bbb".  Until now,
    this would break because the slash would be interpreted as the
    separator starting a TOTO match string.

** New features

*** Changes in the default packages loaded for LaTeX

    - =rotating= is now a default package, to support sideways tables.
    - =amsmath= is a default package
    - =eucal= package removed, no longer needed since amsmath is
      present

    Furthermore, the manual now specifically notes if an additional
    package is needed for one of the documented attributes.

*** Microsoft Outlook support has been added to /org-mac-link.el/

    Thanks to Marc McLean for this patch.

*** Lazy autoloading of /org-id.el/ to follow links

    When following a link that has an =id:= prefix, /org-id.el/ will
    now automatically be loaded.

    Thanks to Oleh for this patch

*** New functions for paragraph motion
    
    The commands =C-down= and =C-up= now invoke special commands
    that use knowledge from the org-elements parser to move the cursor
    in a paragraph-like way.

    Thanks to Nicolas Goaziou for the implementation.

*** New agenda fortnight view

    The agenda has now, in addition to day, week, month, and year
    views, also a fortnight view covering 14 days.

    Thanks to Michael Gauland for the implementation.

** New options

*** New option: [[doc:org-special-ctrl-o][org-special-ctrl-o]]

    This variable can be used to turn off the special behavior of
    =C-o= in tables.
    
* Version 8.1

** Incompatible changes

*** Combine org-mac-message.el and org-mac-link-grabber into org-mac-link.el

Please remove calls to =(require 'org-mac-message)= and =(require
'org-mac-link-grabber)= in your =.emacs= initialization file.  All you
need now is =(require 'org-mac-link)=.

Additionally, replace any calls to =ogml-grab-link= to
=org-mac-grab-link=.  For example, replace this line:

: (define-key org-mode-map (kbd "C-c g") 'omgl-grab-link)

with this:

: (define-key org-mode-map (kbd "C-c g") 'org-mac-grab-link)

*** HTML export: Replace =HTML_HTML5_FANCY= by =:html-html5-fancy= (...)

Some of the HTML specific export options in Org <8.1 are either nil or
t, like =#+HTML_INCLUDE_STYLE=.  We replaced these binary options with
option keywords like :html-include-style.

So you need to replace

: #+HTML_INCLUDE_STYLE: t

by 

: #+OPTIONS: :html-include-style t

Options affected by this change: =HTML5_FANCY=, =HTML_INCLUDE_SCRIPTS=
and =HTML_INCLUDE_STYLE=.

** Important bugfixes

*** [[doc:org-insert-heading][org-insert-heading]] has been rewritten and bugs are now fixed
*** The replacement of disputed keys is now turned of when reading a date

** New features

*** You can now use =xdg-open= to control how to open files
*** =C-c ^ x= will now sort checklist items by their checked status

See [[doc:org-sort-list][org-sort-list]]: hitting =C-c ^ x= will put checked items at the end
of the list.
*** Various LaTeX export enhancements

- Support SVG images
- Support for .pgf files
- LaTeX Babel blocks can now be exported as =.tikz= files
- Allow =latexmk= as an option for [[doc:org-latex-pdf-process][org-latex-pdf-process]]
- When using =\usepackage[AUTO]{inputenc}=, AUTO will automatically be
  replaced with a coding system derived from =buffer-file-coding-system=.
- The dependency on the =latexsym= LaTeX package has been removed, we
  now use =amssymb= symbols by default instead.

*** Remapping =forward-paragraph= and =backward-paragraph=

=forward-paragraph= and =backward-paragraph= are now remapped to
[[doc:org-forward-element][org-forward-element]] and [[doc:org-backward-element][org-backward-element]] respectively.
E.g. hitting =C-<down>= on a headline will move to the next headline.

*** New entities in =org-entities.el=
    
Add support for ell, imath, jmath, varphi, varpi, aleph, gimel, beth,
dalet, cdots, S (§), dag, ddag, colon, therefore, because, triangleq,
leq, geq, lessgtr, lesseqgtr, ll, lll, gg, ggg, prec, preceq,
preccurleyeq, succ, succeq, succurleyeq, setminus, nexist(s), mho,
check, frown, diamond.  Changes loz, vert, checkmark, smile and tilde.

** New options

*** New option [[doc:org-bookmark-names-plist][org-bookmark-names-plist]]

This allows to specify the names of automatic bookmarks.
*** New option [[doc:org-agenda-ignore-drawer-properties][org-agenda-ignore-drawer-properties]]

This allows more flexibility when optimizing the agenda generation.
See https://orgmode.org/worg/agenda-optimization.html for details.
*** New option: [[doc:org-html-link-use-abs-url][org-html-link-use-abs-url]] to force using absolute URLs

This is an export/publishing option, and should be used either within
the =#+OPTIONS= line(s) or within a [[doc:org-publish-project-alist][org-publish-project-alist]].

Setting this option to =t= is needed when the HTML output does not
allow relative URLs.  For example, the =contrib/lisp/ox-rss.el=
library produces a RSS feed, and RSS feeds need to use absolute URLs,
so a combination of =:html-link-home "..." and :html-link-use-abs-url
t= is required---see the configuration example in the comment section
of =ox-rss.el=.

*** New option [[doc:org-babel-ditaa-java-cmd][org-babel-ditaa-java-cmd]]

This makes java executable configurable for ditaa blocks.

*** New options [[doc:org-babel-latex-htlatex][org-babel-latex-htlatex]] and [[doc:org-babel-latex-htlatex-packages][org-babel-latex-htlatex-packages]]

This enables SVG generation from latex code blocks.

*** New option: [[doc:org-habit-show-done-alwyays-green][org-habit-show-done-alwyays-green]]

See [[http://lists.gnu.org/archive/html/emacs-orgmode/2013-05/msg00214.html][this message]] from Max Mikhanosha.

*** New option: [[doc:org-babel-inline-result-wrap][org-babel-inline-result-wrap]]

If you set this to the following

: (setq org-babel-inline-result-wrap "$%s$")

then inline code snippets will be wrapped into the formatting string.

** New contributed packages

- =ox-bibtex.el= by Nicolas Goaziou :: an utility to handle BibTeX
     export to both LaTeX and HTML exports.  It uses the [[http://www.lri.fr/~filliatr/bibtex2html/][bibtex2html]]
     software.

- =org-screenshot.el= by Max Mikhanosha :: an utility to handle
     screenshots easily from Org, using the external tool [[http://freecode.com/projects/scrot][scrot]].

* Version 8.0.3

** Installation

Installation instructions have been updated and simplified.

If you have troubles installing or updating Org, focus on these
instructions:

- when updating via a =.zip/.tar.gz= file, you only need to set the
  =load-path= in your =.emacs=.  Set it before any other Org
  customization that would call autoloaded Org functions.

- when updating by pulling Org's Git repository, make sure to create the
  correct autoloads.  You can do this by running =~$ make autoloads= (to
  only create the autoloads) or by running =~$ make= (to also compile
  the Emacs lisp files.)  =~$ make help= and =~$ make helpall= gives you
  detailed explanations.

- when updating through ELPA (either from GNU ELPA or from Org ELPA),
  you have to install Org's ELPA package in a session where no Org
  function has been called already.
  
When in doubt, run =M-x org-version RET= and see if you have a mixed-up
installation.

See https://orgmode.org/org.html#Installation for details.

** Incompatible changes

Org 8.0 is the most disruptive major version of Org.

If you configured export options, you will have to update some of them.

If you used =#+ATTR_*= keywords, the syntax of the attributes changed and
you will have to update them.

Below is a list of changes for which you need to take action.

See https://orgmode.org/worg/org-8.0.html for the most recent version of
this list and for detailed instructions on how to migrate.

**** New export engine

Org 8.0 comes with a new export engine written by Nicolas Goaziou.  This
export engine relies on ~org-element.el~ (Org's syntax parser), which was
already in Org's core.  This new export engine triggered the rewriting of
/all/ export back-ends.

The most visible change is the export dispatcher, accessible through the
keybinding =C-c C-e=.  By default, this menu only shows some of the
built-in export formats, but you can add more formats by loading them
directly (e.g., =(require 'ox-texinfo)= or by configuring the option
[[doc:org-export-backends][org-export-backends]].

More contributed back-ends are available from the =contrib/= directory, the
corresponding files start with the =ox-= prefix.

If you customized an export back-end (like HTML or LaTeX), you will need to
rename some options so that your customization is not lost.  Typically, an
option starting with =org-export-html-= is now named =org-html-=.  See the
manual for details and check [[https://orgmode.org/worg/org-8.0.html][this Worg page]] for directions.

**** New syntax for #+ATTR_HTML/LaTeX/... options

     : #+ATTR_HTML width="200px"

     should now be written

     : #+ATTR_HTML :width 200px

     Keywords like =#+ATTR_HTML= and =#+ATTR_LaTeX= are defined in their
     respective back-ends, and the list of supported parameters depends on
     each backend.  See Org's manual for details.

**** ~org-remember.el~ has been removed

     You cannot use =remember.el= anymore to capture notes.

     Support for remember templates has been obsoleted since long, it is
     now fully removed.

     Use =M-x org-capture-import-remember-templates RET= to import your
     remember templates into capture templates.

**** ~org-jsinfo.el~ has been merged into ~ox-html.el~

     If you were requiring ~ox-jsinfo.el~ in your ~.emacs.el~ file, you
     will have to remove this requirement from your initialization file.

**** Note for third-party developers

     The name of the files for export back-end have changed: we now use the
     prefix =ox-= for those files (like we use the =ob-= prefix for Babel
     files.)  For example ~org-html.el~ is now ~ox-html.el~.

     If your code relies on these files, please update the names in your
     code.

**** Packages moved from core to contrib

     Since packages in Org's core are meant to be part of GNU Emacs, we try
     to be minimalist when it comes to adding files into core.  For 8.0, we
     moved some contributions into the =contrib/= directory.

     The rationale for deciding that these files should live in =contrib/=
     is either because they rely on third-part softwares that are not
     included in Emacs, or because they are not targeting a significant
     user-base.

     - org-colview-xemacs.el
     - org-mac-message.el
     - org-mew.el
     - org-wl.el
     - ox-freedmind.el
     - ox-taskjuggler.el

     Note that ~ox-freedmind.el~ has been rewritten by Jambunathan,
     ~org-mew.el~ has been enhanced by Tokuya Kameshima and
     ~ox-taskjuggler.el~ by Nicolas Goaziou and others.

     Also, the Taskjuggler exporter now uses TJ3 by default.  John Hendy
     wrote [[https://orgmode.org/worg/org-tutorials/org-taskjuggler.html][a tutorial on Worg]] for the TJ3 export.

** New packages in core

*** ~ob-makefile.el~ by Eric Schulte and Thomas S. Dye

    =ob-makefile.el= implements Org Babel support for Makefile tangling.

*** ~ox-man.el~ by Luis Anaya

    =ox-man.el= allows you to export Org files to =man= pages.

*** ~ox-md.el~ by Nicolas Goaziou

    =ox-md.el= allows you to export Org files to Markdown files, using the
    vanilla [[http://daringfireball.net/projects/markdown/][Markdown syntax]].

*** ~ox-texinfo.el~ by Jonathan Leech-Pepin

    =ox-texinfo.el= allows you to export Org files to [[http://www.gnu.org/software/texinfo/][Texinfo]] files.

** New packages in contrib

*** ~ob-julia.el~ by G. Jay Kerns

    [[http://julialang.org/][Julia]] is a new programming language.

    =ob-julia.el= provides Org Babel support for evaluating Julia source
    code.

*** ~ob-mathomatic.el~ by Luis Anaya

    [[http://www.mathomatic.org/][mathomatic]] a portable, command-line, educational CAS and calculator
    software, written entirely in the C programming language.

    ~ob-mathomatic.el~ provides Org Babel support for evaluating mathomatic
    entries.

*** ~ob-tcl.el~ by Luis Anaya

    ~ob-tcl.el~ provides Org Babel support for evaluating [[http://www.tcl.tk/][Tcl]] source code.

*** ~org-bullets.el~ by Evgeni Sabof

    Display bullets instead of stars for headlines.

    Also see [[https://orgmode.org/worg/org-faq.html#sec-8-12][this updated FAQ]] on how to display another character than "*"
    for starting headlines.

*** ~ox-confluence.el~ by Sébastien Delafond

    ~ox-confluence.el~ lets you convert Org files to [[https://confluence.atlassian.com/display/DOC/Confluence%2BWiki%2BMarkup][Confluence Wiki]] files.

*** ~ox-deck.el~ and ~ox-s5.el~ by Rick Frankel

    [[http://imakewebthings.com/deck.js/][deck.js]] is a javascript library for displaying HTML ages as
    presentations.  ~ox-deck.el~ exports Org files to HTML presentations
    using =deck.js=.

    [[http://meyerweb.com/eric/tools/s5/][s5]] is a set of scripts which also allows to display HTML pages as
    presentations.  ~ox-s5.el~ exports Org files to HTML presentations
    using =s5=.

*** ~ox-groff.el~ by Luis Anaya and Nicolas Goaziou

    The [[http://www.gnu.org/software/groff/][groff]] (GNU troff) software is a typesetting package which reads
    plain text mixed with formatting commands and produces formatted
    output.

    Luis Anaya and Nicolas Goaziou implemented ~ox-groff.el~ to allow
    conversion from Org files to groff.

*** ~ox-koma-letter.el~ by Nicolas Goaziou and Alan Schmitt

    This back-end allow to export Org pages to the =KOMA Scrlttr2= format.

*** ~ox-rss.el~ by Bastien

    This back-end lets you export Org pages to RSS 2.0 feeds.  Combined
    with the HTML publishing feature, this allows you to build a blog
    entirely with Org.

** New features

*** Export

**** New export generic options

If you use Org exporter, we advise you to re-read [[https://orgmode.org/org.html#Exporting][the manual section about
it]].  It has been updated and includes new options.

Among the new/updated export options, three are of particular importance:

- [[doc:org-export-allow-bind-keywords][org-export-allow-bind-keywords]] :: This option replaces the old option
     =org-export-allow-BIND= and the default value is =nil=, not =confirm=.
     You will need to explicitly set this to =t= in your initialization
     file if you want to allow =#+BIND= keywords.

- [[doc:org-export-with-planning][org-export-with-planning]] :: This new option controls the export of
     =SCHEDULED:, DEADLINE:, CLOSED:= lines, and planning information is
     now skipped by default during export.  This use to be the job of
     [[doc:org-export-with-timestamps][org-export-with-timestamps]], but this latter option has been given a
     new role: it controls the export of /standalone time-stamps/.  When
     set to =nil=, Org will not export active and inactive time-stamps
     standing on a line by themselves or within a paragraph that only
     contains time-stamps.

To check if an option has been introduced or its default value changed in
Org 8.0, do =C-h v [option] RET= and check if the documentation says that
the variable has been introduced (or changed) in version 24.4 of Emacs.

**** Enhanced default stylesheet for the HTML exporter

See the new default value of [[doc:org-html-style-default][org-html-style-default]].

**** New tags, classes and ids for the HTML exporter

See the new default value of [[doc:org-html-divs][org-html-divs]].

**** Support for tikz pictures in LaTeX export
**** ~org-man.el~: New export function for "man" links
**** ~org-docview.el~: New export function for docview links
*** Structure editing

**** =C-u C-u M-RET= inserts a heading at the end of the parent subtree
**** Cycling to the =CONTENTS= view keeps inline tasks folded

[[doc:org-cycle-hook][org-cycle-hook]] as a new function [[doc:org-cycle-hide-inline-tasks][org-cycle-hide-inline-tasks]] which
prevents the display of inline tasks when showing the content of a subtree.

**** =C-c -= in a region makes a list item for each line

This is the opposite of the previous behavior, where =C-c -= on a region
would create one item for the whole region, and where =C-u C-c -= would
create an item for each line.  Now =C-c -= on the selected region creates
an item per line, and =C-u C-c -= creates a single item for the whole
region.

**** When transposing words, markup characters are now part of the words

In Emacs, you can transpose words with =M-t=.  Transposing =*these*
_words__= will preserve markup.

**** New command [[doc:org-set-property-and-value][org-set-property-and-value]] bound to =C-c C-x P=

This command allows you to quickly add both the property and its value.  It
is useful in buffers where there are many properties and where =C-c C-x p=
can slow down the flow of editing too much.

**** New commands [[doc:org-next-block][org-next-block]] and [[doc:org-previous-block][org-previous-block]]

These commands allow you to go to the previous block (=C-c M-b= or the
speedy key =B=) or to the next block (=C-c M-f= or the speedy key =F=.)

**** New commands [[doc:org-drag-line-forward][org-drag-line-forward]] and [[doc:org-drag-line-backward][org-drag-line-backward]]

These commands emulate the old behavior of =M-<down>= and =M-<up>= but are
now bound to =S-M-<down>= and =S-M-<up>= respectively, since =M-<down>= and
=M-<up>= now drag the whole element at point (a paragraph, a table, etc.)
forward and backward.

**** When a list item has a checkbox, inserting a new item uses a checkbox too
**** When sorting entries/items, only the description of links is considered

Now Org will sort this list

: - [[http://abc.org][B]]
: - [[http://def.org][A]]

like this:

: - [[http://def.org][A]]
: - [[http://abc.org][B]]

by comparing the descriptions, not the links.
Same when sorting headlines instead of list items.
**** New option =orgstruct-heading-prefix-regexp=

For example, setting this option to "^;;; " in Emacs lisp files and using
=orgstruct-mode= in those files will allow you to cycle through visibility
states as if lines starting with ";;; *..." where headlines.

In general, you want to set =orgstruct-heading-prefix-regexp= as a file
local variable.

**** New behavior of [[doc:org-clone-subtree-with-time-shift][org-clone-subtree-with-time-shift]]

The default is now to ask for a time-shift only when there is a time-stamp.
When called with a universal prefix argument =C-u=, it will not ask for a
time-shift even if there is a time-stamp.

**** New option [[doc:org-agenda-restriction-lock-highlight-subtree][org-agenda-restriction-lock-highlight-subtree]]

This defaults to =t= so that the whole subtree is highlighted when you
restrict the agenda view to it with =C-c C-x <= (or the speed command =<=).
The default setting helps ensuring that you are not adding tasks after the
restricted region.  If you find this highlighting too intrusive, set this
option to =nil=.
**** New option [[doc:org-closed-keep-when-no-todo][org-closed-keep-when-no-todo]]

When switching back from a =DONE= keyword to a =TODO= keyword, Org now
removes the =CLOSED= planning information, if any.  It also removes this
information when going back to a non-TODO state (e.g., with =C-c C-t SPC=).
If you want to keep the =CLOSED= planning information when removing the
TODO keyword, set [[doc:org-closed-keep-when-no-todo][org-closed-keep-when-no-todo]] to =t=.

**** New option [[doc:org-image-actual-width][org-image-actual-width]]

This option allows you to change the width of in-buffer displayed images.
The default is to use the actual width of the image, but you can use a
fixed value for all images, or fall back on an attribute like

: #+attr_html: :width 300px
*** Scheduled/deadline

**** Implement "delay" cookies for scheduled items

If you want to delay the display of a scheduled task in the agenda, you can
now use a delay cookie like this: =SCHEDULED: <2004-12-25 Sat -2d>=.  The
task is still scheduled on the 25th but will appear in your agenda starting
from two days later (i.e. from March 27th.)

Imagine for example that your co-workers are not done in due time and tell
you "we need two more days".  In that case, you may want to delay the
display of the task in your agenda by two days, but you still want the task
to appear as scheduled on March 25th.

In case the task contains a repeater, the delay is considered to affect all
occurrences; if you want the delay to only affect the first scheduled
occurrence of the task, use =--2d= instead.  See [[doc:org-scheduled-delay-days][org-scheduled-delay-days]]
and [[doc:org-agenda-skip-scheduled-delay-if-deadline][org-agenda-skip-scheduled-delay-if-deadline]] for details on how to
control this globally or per agenda.

**** Use =C-u C-u C-c C-s= will insert a delay cookie for scheduled tasks

See the previous section for why delay cookies may be useful.

**** Use =C-u C-u C-c C-d= will insert a warning delay for deadline tasks

=C-u C-u C-c C-d= now inserts a warning delay to deadlines.
*** Calendar, diary and appts

**** New variable [[doc:org-read-date-minibuffer-local-map][org-read-date-minibuffer-local-map]]

By default, this new local map uses "." to go to today's date, like in the
normal =M-x calendar RET=.  If you want to deactivate this and to reassign
the "@" key to =calendar-goto-today=, use this:

#+BEGIN_SRC emacs-lisp
  ;; Unbind "." in Org's calendar:
  (define-key org-read-date-minibuffer-local-map (kbd ".") nil)

  ;; Bind "@" to `calendar-goto-today':
  (define-key org-read-date-minibuffer-local-map
              (kbd "@")
              (lambda () (interactive) (org-eval-in-calendar '(calendar-goto-today))))
#+END_SRC

**** In Org's calendar, =!= displays diary entries of the date at point

This is useful when you want to check if you don't already have an
appointment when setting new ones with =C-c .= or =C-c s=.  =!= will
call =diary-view-entries= and display the diary in a separate buffer.

**** [[doc:org-diary][org-diary]]: only keep the descriptions of links

[[doc:org-diary][org-diary]] returns diary information from Org files, but it returns it
in a diary buffer, not in an Org mode buffer.  When links are displayed,
only show their description, not the full links.
*** Agenda

**** New agenda type =agenda*= and entry types =:scheduled* :deadline*=

When defining agenda custom commands, you can now use =agenda*=: this will
list entries that have both a date and a time.  This is useful when you
want to build a list of appointments.

You can also set [[doc:org-agenda-entry-types][org-agenda-entry-types]] either globally or locally in
each agenda custom command and use =:timestamp*= and/or =:deadline*= there.

Another place where this is useful is your =.diary= file:

: %%(org-diary :scheduled*) ~/org/rdv.org

This will list only entries from =~/org/rdv.org= that are scheduled with a
time value (i.e. appointments).

**** New agenda sorting strategies

[[doc:org-agenda-sorting-strategy][org-agenda-sorting-strategy]] allows these new sorting strategies:

| Strategy       | Explanations                             |
|----------------+------------------------------------------|
| timestamp-up   | Sort by any timestamp, early first       |
| timestamp-down | Sort by any timestamp, late first        |
| scheduled-up   | Sort by scheduled timestamp, early first |
| scheduled-down | Sort by scheduled timestamp, late first  |
| deadline-up    | Sort by deadline timestamp, early first  |
| deadline-down  | Sort by deadline timestamp, late first   |
| ts-up          | Sort by active timestamp, early first    |
| ts-down        | Sort by active timestamp, late first     |
| tsia-up        | Sort by inactive timestamp, early first  |
| tsia-down      | Sort by inactive timestamp, late first   |

**** New options to limit the number of agenda entries

You can now limit the number of entries in an agenda view.  This is
different from filters: filters only /hide/ the entries in the agenda,
while limits are set while generating the list of agenda entries.

These new options are available:

- [[doc:org-agenda-max-entries][org-agenda-max-entries]] :: limit by number of entries.
- [[doc:org-agenda-max-todos][org-agenda-max-todos]] :: limit by number of TODOs.
- [[doc:org-agenda-max-tags][org-agenda-max-tags]] :: limit by number of tagged entries.
- [[doc:org-agenda-max-effort][org-agenda-max-effort]] :: limit by effort (minutes).

For example, if you locally set [[doc:org-agenda-max-todos][org-agenda-max-todos]] to 3 in an agenda
view, the agenda will be limited to the first three todos.  Other entries
without a TODO keyword or beyond the third TODO headline will be ignored.

When setting a limit (e.g. about an effort's sum), the default behavior is
to exclude entries that cannot be checked against (e.g. entries that have
no effort property.)  To include other entries too, you can set the limit
to a negative number.  For example =(setq org-agenda-max-tags -3)= will not
show the fourth tagged headline (and beyond), but it will also show
non-tagged headlines.

**** =~= in agenda view sets temporary limits

You can hit =~= in the agenda to temporarily set limits: this will
regenerate the agenda as if the limits were set.  This is useful for
example when you want to only see a list of =N= tasks, or a list of tasks
that take only =N= minutes.

**** "=" in agenda view filters by regular expressions

You can now filter agenda entries by regular expressions using ~=~.  =C-u
== will filter entries out.  Regexp filters are cumulative.  You can set
[[doc:org-agenda-regexp-filter-preset][org-agenda-regexp-filter-preset]] to suit your needs in each agenda view.

**** =|= in agenda view resets all filters

Since it's common to combine tag filters, category filters, and now regexp
filters, there is a new command =|= to reset all filters at once.

**** Allow writing an agenda to an =.org= file

You can now write an agenda view to an =.org= file.  It copies the
headlines and their content (but not subheadings) into the new file.

This is useful when you want to quickly share an agenda containing the full
list of notes.

**** New commands to drag an agenda line forward (=M-<down>=) or backward (=M-<up>=)

It sometimes handy to move agenda lines around, just to quickly reorganize
your tasks, or maybe before saving the agenda to a file.  Now you can use
=M-<down>= and =M-<up>= to move the line forward or backward.

This does not persist after a refresh of the agenda, and this does not
change the =.org= files who contribute to the agenda.

**** Use =%b= for displaying "breadcrumbs" in the agenda view

[[doc:org-agenda-prefix-format][org-agenda-prefix-format]] now allows to use a =%b= formatter to tell Org
to display "breadcrumbs" in the agenda view.

This is useful when you want to display the task hierarchy in your agenda.

**** Use =%l= for displaying the headline's level in the agenda view

[[doc:org-agenda-prefix-format][org-agenda-prefix-format]] allows to use a =%l= formatter to tell Org to
display entries with additional spaces corresponding to their level in the
outline tree.

**** [[doc:org-agenda-write][org-agenda-write]] will ask before overwriting an existing file

=M-x org-agenda-write RET= (or =C-c C-w= from an agenda buffer) used to
overwrite preexisting file with the same name without confirmation.  It now
asks for a confirmation.

**** New commands =M-m= and =M-*= to toggle (all) mark(s) for bulk action

- [[doc:org-agenda-bulk-toggle][org-agenda-bulk-toggle]] :: this command is bound to =M-m= and toggles
     the mark of the entry at point.

- [[doc:org-agenda-bulk-toggle-all][org-agenda-bulk-toggle-all]] :: this command is bound to =M-*= and
     toggles all the marks in the current agenda.

**** New option [[doc:org-agenda-search-view-max-outline-level][org-agenda-search-view-max-outline-level]]

This option sets the maximum outline level to display in search view.
E.g. when this is set to 1, the search view will only show headlines of
level 1.

**** New option [[doc:org-agenda-todo-ignore-time-comparison-use-seconds][org-agenda-todo-ignore-time-comparison-use-seconds]]

This allows to compare times using seconds instead of days when honoring
options like =org-agenda-todo-ignore-*= in the agenda display.

**** New option [[doc:org-agenda-entry-text-leaders][org-agenda-entry-text-leaders]]

This allows you to get rid of the ">" character that gets added in front of
entries excerpts when hitting =E= in the agenda view.

**** New formatting string for past deadlines in [[doc:org-agenda-deadline-leaders][org-agenda-deadline-leaders]]

The default formatting for past deadlines is ="%2d d. ago: "=, which makes
it explicit that the deadline is in the past.  You can configure this via
[[doc:org-agenda-deadline-leaders][org-agenda-deadline-leaders]].  Note that the width of the formatting
string is important to keep the agenda alignment clean.

**** New allowed value =repeated-after-deadline= for [[doc:org-agenda-skip-scheduled-if-deadline-is-shown][org-agenda-skip-scheduled-if-deadline-is-shown]]

When [[doc:org-agenda-skip-scheduled-if-deadline-is-shown][org-agenda-skip-scheduled-if-deadline-is-shown]] is set to
=repeated-after-deadline=, the agenda will skip scheduled items if they are
repeated beyond the current dealine.

**** New option for [[doc:org-agenda-skip-deadline-prewarning-if-scheduled][org-agenda-skip-deadline-prewarning-if-scheduled]]

This variable may be set to nil, t, the symbol `pre-scheduled', or a number
which will then give the number of days before the actual deadline when the
prewarnings should resume.  The symbol `pre-scheduled' eliminates the
deadline prewarning only prior to the scheduled date.

Read the full docstring for details.

**** [[doc:org-class][org-class]] now supports holiday strings in the skip-weeks parameter

For example, this task will now be skipped only on new year's day:

    : * Task
    :   <%%(org-class 2012 1 1 2013 12 12 2 "New Year's Day")>
*** Capture

**** Allow =C-1= as a prefix for [[doc:org-agenda-capture][org-agenda-capture]] and [[doc:org-capture][org-capture]]

With a =C-1= prefix, the capture mechanism will use the =HH:MM= value at
point (if any) or the current =HH:MM= time as the default time for the
capture template.

**** Expand keywords within %(sexp) placeholder in capture templates

If you use a =%:keyword= construct within a =%(sexp)= construct, Org will
expand the keywords before expanding the =%(sexp)=.

**** Allow to contextualize capture (and agenda) commands by checking the name of the buffer

[[doc:org-capture-templates-contexts][org-capture-templates-contexts]] and [[doc:org-agenda-custom-commands-contexts][org-agenda-custom-commands-contexts]]
allow you to define what capture templates and what agenda commands should
be available in various contexts.  It is now possible for the context to
check against the name of the buffer.
*** Tag groups

Using =#+TAGS: { Tag1 : Tag2 Tag3 }= will define =Tag1= as a /group tag/
(note the colon after =Tag1=).  If you search for =Tag1=, it will return
headlines containing either =Tag1=, =Tag2= or =Tag3= (or any combination
of those tags.)

You can use group tags for sparse tree in an Org buffer, for creating
agenda views, and for filtering.

See https://orgmode.org/org.html#Tag-groups for details.

*** Links

**** =C-u C-u M-x org-store-link RET= will ignore non-core link functions

Org knows how to store links from Org buffers, from info files and from
other Emacs buffers.  Org can be taught how to store links from any buffer
through new link protocols (see [[https://orgmode.org/org.html#Adding-hyperlink-types]["Adding hyperlink types"]] in the manual.)

Sometimes you want Org to ignore added link protocols and store the link
as if the protocol was not known.

You can now do this with =C-u C-u M-x org-store-link RET=.

**** =C-u C-u C-u M-x org-store-link RET= on an active region will store links for each lines

Imagine for example that you want to store a link for every message in a
Gnus summary buffer.  In that case =C-x h C-u C-u C-u M-x org-store-link
RET= will store a link for every line (i.e. message) if the region is
active.

**** =C-c C-M-l= will add a default description for links which don't have one

=C-c C-M-l= inserts all stored links.  If a link does not have a
description, this command now adds a default one, so that we are not mixing
with-description and without-description links when inserting them.

**** No curly braces to bracket links within internal links

When storing a link to a headline like

: * See [[https://orgmode.org][Org website]]

[[doc:org-store-link][org-store-link]] used to convert the square brackets into curly brackets.
It does not anymore, taking the link description or the link path, when
there is no description.
*** Table

**** Switching between #+TBLFM lines

If you have several =#+TBLFM= lines below a table, =C-c C-c= on a line will
apply the formulas from this line, and =C-c C-c= on another line will apply
those other formulas.

**** You now use "nan" for empty fields in Calc formulas

If empty fields are of interest, it is recommended to reread the section
[[https://orgmode.org/org.html#Formula-syntax-for-Calc][3.5.2 Formula syntax for Calc]] of the manual because the description for the
mode strings has been clarified and new examples have been added towards
the end.

**** Handle localized time-stamps in formulas evaluation

If your =LOCALE= is set so that Org time-stamps use another language than
english, and if you make time computations in Org's table, it now works by
internally converting the time-stamps with a temporary =LOCALE=C= before
doing computation.

**** New lookup functions

There are now three lookup functions:

- [[doc:org-loopup-first][org-loopup-first]]
- [[doc:org-loopup-last][org-loopup-last]]
- [[doc:org-loopup-all][org-loopup-all]]

See [[https://orgmode.org/org.html#Lookup-functions][the manual]] for details.
*** Startup keywords

These new startup keywords are now available:

| Startup keyword                | Option                                    |
|--------------------------------+-------------------------------------------|
| =#+STARTUP: logdrawer=           | =(setq org-log-into-drawer t)=              |
| =#+STARTUP: nologdrawer=         | =(setq org-log-into-drawer nil)=            |
|--------------------------------+-------------------------------------------|
| =#+STARTUP: logstatesreversed=   | =(setq org-log-states-order-reversed t)=    |
| =#+STARTUP: nologstatesreversed= | =(setq org-log-states-order-reversed nil)=  |
|--------------------------------+-------------------------------------------|
| =#+STARTUP: latexpreview=        | =(setq org-startup-with-latex-preview t)=   |
| =#+STARTUP: nolatexpreview=      | =(setq org-startup-with-latex-preview nil)= |

*** Clocking

**** New option [[doc:org-clock-rounding-minutes][org-clock-rounding-minutes]]

E.g. if [[doc:org-clock-rounding-minutes][org-clock-rounding-minutes]] is set to 5, time is 14:47 and you
clock in: then the clock starts at 14:45.  If you clock out within the next
5 minutes, the clock line will be removed; if you clock out 8 minutes after
your clocked in, the clock out time will be 14:50.

**** New option [[doc:org-time-clocksum-use-effort-durations][org-time-clocksum-use-effort-durations]]

When non-nil, =C-c C-x C-d= uses effort durations.  E.g., by default, one
day is considered to be a 8 hours effort, so a task that has been clocked
for 16 hours will be displayed as during 2 days in the clock display or in
the clocktable.

See [[doc:org-effort-durations][org-effort-durations]] on how to set effort durations and
[[doc:org-time-clocksum-format][org-time-clocksum-format]] for more on time clock formats.

**** New option [[doc:org-clock-x11idle-program-name][org-clock-x11idle-program-name]]

This allows to set the name of the program which prints X11 idle time in
milliseconds.  The default is to use =x11idle=.

**** New option [[doc:org-use-last-clock-out-time-as-effective-time][org-use-last-clock-out-time-as-effective-time]]

When non-nil, use the last clock out time for [[doc:org-todo][org-todo]].  Note that this
option has precedence over the combined use of [[doc:org-use-effective-time][org-use-effective-time]] and
[[doc:org-extend-today-until][org-extend-today-until]].

**** =S-<left/right>= on a clocksum column will update the sum by updating the last clock
**** =C-u 3 C-S-<up/down>= will update clock timestamps synchronously by 3 units
**** New parameter =:wstart= for clocktables to define the week start day
**** New parameter =:mstart= to state the starting day of the month
**** Allow relative times in clocktable tstart and tend options
**** The clocktable summary is now a caption
**** =:tstart= and =:tend= and friends allow relative times like "<-1w>" or "<now>"
*** Babel

**** You can now use =C-c C-k= for [[doc:org-edit-src-abort][org-edit-src-abort]]

This allows you to quickly cancel editing a source block.

**** =C-u C-u M-x org-babel-tangle RET= tangles by the target file of the block at point

This is handy if you want to tangle all source code blocks that have the
same target than the block at point.

**** New options for auto-saving the base buffer or the source block editing buffer

When [[doc:org-edit-src-turn-on-auto-save][org-edit-src-turn-on-auto-save]] is set to =t=, editing a source block
in a new window will turn on =auto-save-mode= and save the code in a new
file under the same directory than the base Org file.

When [[doc:org-edit-src-auto-save-idle-delay][org-edit-src-auto-save-idle-delay]] is set to a number of minutes =N=,
the base Org buffer will be saved after this number of minutes of idle
time.

**** New =:post= header argument post-processes results

     This header argument may be used to pass the results of the current
     code block through another code block for post-processing.  See the
     manual for a usage example.

**** Commented out heading are ignored when collecting blocks for tangling

If you comment out a heading (with =C-c ;= anywhere on the heading or in
the subtree), code blocks from within this heading are now ignored when
collecting blocks for tangling.

**** New option [[doc:org-babel-hash-show-time][org-babel-hash-show-time]] to show a time-stamp in the result hash
**** Do not ask for confirmation if cached value is current

Do not run [[doc:org-babel-confirm-evaluate][org-babel-confirm-evaluate]] if source block has a cache and the
cache value is current as there is no evaluation involved in this case.
**** =ob-sql.el= and =ob-python.el= have been improved.
**** New Babel files only need to =(require 'ob)=

When writing a new Babel file, you now only need to use =(require 'ob)=
instead of requiring each Babel library one by one.
*** Faces

- Org now fontifies radio link targets by default
- In the agenda, use [[doc:org-todo-keyword-faces][org-todo-keyword-faces]] to highlight selected TODO keywords
- New face [[doc:org-priority][org-priority]], enhanced fontification of priority cookies in agenda
- New face [[doc:org-tag-group][org-tag-group]] for group tags

** Miscellaneous

- New speedy key =s= pour [[doc:org-narrow-to-subtree][org-narrow-to-subtree]]
- Handling of [[doc:org-html-table-row][org-html-table-row]] has been updated (incompatible change)
- [[doc:org-export-html-table-tag][org-export-html-table-tag]] is replaced by [[doc:org-html-table-default-attributes][org-html-table-default-attributes]]
- Support using =git-annex= with Org attachments
- org-protocol: Pass optional value using query in url to capture from protocol
- When the refile history is empty, use the current filename as default
- When you cannot change the TODO state of a task, Org displays the blocking task
- New option [[doc:org-mobile-allpriorities][org-mobile-allpriorities]]
- org-bibtex.el now use =visual-line-mode= instead of the deprecated =longlines-mode=
- [[doc:org-format-latex-options][org-format-latex-options]] allows to set the foreground/background colors automatically
- New option [[doc:org-archive-file-header-format][org-archive-file-header-format]]
- New "neg" entity in [[doc:org-entities][org-entities]]
- New function [[doc:org-docview-export][org-docview-export]] to export docview links
- New =:eps= header argument for ditaa code blocks
- New option [[doc:org-gnus-no-server][org-gnus-no-server]] to start Gnus with =gnus-no-server=
- Org is now distributed with =htmlize.el= version 1.43
- ~org-drill.el~ has been updated to version 2.3.7
- ~org-mac-iCal.el~ now supports MacOSX version up to 10.8
- Various improvements to ~org-contacts.el~ and =orgpan.el=

** Outside Org

*** Spanish translation of the Org guide by David Arroyo Menéndez

David (and others) translated the Org compact guide in Spanish:

You can read the [[https://orgmode.org/worg/orgguide/orgguide.es.pdf][PDF guide]].

*** ~poporg.el~ and ~outorg.el~

Two new libraries (~poporg.el~ by François Pinard and ~outorg.el~ by
Thorsten Jolitz) now enable editing of comment-sections from source-code
buffers in temporary Org-mode buffers, making the full editing power of
Org-mode available.  ~outorg.el~ comes together with ~outshine.el~ and
~navi-mode.el~, two more libraries by Thorsten Jolitz with the goal to give
source-code buffers the /look & feel/ of Org-mode buffers while greatly
improving navigation and structure editing.  A detailed description can be
found here: https://orgmode.org/worg/org-tutorials/org-outside-org.html

Here are two screencasts demonstrating Thorsten's tools:

- [[http://youtu.be/nqE6YxlY0rw]["Modern conventions for Emacs Lisp files"]]
- [[http://www.youtube.com/watch?v%3DII-xYw5VGFM][Exploring Bernt Hansen's Org-mode tutorial with 'navi-mode']]

*** MobileOrg for iOS

MobileOrg for iOS back in the App Store The 1.6.0 release was focused on
the new Dropbox API and minor bug fixes but also includes a new ability to
launch in Capture mode.  Track development and contribute [[https://github.com/MobileOrg/mobileorg/issues][on github]].

* Version 7.9.4

This is bug-fix release.

* Version 7.9.3

** No need to require =org-install= anymore

You don't need to require =org-install= anymore.  If you load Org from a
directory extracted from the =.tar.gz= or =.zip= sources, or if you are
using it from a git clone, setting the =load-paths= is enough.

If you want to make sure the correct autoloads are in place, you can do:

#+BEGIN_SRC emacs-lisp
(require 'org-loaddefs.el)
#+END_SRC

** New option [[doc::org-agenda-use-tag-inheritance][org-agenda-use-tag-inheritance]]

[[doc::org-use-tag-inheritance][org-use-tag-inheritance]] controls whether tags are inherited when
org-tags-view is called (either in =tags=, =tags-tree= or =tags-todo=
agenda views.)

When generating other agenda types such as =agenda=, =todo= and
=todo-tree=, tags inheritance is not used when selecting the entries
to display.  Still, you might want to have all tag information correct
in the agenda buffer, e.g. for tag filtering.  In that case, add the
agenda type to this variable.

Setting this variable to nil should considerably speeds up the agenda
generation.

Note that the default was to display inherited tags in the agenda
lines even if `org-use-tag-inheritance' was nil.  The default is now
to *never* display inherited tags in agenda lines, but to /know/ about
them when the agenda type is listed in [[doc::org-agenda-use-tag-inheritance][org-agenda-use-tag-inheritance]].

** New default value nil for [[doc::org-agenda-dim-blocked-tasks][org-agenda-dim-blocked-tasks]]

Using `nil' as the default value speeds up the agenda generation.  You
can hit `#' (or `C-u #') in agenda buffers to temporarily dim (or turn
invisible) blocked tasks.

** New speedy keys for [[doc::org-speed-commands-default][org-speed-commands-default]]

You can now use `:' (instead of `;') for setting tags---this is
consistent with using the `:' key in agenda view.

You can now use `=' for [[doc::org-columns][org-columns]].

** =org-float= is now obsolete, use =diary-float= instead
** No GPL manual anymore

There used to be a GPL version of the Org manual, but this is not the
case anymore, the Free Software Foundation does not permit this.

The GNU FDL license is now included in the manual directly.
    
** Enhanced compatibility with Emacs 22 and XEmacs

Thanks to Achim for his work on enhancing Org's compatibility with
various Emacsen.  Things may not be perfect, but Org should work okay
in most environments.

* Version 7.9.2

/This page describes changes against the 7.8[.x] versions of Org.  It
includes changes in previous 7.9[.x] releases./

** New committers who signed the FSF copyright assigment

Welcome and thanks to these new core contributors:

- Abdó Roig-Maranges
- Andrew Hyatt
- Andrzej Lichnerowicz
- Ethan Ligon
- Feng Shu
- George Kettleborough
- Henning Dietmar Weiss
- Ilya Shlyakhter
- Ivan Kanis
- Konrad Hinsen
- Madan Ramakrishnan
- Max Mikhanosha
- Moritz Ulrich
- Rick Frankel
- Toby Cubitt

** Online documentation for hooks, commands and options

You can read the documentation for hooks, commands (i.e. interactive
functions) and options (i.e. customizable variables) [[https://orgmode.org/worg/doc.html][online]].  Clicking on a
command/option in this ChangeLog will take you to the online documentation
for that command/option.

** New ELPA repository for Org packages

You can now add the Org ELPA repository like this:

#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC

It contains both the =org-*.tar= package (the core Org distribution, also
available through http://elpa.gnu.org) and the =org-plus*.tar= package (the
extended Org distribution, with non-GNU packages from the =contrib/=
directory.)

See https://orgmode.org/elpa/

** Overview of the new keybindings

| Keybinding    | Speedy | Command                     |
|---------------+--------+-----------------------------|
| =C-c C-x C-z=   |        | [[doc::org-clock-resolve][org-clock-resolve]]           |
| =C-c C-x C-q=   |        | [[doc::org-clock-cancel][org-clock-cancel]]            |
| =C-c C-x C-x=   |        | [[doc::org-clock-in-last][org-clock-in-last]]           |
| =M-h=           |        | [[doc::org-mark-element][org-mark-element]]            |
| =*=             |        | [[doc::org-agenda-bulk-mark-all][org-agenda-bulk-mark-all]]    |
| =C-c C-M-l=     |        | [[doc::org-insert-all-links][org-insert-all-links]]        |
| =C-c C-x C-M-v= |        | [[doc::org-redisplay-inline-images][org-redisplay-inline-images]] |
| =C-c C-x E=     | =E=      | [[doc::org-inc-effort][org-inc-effort]]              |
|               | =#=      | [[doc::org-toggle-comment][org-toggle-comment]]          |
|               | =:=      | [[doc::org-columns][org-columns]]                 |
|               | =W=      | Set =APPT_WARNTIME=           |
| =k=             |        | [[doc::org-agenda-capture][org-agenda-capture]]          |
| C-c ,         | ,      | [[doc::org-priority][org-priority]]                |

** New build system and new packages

*** New build system

Achim implemented a new build system.

The basic method for installing Org is the same:

1. Download or clone Org.
2. run `make install' from the Org directory.
3. Add (require 'org-install) in your .emacs.el.

But the build system is now more flexible and can be more easily
adapted to suit your needs.

See https://orgmode.org/worg/dev/org-build-system.html for details.

*** New packages in core

**** =org-eshell.el= by Konrad Hinsen is now in Org's core

=org-eshell.el= allows you to create links from [[http://www.gnu.org/software/emacs/manual/html_node/eshell/index.html][Eshell]].

*** New packages in contrib/

Note: The =EXPERIMENTAL/= directory has been deleted.  The files
have been moved to the =contrib/lisp/= directory.

**** =org-notify.el= by Peter Münster

From the comment section:

: Get notifications, when there is something to do.
: Sometimes, you need a reminder a few days before a deadline, e.g. to buy a
: present for a birthday, and then another notification one hour before to
: have enough time to choose the right clothes.
: For other events, e.g. rolling the dustbin to the roadside once per week,
: you probably need another kind of notification strategy.
: This package tries to satisfy the various needs.

**** =org-bibtex-extras.el= by Eric Schulte

From the comment section:

: This file add some extra functionality to your bibtex entries which
: are stored as Org-mode headlines using org-bibtex.el.  Most
: features expect that you keep all of your reading notes in a single
: file, set the `obe-bibtex-file' variable to the path to this file.

*** New exporters in contrib/

Nicolas export engine org-export.el lives in the =contrib/lisp/= directory.
To use it:

: Make sure contrib/lisp/ is in your load-path
: M-: (require 'org-export) RET
: M-: (require 'org-e-latex) RET ; or any other library
: M-x org-export-dispatch RET

These are the currently available exporters:

- =org-e-ascii.el= by Nicolas
- =org-e-beamer.el= by Nicolas
- =org-e-groff.el= by Luis Anaya
- =org-e-html.el= by Jambunathan
- =org-e-latex.el= by Nicolas
- =org-e-man.el= by Luis Anaya
- =org-e-odt.el= by Jambunathan
- =org-e-texinfo.el= by Jonathan Leech-Pepin
- =org-md.el= by Nicolas 

If we have enough testers, the new export engine is very likely to replace
the current one for the next major release.  Please report any problem on
the mailing list!

If you want to write a new export backend based on this export engine,
please check the [[https://orgmode.org/worg/dev/org-export-reference.html][online documentation]].

*** New Babel languages

**** Support for execution of Scala code blocks (see lisp/ob-scala.el)
**** Support for execution of IO code blocks (see lisp/ob-io.el)

** Incompatible changes

   - If your code relies on =org-write-agenda=, please use
     [[doc::org-agenda-write][org-agenda-write]] from now on.

   - If your code relies on =org-make-link=, please use =concat=
     instead.

   - =org-link-to-org-use-id= has been renamed to
     =org-id-link-to-org-use-id= and its default value is nil.  The
     previous default was =create-if-interactive-and-no-custom-id=.

** New features and user-visible changes

*** Org Element

org-element.el is a toolbox for parsing and analysing "elements" in an
Org-mode buffer.  This has been written by Nicolas Goaziou and has been
tested for quite some time.  It is now part of Org's core and many core
functions rely on this package.

Two functions might be particularily handy for users: =org-element-at-point=
and =org-element-context=.  See the docstrings for more details.

Below is a list of editing and navigating commands that now rely on
org-element.el.

**** [[doc::org-fill-paragraph][org-fill-paragraph]] has been completely rewritten

The filling mechanisms now rely on org-element, trying to do the right
thing on each element in various contexts.  E.g. filling in a list item
will preserve indentation; filling in message-mode will fall back on the
relevant filling functions; etc.

**** [[doc::org-metaup][org-metaup]] and [[doc::org-metadown][org-metadown]] will drag the element backward/forward

If you want to get the old behavior (i.e. moving a line up and down), you
can first select the line as an active region, then =org-metaup/down= to
move the region backward/forward.  This also works with regions bigger than
just one line.

**** [[doc::org-up-element][org-up-element]] and [[doc::org-down-element][org-down-element]] (respectively =C-c C-^= and =C-c C-_=)

This will move the point up/down in the hierarchy of elements.

**** [[doc::org-backward-element][org-backward-element]] and [[doc::org-forward-element][org-forward-element]] (respectively =M-{= and =M-}=)

This will move the point backward/forward in the hierarchy of elements.

**** [[doc::org-narrow-to-element][org-narrow-to-element]] will narrow to the element at point
**** [[doc::org-mark-element][org-mark-element]] will mark the element at point

This command is bound to =M-h= and will mark the element at point.  If the
point is at a paragraph, it will mark the paragraph.  If the point is at a
list item, it will mark the list item.  Etc.

Note that if point is at the beginning of a list, it will mark the whole
list.

To mark a subtree, you can either use =M-h= on the headline (since there is
no ambiguity about the element you're at) or [[doc::org-mark-subtree][org-mark-subtree]] (=C-c @=)
anywhere in the subtree.

Invoking [[doc::org-mark-element][org-mark-element]] repeatedly will try to mark the next element on
top of the previous one(s).  E.g. hitting =M-h= twice on a headline will
mark the current subtree and the next one on the same level.

*** Org Agenda

**** New option [[doc::org-agenda-sticky][org-agenda-sticky]]

There is a new option =org-agenda-sticky= which enables "sticky"
agendas.  Sticky agendas remain opened in the background so that you
don't need to regenerate them each time you hit the corresponding
keystroke.  This is a big time saver.

When [[doc::org-agenda-sticky][org-agenda-sticky]] is =non-nil=, the agenda buffer will be named
using the agenda key and its description.  In sticky agendas, the =q=
key will just bury the agenda buffers and further agenda commands will
show existing buffer instead of generating new ones.  

If [[doc::org-agenda-sticky][org-agenda-sticky]] is set to =nil=, =q= will kill the single agenda
buffer.

**** New option [[doc::org-agenda-custom-commands-contexts][org-agenda-custom-commands-contexts]]

Setting this option allows you to define specific context where
agenda commands should be available from.  For example, when set
to this value

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands-contexts
        '(("p" (in-file . "\\.txt"))))
#+END_SRC

then the =p= agenda command will only be available from buffers
visiting *.txt files.  See the docstring and the manual for more
details on how to use this.

**** Changes in bulk actions

The set of commands starting with =k ...= as been deleted and the
features have been merged into the "bulk action" feature.

After you marked some entries in the agenda, if you call =B s=, the
agenda entries will be rescheduled using the date at point if on a
date header.  If you are on an entry with a timestamp, you will be
prompted for a date to reschedule your marked entries to, using the
timestamp at point as the default prompt.

You can now use =k= to capture the marked entry and use the date at
point as an overriding date for the capture template.

To bind this behavior to =M-x org-capture RET= (or its keybinding),
set the new option [[doc::org-capture-use-agenda-date][org-capture-use-agenda-date]] to =t=.

**** =N= and =P= in the agenda will move to the next/previous item

**** New command [[doc::org-agenda-bulk-mark-all][org-agenda-bulk-mark-all]] to mark all items

This new command is bound to =*= in agenda mode.

There is also a new option [[doc::org-agenda-bulk-mark-char][org-agenda-bulk-mark-char]] to set the character
to use as a mark for bulk actions.

**** New option [[doc::org-agenda-persistent-marks][org-agenda-persistent-marks]]

When set to =non-nil=, marks will remain visible after a bulk action.  You
can temporarily toggle this by pressing =p= when invoking
[[doc::org-agenda-bulk-action][org-agenda-bulk-action]].

**** New option [[doc::org-agenda-skip-timestamp-if-deadline-is-shown][org-agenda-skip-timestamp-if-deadline-is-shown]]

=Non-nil= means skip timestamp line if same entry shows because of
deadline.

In the agenda of today, an entry can show up multiple times because it has
both a plain timestamp and has a nearby deadline.  When this variable is t,
then only the deadline is shown and the fact that the entry has a timestamp
for or including today is not shown.  When this variable is =nil=, the
entry will be shown several times.

**** New =todo-unblocked= and =nottodo-unblocked= skip conditions

See the [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=f426dadef0c410b5abded3dd9d6bf1123385f0c8][git commit]] for more explanations.

**** Allow category filtering in the agenda

You can now filter the agenda by category.  Pressing "<" will filter by
the category of the item on the current line, and pressing "<" again will
remove the filter.  You can combine tag filters and category filters.

You can use =org-agenda-category-filter= in your custom agenda views and
=org-agenda-category-filter-preset= in your main configuration.

See also the new command [[doc::org-agenda-filter-by-top-category][org-agenda-filter-by-top-category]]: hitting `^'
will filter by "Top" category: only show entries that are of the same
category than the Top category of the entry at point.
*** Org Links

**** Inserting links

When inserting links through [[doc::org-insert-link][org-insert-link]], the description is now
displayed first, followed by the literal link, as the description is often
more useful when you look for the link you want to insert.

Completion now complete both literal links and description.  If you
complete a description, the literal link and its description will be
inserted directly, whereas when you complete the literal link, you will be
prompted for a description (as with Org 7.8.)

In the completion buffer, links to the current buffer are now highlighted.

**** New templates =%h= and =%(sexp)= for abbreviated links

On top of =%s= template, which is replaced by the link tag in abbreviated
links, you can now use =%h= (which does the same than =%s= but does not
hexify the tag) and =%(sexp)= (which can run a function that takes the tag
as its own argument.)

**** New link type =help=

You can now create links from =help= buffers.

For example, if you request help for the command [[doc::org-agenda][org-agenda]] with =C-h f
org-agenda RET=, creating a link from this buffer will let you go back to
the same buffer.

**** New command [[doc::org-insert-all-links][org-insert-all-links]]

This will insert all links as list items.  With a universal prefix
argument, links will not be deleted from =org-stored-links=.

This new command is bound to =C-c C-M-l=.

**** New option [[doc::org-url-hexify-p][org-url-hexify-p]]

When set to =nil=, the =URL= part of a link will not be hexified.

**** Org can now open multiple shell links


**** New option [[doc::org-doi-server-url][org-doi-server-url]] to specify an alternate DOI server

**** RET now follows time stamps links
*** Org Editing

**** [[doc::org-todo][org-todo]] and =org-archive-*= can now loop in the active region

When [[doc::org-loop-over-headlines-in-active-region][org-loop-over-headlines-in-active-region]] is =non-nil=, using [[doc::org-todo][org-todo]]
or =org-archive-*= commands in the active region will loop over headlines.
This is handy if you want to set the TODO keyword for several items, or
archive them quickly.
**** You can now set tags for headlines in a region

If [[doc::org-loop-over-headlines-in-active-region][org-loop-over-headlines-in-active-region]] is =non-nil=, then selecting
the region and hitting =C-c C-q= will set the tags for all headlines in the
region.

**** New command [[doc::org-insert-drawer][org-insert-drawer]] to insert a drawer interactively
**** Comments start with "^[ \t]*# " anywhere on a line

Note that the space after the hashtag is mandatory.  Comments with "^#+"
are not supported anymore.

**** New speed key =#= to toggle the COMMENT cookie on a headline
**** =indent-region-function= is now set to [[doc::org-indent-region][org-indent-region]]

=C-M-\= should now produce useful results.

You can unindent the buffer with [[doc::org-unindent-buffer][org-unindent-buffer]].

**** New option [[doc::org-allow-promoting-top-level-subtree][org-allow-promoting-top-level-subtree]]

When =non-nil=, =S-M-<left>= will promote level-1 subtrees containing other
subtrees.  The level-1 headline will be commented out.  You can revert to
the previous state with =M-x undo RET=.

*** Org Clock
    
**** New keybinding =C-c C-x C-z= for [[doc::org-clock-resolve][org-clock-resolve]]
**** New keybinding =C-c C-x C-q= for [[doc::org-clock-cancel][org-clock-cancel]]
**** New command [[doc::org-clock-in-last][org-clock-in-last]] to clock in the last clocked item

This command is bound to =C-c C-x C-x= and will clock in the last clocked
entry, if any.

**** =C-u M-x= [[doc::org-clock-out][org-clock-out]] =RET= now prompts for a state to switch to
**** =S-M-<up/down>= on a clock timestamps adjusts the previous/next clock
**** New option [[doc::org-clock-continuously][org-clock-continuously]]

When set to =nil=, clocking in a task will first try to find the last
clocked out task and restart from when that task was clocked out.

You can temporarily activate continuous clocking with =C-u C-u
C-u M-x= [[doc::org-clock-in][org-clock-in]] =RET= (three universal prefix arguments) and
=C-u C-u M-x= [[doc::org-clock-in-last][org-clock-in-last]] =RET= (two universal prefix
arguments).

**** New option [[doc::org-clock-frame-title-format][org-clock-frame-title-format]]

This option sets the value of =frame-title-format= when clocking in.

**** New options for controlling the clockreport display

[[doc::org-clock-file-time-cell-format][org-clock-file-time-cell-format]]: Format string for the file time cells in
clockreport.

[[doc::org-clock-total-time-cell-format][org-clock-total-time-cell-format]]: Format string for the total time cells
in clockreport.

**** New options for controlling the clock/timer display

[[doc::org-clock-clocked-in-display][org-clock-clocked-in-display]]: control whether the current clock is
displayed in the mode line and/or frame title.

[[doc::org-timer-display][org-timer-display]]: control whether the current timer is displayed in the
mode line and/or frame title.

This allows the clock and timer to be displayed in the frame title instead
of, or as well as, the mode line.  This is useful for people with limited
space in the mode line but with ample space in the frame title.

*** Org Appearance

**** New option [[doc::org-custom-properties][org-custom-properties]]

The visibility of properties listed in this options can be turn on/off with
[[doc::org-toggle-custom-properties-visibility][org-toggle-custom-properties-visibility]].  This might be useful for
properties used by third-part tools or that you don't want to see
temporarily.

**** New command [[doc::org-redisplay-inline-images][org-redisplay-inline-images]]

This will redisplay all images.  It is bound to =C-c C-x C-M-v=.

**** New entities in =org-entities.el=

There are these new entities:

:     ("tilde" "\\~{}" nil "&tilde;" "~" "~" "~")
:     ("slash" "/" nil "/" "/" "/" "/")
:     ("plus" "+" nil "+" "+" "+" "+")
:     ("under" "\\_" nil "_" "_" "_" "_")
:     ("equal" "=" nil "=" "=" "=" "=")
:     ("asciicirc" "\\textasciicircum{}" nil "^" "^" "^" "^")

**** New face =org-list-dt= for definition terms
**** New face =org-date-selected= for the selected calendar day
**** New face value for =org-document-title=

The face is back to a normal height.

*** Org Columns

**** New speed command =:= to activate the column view
**** New special property =CLOCKSUM_T= to display today's clocked time

You can use =CLOCKSUM_T= the same way you use =CLOCKSUM=.  It will display
the time spent on tasks for today only.

**** Use the =:COLUMNS:= property in columnview dynamic blocks

If the =:COLUMNS:= is set in a subtree, the columnview dynamic block will
use its value as the column format.

**** Consider inline tasks when computing a sum

*** Org Dates and Time Stamps

**** Enhanced [[doc::org-sparse-tree][org-sparse-tree]]

=C-c /= can now check for time ranges.

When checking for dates with =C-c /= it is useful to change the type of
dates that you are interested in.  You can now do this interactively with
=c= after =C-c /= and/or by setting [[doc::org-sparse-tree-default-date-type][org-sparse-tree-default-date-type]] to
the default value you want.

**** Support for hourly repeat cookies

You can now use

: SCHEDULED: <2012-08-20 lun. 08:00 +1h>

if you want to add an hourly repeater to an entry.

**** =C-u C-u C-c .= inserts a time-stamp with no prompt
**** When (setq [[doc::org-read-date-prefer-future][org-read-date-prefer-future]] 'time), accept days in the prompt

"8am Wed" and "Wed 8am" are now acceptable values when entering a date from
the prompt.  If [[doc::org-read-date-prefer-future][org-read-date-prefer-future]] is set to =time=, this will
produce the expected prompt indication.

**** New option [[doc::org-datetree-add-timestamp][org-datetree-add-timestamp]]

When set to =non-nil=, datetree entries will also have a timestamp.  This
is useful if you want to see these entries in a sparse tree with =C-c /=.

*** Org Capture

**** New command [[doc::org-capture-string][org-capture-string]]

M-x [[doc::org-capture-string][org-capture-string]] RET will prompt for a string and a capture template.
The string will be used as an annotation for the template.  This is useful
when capturing in batch mode as it lets you define the content of the
template without being in Emacs.

**** New option [[doc::org-capture-templates-contexts][org-capture-templates-contexts]]

Setting this option allows you to define specific context where
capture templates should be available from.  For example, when
set to this value

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates-contexts
        '(("c" (in-mode . "message-mode"))))
#+END_SRC

then the =c= capture template will only be available from
=message-mode= buffers.  See the docstring and the manual for
more details on how to use this.

**** New =%l= template to insert the literal link
**** New option [[doc::org-capture-bookmark][org-capture-bookmark]]

Org used to automatically add a bookmark with capture a note.  You can now
turn this on by setting [[doc::org-capture-bookmark][org-capture-bookmark]] to =nil=.

**** Expand =%<num>= escape sequences into text entered for <num>'th =%^{PROMPT}= escape

See the manual for more explanations.

**** More control over empty lines

You can use =:empty-lines-before= and =:empty-lines-after= to control the
insertion of empty lines.  Check the manual for more explanations.

**** New hook [[doc::org-capture-prepare-finalize-hook][org-capture-prepare-finalize-hook]]

This new hook runs before the finalization process starts.

*** Org Export

**** New functions =orgtbl-to-table.el= and =orgtbl-to-unicode=

=orgtbl-to-table.el= convert the table to a =table.el= table, and
=orgtbl-to-unicode= will use =ascii-art-to-unicode.el= (when
available) to print beautiful tables.

**** [[doc::org-table-export][org-table-export]] now a bit clever about the target format

When you specify a file name like =table.csv=, [[doc::org-table-export][org-table-export]] will now
suggest =orgtbl-to-csv= the default method for exporting the table.

**** New option [[doc::org-export-date-timestamp-format][org-export-date-timestamp-format]]

The option allows to set a time string format for Org timestamps
in the #+DATE option.
**** LaTeX: New options for exporting table rules :tstart, :hline and :tend

See [[doc::org-export-latex-tables-hline][org-export-latex-tables-hline]] and [[doc::org-export-latex-tables-tend][org-export-latex-tables-tend]].

**** LaTeX: You can now set =:hfmt= from =#+ATTR_LaTeX=
**** Beamer: Add support and keybinding for the =exampleblock= environment

Add support for these languages in [[doc::org-export-language-setup][org-export-language-setup]].  More
languages are always welcome.

**** Beamer: New option [[doc::org-beamer-inherited-properties][org-beamer-inherited-properties]]

This option allows Beamer export to inherit some properties.
Thanks to Carsten for implementing this.

**** ODT: Add support for ODT export in org-bbdb.el
**** ODT: Add support for indented tables (see [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=e9fd334eb4ce4253875d84c34cb9ab750794fda5][this commit]] for details)
**** ODT: Improve the conversion from ODT to other formats
**** ASCII: Swap the level-1/level-2 characters to underline the headlines
**** Support for Chinese, simplified Chinese, Russian, Ukrainian and Japanese
**** HTML: New option [[doc::org-export-html-date-format-string][org-export-html-date-format-string]]

Format string to format the date and time in HTML export.
Thanks to Sébastien Vauban for this patch.

*** Org Babel

**** New =:results drawer= parameter

=:results drawer= replaces =:results wrap=, which is deprecated but still
supported.

**** =:results org= now put results in a =#+BEGIN_SRC org= block

=:results org= used to put results in a =#+BEGIN_ORG= block but it now puts
results in a =#+BEGIN_SRC org= block, wich comma-escaped lines.

=#+BEGIN_ORG= blocks are obsolete.

**** Exporting =#+BEGIN_SRC org= blocks exports the code

It used to exports the results of the code.

*** Miscellaneous

**** New menu entry for [[doc::org-refile][org-refile]]
**** Allow capturing to encrypted entries

If you capture to an encrypted entry, it will be decrpyted before
inserting the template then re-encrypted after finalizing the capture.

**** Inactive timestamps are now handled in tables

Calc can do computation on active time-stamps like <2012-09-29 sat.>.
Inactive time-stamps in a table's cell are now internally deactivated so
that Calc formulas can operate on them.

**** [[doc::org-table-number-regexp][org-table-number-regexp]] accept comma as a decimal mark to represent numbers
**** Org allows a new property =APPT_WARNTIME=

You can set it with the =W= speedy key or set it manually.  When set,
exporting to iCalendar and [[doc::org-agenda-to-appt][org-agenda-to-appt]] will use the value of this
property as the number of minutes for the warning alarm.

**** New command [[doc::org-inc-effort][org-inc-effort]]

This will increment the effort value.

It is bound to =C-c C-x E= and to =E= as a speedy command.

**** Attach: Add support for creating symbolic links

`org-attach-method' now supports a new method =lns=, allowing to attach
symbolic links.
**** Archive: you can now archive to a datetree

**** New option [[doc::org-inlinetask-show-first-star][org-inlinetask-show-first-star]]

=Non-nil= means display the first star of an inline task as
additional marker.  When =nil=, the first star is not shown.

**** New option [[doc::org-latex-preview-ltxpng-directory][org-latex-preview-ltxpng-directory]]

This lets you define the path for the =ltxpng/= directory.

**** You can now use imagemagick instead of dvipng to preview LaTeX fragments
**** You can now turn off [[doc::orgstruct++-mode][orgstruct++-mode]] safely
**** =C-u C-c C-c= on list items to add check boxes

=C-u C-c C-c= will add an empty check box on a list item.

When hit from the top of the list, it will add check boxes for all top
level list items.

**** =org-list-ending-method= and =org-list-end-regexp= are now obsolete

Fall back on using =org-list-end-re= only, which see.

**** org-feed.el now expands =%(sexp)= templates
**** New option [[doc::org-protocol-data-separator][org-protocol-data-separator]]

**** New option [[doc::org-ditaa-jar-option][org-ditaa-jar-option]] to specify the ditaa jar file

**** New possible value for [[doc::org-loop-over-headlines-in-active-region][org-loop-over-headlines-in-active-region]]

When [[doc::org-loop-over-headlines-in-active-region][org-loop-over-headlines-in-active-region]] is set to
=start-level=, the command will loop over the active region but
will only act upon entries that are of the same level than the
first headline in the region.

**** New option [[doc::org-habit-show-all-today][org-habit-show-all-today]]

When set to =t=, show all (even unscheduled) habits on today's agenda.

** Important bug fixes

*** M-TAB on options keywords perform completion correctly again

If you hit =M-TAB= on keywords like =#+TITLE=, Org will try to
perform completion with meaningful values.

*** Add licenses to javascript embedded and external code snippets

Embedded javascript code produced when exporting an Org file to HTML is now
licensed under GPLv3 (or later), and the copyright is owned by the Free
Software Foundation, Inc.

The javascript code for embedding MathJax in the browser mentions the
MathJax copyright and the Apache 2.0 license.

The javascript code for embedding =org-injo.js= in the browser mentions the
copyright of Sebastian Rose and the GPLv3 (or later) license.

=org-export-html-scripts= is now a variable, so that you can
adapt the code and the license to your needs.

See http://www.gnu.org/philosophy/javascript-trap.html for
explanations on why these changes were necessary.
* Version 7.8.11

** Incompatible changes

*** Emacs 21 support has been dropped

    Do not use Org mode 7.xx with Emacs 21, use [[https://orgmode.org/org-6.36c.zip][version 6.36c]] instead.

*** XEmacs support requires the XEmacs development version

    To use Org mode 7.xx with XEmacs, you need to run the developer
    version of XEmacs.  We were about to drop XEmacs support entirely,
    but Michael Sperber stepped in and made changes to XEmacs that
    made it easier to keep the support.  Thanks to Michael for this
    last-minute save.

*** New keys for TODO sparse trees

    The key =C-c C-v= is now reserved for Org Babel action.  TODO
    sparse trees can still be made with =C-c / t= (all not-done
    states) and =C-c / T= (specific states).

*** The Agenda =org-agenda-ndays= is now obsolete

    The variable =org-agenda-ndays= is obsolete - please use
    =org-agenda-span= instead.

    Thanks to Julien Danjou for this.

*** Changes to the intended use of =org-export-latex-classes=

    So far this variable has been used to specify the complete header
    of the LaTeX document, including all the =\usepackage= calls
    necessary for the document.  This setup makes it difficult to
    maintain the list of packages that Org itself would like to call,
    for example for the special symbol support it needs.

    First of all, you can *opt out of this change* in the following
    way: You can say: /I want to have full control over headers, and I
    will take responsibility to include the packages Org needs/.  If
    that is what you want, add this to your configuration and skip the
    rest of this section (except maybe for the description of the
    =[EXTRA]= place holder):

    #+begin_src emacs-lisp
   (setq org-export-latex-default-packages-alist nil
         org-export-latex-packages-alist nil)
    #+end_src

    /Continue to read here if you want to go along with the modified
    setup./

    There are now two variables that should be used to list the LaTeX
    packages that need to be included in all classes.  The header
    definition in =org-export-latex-classes= should then not contain
    the corresponding =\usepackage= calls (see below).

    The two new variables are:

    1. =org-export-latex-default-packages-alist= :: This is the
         variable where Org-mode itself puts the packages it needs.
         Normally you should not change this variable.  The only
         reason to change it anyway is when one of these packages
         causes a conflict with another package you want to use.  Then
         you can remove that packages and hope that you are not using
         Org-mode functionality that needs it.

    2. =org-export-latex-packages-alist= :: This is the variable where
         you can put the packages that you'd like to use across all
         classes.

    The sequence how these customizations will show up in the LaTeX
    document are:

    1. Header from =org-export-latex-classes=
    2. =org-export-latex-default-packages-alist=
    3. =org-export-latex-packages-alist=
    4. Buffer-specific things set with =#+LaTeX_HEADER:=

    If you want more control about which segment is placed where, or
    if you want, for a specific class, have full control over the
    header and exclude some of the automatic building blocks, you can
    put the following macro-like place holders into the header:

    #+begin_example
    [DEFAULT-PACKAGES]      \usepackage statements for default packages
    [NO-DEFAULT-PACKAGES]   do not include any of the default packages
    [PACKAGES]              \usepackage statements for packages
    [NO-PACKAGES]           do not include the packages
    [EXTRA]                 the stuff from #+LaTeX_HEADER
    [NO-EXTRA]              do not include #+LaTeX_HEADER stuff
    #+end_example

    If you have currently customized =org-export-latex-classes=, you
    should revise that customization and remove any package calls that
    are covered by =org-export-latex-default-packages-alist=.  This
    applies to the following packages:

    - inputenc
    - fontenc
    - fixltx2e
    - graphicx
    - longtable
    - float
    - wrapfig
    - soul
    - t1enc
    - textcomp
    - marvosym
    - wasysym
    - latexsym
    - amssymb
    - hyperref

    If one of these packages creates a conflict with another package
    you are using, you can remove it from
    =org-export-latex-default-packages-alist=.  But then you risk that
    some of the advertised export features of Org will not work
    properly.

    You can also consider moving packages that you use in all classes
    to =org-export-latex-packages-alist=.  If necessary, put the place
    holders so that the packages get loaded in the right sequence.  As
    said above, for backward compatibility, if you omit the place
    holders, all the variables will dump their content at the end of
    the header.

*** The constant =org-html-entities= is obsolete

    Its content is now part of the new constant =org-entities=, which
    is defined in the file org-entities.el.  =org-html-entities= was
    an internal variable, but it is possible that some users did write
    code using it.

*** =org-bbdb-anniversary-format-alist= has changed

    Please check the docstring and update your settings accordingly.

*** Deleted =org-mode-p=

    This function has been deleted: please update your code.

** Important new features

*** New Org to ODT exporter

    Jambunathan's Org to ODT exporter is now part of Org.

    To use it, it `C-c C-e o' in an Org file.  See the documentation
    for more information on how to customize it.

*** org-capture.el is now the default capture system

    This replaces the earlier system org-remember.  The manual only
    describes org-capture, but for people who prefer to continue to
    use org-remember, we keep a static copy of the former manual
    section [[https://orgmode.org/org-remember.pdf][chapter about remember]].

    The new system has a technically cleaner implementation and more
    possibilities for capturing different types of data.  See
    [[https://list.orgmode.org/C46F10DC-DE51-43D4-AFFE-F71E440D1E1F@gmail.com][Carsten's announcement]] for more details.

    To switch over to the new system:

    1. Run

     : M-x org-capture-import-remember-templates RET

       to get a translated version of your remember templates into the
       new variable =org-capture-templates=.  This will "mostly" work,
       but maybe not for all cases.  At least it will give you a good
       place to modify your templates.  After running this command,
       enter the customize buffer for this variable with

     : M-x customize-variable RET org-capture-templates RET

       and convince yourself that everything is OK.  Then save the
       customization.

    2. Bind the command =org-capture= to a key, similar to what you did
       with org-remember:

     : (define-key global-map "\C-cc" 'org-capture)

       If your fingers prefer =C-c r=, you can also use this key once
       you have decided to move over completely to the new
       implementation.  During a test time, there is nothing wrong
       with using both system in parallel.

** New libraries

*** New Org libraries
**** org-eshell.el (Konrad Hinsen)

     Implement links to eshell buffers.

**** org-special-blocks (Carsten Dominik)

     This package generalizes the #+begin_foo and #+end_foo tokens.

     To use, put the following in your init file:

     #+BEGIN_EXAMPLE
(require 'org-special-blocks)
#+END_EXAMPLE

     The tokens #+begin_center, #+begin_verse, etc. existed
     previously.  This package generalizes them (at least for the
     LaTeX and html exporters).  When a #+begin_foo token is
     encountered by the LaTeX exporter, it is expanded
     into \begin{foo}.  The text inside the environment is not
     protected, as text inside environments generally is.
     When #+begin_foo is encountered by the html exporter, a div with
     class foo is inserted into the HTML file.  It is up to the user
     to add this class to his or her stylesheet if this div is to mean
     anything.

**** org-taskjuggler.el (Christian Egli)

     Christian Egli's /org-taskjuggler.el/ module is now part of Org.
     He also wrote a [[https://orgmode.org/worg/org-tutorials/org-taskjuggler.html][tutorial]] for it.

**** org-ctags.el (Paul Sexton)

     Targets like =<<my target>>= can now be found by Emacs' etag
     functionality, and Org-mode links can be used to to link to
     etags, also in non-Org-mode files.  For details, see the file
     /org-ctags.el/.

     This feature uses a new hook =org-open-link-functions= which will
     call function to do something special with text links.

     Thanks to Paul Sexton for this contribution.

**** org-docview.el (Jan Böcker)

     This new module allows links to various file types using docview, where
     Emacs displays images of document pages.  Docview link types can point
     to a specific page in a document, for example to page 131 of the
     Org-mode manual:

     : [[docview:~/.elisp/org/doc/org.pdf::131][Org-Mode Manual]]

     Thanks to Jan Böcker for this contribution.

*** New Babel libraries

- ob-picolisp.el (Thorsten Jolitz)
- ob-fortran.el (Sergey Litvinov)
- ob-shen.el (Eric Schulte)
- ob-maxima.el (Eric S Fraga)
- ob-java.el (Eric Schulte)
- ob-lilypond.el (Martyn Jago)
- ob-awk.el (Eric Schulte)

** Other new features and various enhancements

*** Hyperlinks

**** Org-Bibtex -- major improvements

     Provides support for managing bibtex bibliographical references
     data in headline properties.  Each headline corresponds to a
     single reference and the relevant bibliographic meta-data is
     stored in headline properties, leaving the body of the headline
     free to hold notes and comments.  Org-bibtex is aware of all
     standard bibtex reference types and fields.

     The key new functions are

     - org-bibtex-check :: queries the user to flesh out all required
          (and with prefix argument optional) bibtex fields available
          for the specific reference =type= of the current headline.

     - org-bibtex-create :: Create a new entry at the given level,
          using org-bibtex-check to flesh out the relevant fields.

     - org-bibtex-yank :: Yank a bibtex entry on the kill ring as a
          formatted Org-mode headline into the current buffer

     - org-bibtex-export-to-kill-ring :: Export the current headline
          to the kill ring as a formatted bibtex entry.

**** org-gnus.el now allows link creation from messages

     You can now create links from messages.  This is particularly
     useful when the user wants to stored messages that he sends, for
     later check.  Thanks to Ulf Stegemann for the patch.

**** Modified link escaping

     David Maus worked on `org-link-escape'.  See [[https://list.orgmode.org/87k4gysacq.wl%dmaus@ictsoc.de][his message]]:

     : Percent escaping is used in Org mode to escape certain characters
     : in links that would either break the parser (e.g. square brackets
     : in link target oder description) or are not allowed to appear in
     : a particular link type (e.g. non-ascii characters in a http:
     : link).
     :
     : With this change in place Org will apply percent escaping and
     : unescaping more consistently especially for non-ascii characters.
     : Additionally some of the outstanding bugs or glitches concerning
     : percent escaped links are solved.

     Thanks a lot to David for this work.

**** Make =org-store-link= point to directory in a dired buffer

     When, in a dired buffer, the cursor is not in a line listing a
     file, `org-store-link' will store a link to the directory.

     Patch by Stephen Eglen.

**** Allow regexps in =org-file-apps= to capture link parameters

     The way extension regexps in =org-file-apps= are handled has
     changed.  Instead of matching against the file name, the regexps
     are now matched against the whole link, and you can use grouping
     to extract link parameters which you can then use in a command
     string to be executed.

     For example, to allow linking to PDF files using the syntax
     =file:/doc.pdf::<page number>=, you can add the following entry
     to org-file-apps:

     #+begin_example
     Extension: \.pdf::\([0-9]+\)\'
     Command:   evince "%s" -p %1
     #+end_example

     Thanks to Jan Böcker for a patch to this effect.

*** Dates and time

**** Allow relative time when scheduling/adding a deadline

     You can now use relative duration strings like "-2d" or "++3w"
     when calling =org-schedule= or =org-deadline=: it will schedule
     (or set the deadline for) the item respectively two days before
     today and three weeks after the current timestamp, if any.

     You can use this programmatically: =(org-schedule nil "+2d")=
     will work on the current entry.

     You can also use this while (bulk-)rescheduling and
     (bulk-)resetting the deadline of (several) items from the agenda.

     Thanks to Memnon Anon for a heads up about this!

**** American-style dates are now understood by =org-read-date=

     So when you are prompted for a date, you can now answer like this

     #+begin_example
     2/5/3         --> 2003-02-05
     2/5           --> <CURRENT-YEAR>-02-05
     #+end_example

*** Agenda

**** =org-agenda-custom-commands= has a default value

     This option used to be `nil' by default.  This now has a default
     value, displaying an agenda and all TODOs.  See the docstring for
     details.  Thanks to Carsten for this.

**** Improved filtering through =org-agenda-to-appt=

     The new function allows the user to refine the scope of entries
     to pass to =org-agenda-get-day-entries= and allows to filter out
     entries using a function.

     Thanks to Peter Münster for raising a related issue and to
     Tassilo Horn for this idea.  Also thanks to Peter Münster for
     [[git:68ffb7a7][fixing a small bug]] in the final implementation.

**** Allow ap/pm times in agenda time grid

     Times in the agenda can now be displayed in am/pm format.  See
     the new variable =org-agenda-timegrid-use-ampm=.  Thanks to
     C. A. Webber for a patch to this effect.

**** Agenda: Added a bulk "scattering" command

     =B S= in the agenda buffer will cause tasks to be rescheduled a
     random number of days into the future, with 7 as the default.
     This is useful if you've got a ton of tasks scheduled for today,
     you realize you'll never deal with them all, and you just want
     them to be distributed across the next N days.  When called with
     a prefix arg, rescheduling will avoid weekend days.

     Thanks to John Wiegley for this.

*** Exporting

**** Simplification of org-export-html-preamble/postamble

     When set to `t', export the preamble/postamble as usual, honoring
     the =org-export-email/author/creator-info= variables.

     When set to a formatting string, insert this string.  See the
     docstring of these variable for details about available
     %-sequences.

     You can set =:html-preamble= in publishing project in the same
     way: `t' means to honor =:email/creator/author-info=, and a
     formatting string will insert a string.

**** New exporters to Latin-1 and UTF-8

     While Ulf Stegemann was going through the entities list to
     improve the LaTeX export, he had the great idea to provide
     representations for many of the entities in Latin-1, and for all
     of them in UTF-8.  This means that we can now export files rich
     in special symbols to Latin-1 and to UTF-8 files.  These new
     exporters can be reached with the commands =C-c C-e n= and =C-c
     C-e u=, respectively.

     When there is no representation for a given symbol in the
     targeted coding system, you can choose to keep the TeX-macro-like
     representation, or to get an "explanatory" representation.  For
     example, =\simeq= could be represented as "[approx. equal to]".
     Please use the variable =org-entities-ascii-explanatory= to state
     your preference.

**** HTML export: Add class to outline containers using property

     The =HTML_CONTAINER_CLASS= property can now be used to add a
     class name to the outline container of a node in HTML export.

**** Throw an error when creating an image from a LaTeX snippet fails

     This behavior can be configured with the new option variable
     =org-format-latex-signal-error=.

**** Support for creating BEAMER presentations from Org-mode documents

     Org-mode documents or subtrees can now be converted directly in
     to BEAMER presentation.  Turning a tree into a simple
     presentations is straight forward, and there is also quite some
     support to make richer presentations as well.  See the [[https://orgmode.org/manual/Beamer-Export.html][BEAMER
     section]] in the manual for more details.

     Thanks to everyone who has contributed to the discussion about
     BEAMER support and how it should work.  This was a great example
     for how this community can achieve a much better result than any
     individual could.

*** Refiling

**** Refile targets can now be cached

     You can turn on caching of refile targets by setting the variable
     =org-refile-use-cache=.  This should speed up refiling if you
     have many eligible targets in many files.  If you need to update
     the cache because Org misses a newly created entry or still
     offers a deleted one, press =C-0 C-c C-w=.

**** New logging support for refiling

     Whenever you refile an item, a time stamp and even a note can be
     added to this entry.  For details, see the new option
     =org-log-refile=.

     Thanks to Charles Cave for this idea.

*** Completion

**** In-buffer completion is now done using John Wiegley's pcomplete.el

     Thanks to John Wiegley for much of this code.

*** Tables

**** New command =org-table-transpose-table-at-point=

     See the docstring.  This hack from Juan Pechiar is now part of
     Org's core.  Thanks to Juan!

**** Display field's coordinates when editing it with =C-c `=

     When editing a field with =C-c `=, the field's coordinate will
     the displayed in the buffer.

     Thanks to Michael Brand for a patch to this effect.

**** Spreadsheet computation of durations and time values

     If you want to compute time values use the =T= flag, either in
     Calc formulas or Elisp formulas:

     | Task 1 | Task 2 |   Total |
     |--------+--------+---------|
     |  35:00 |  35:00 | 1:10:00 |
     #+TBLFM: @2$3=$1+$2;T

     Values must be of the form =[HH:]MM:SS=, where hours are
     optional.

     Thanks to Martin Halder, Eric Schulte and Carsten for code and
     feedback on this.

**** Implement formulas applying to field ranges

     Carsten implemented this field-ranges formulas.

     : A frequently requested feature for tables has been to be able to define
     : row formulas in a way similar to column formulas.  The patch below allows
     : things like
     :
     : @3=
     : @2$2..@5$7=
     : @I$2..@II$4=
     :
     : as the left hand side for table formulas in order to write a formula that
     : is valid for an entire column or for a rectangular section in a
     : table.

     Thanks a lot to Carsten for this.

**** Sending radio tables from org buffers is now allowed

     Org radio tables can no also be sent inside Org buffers.  Also,
     there is a new hook which get called after a table has been sent.

     Thanks to Seweryn Kokot.

*** Lists

**** Improved handling of lists

     Nicolas Goaziou extended and improved the way Org handles lists.

     1. Indentation of text determines again end of items in
        lists. So, some text less indented than the previous item
        doesn't close the whole list anymore, only all items more
        indented than it.

     2. Alphabetical bullets are implemented, through the use of the
        variable `org-alphabetical-lists'. This also adds alphabetical
        counters like [@c] or [@W].

     3. Lists can now safely contain drawers, inline tasks, or various
        blocks, themselves containing lists. Two variables are
        controlling this: `org-list-forbidden-blocks', and
        `org-list-export-context'.

     4. Improve `newline-and-indent' (C-j): used in an item, it will
        keep text from moving at column 0. This allows to split text
        and make paragraphs and still not break the list.

     5. Improve `org-toggle-item' (C-c -): used on a region with
        standard text, it will change the region into one item. With a
        prefix argument, it will fallback to the previous behavior and
        make every line in region an item. It permits to easily
        integrate paragraphs inside a list.

     6. `fill-paragraph' (M-q) now understands lists. It can freely be
        used inside items, or on text just after a list, even with no
        blank line around, without breaking list structure.

     Thanks a lot to Nicolas for all this!

*** Inline display of linked images

    Images can now be displayed inline.  The key C-c C-x C-v does
    toggle the display of such images.  Note that only image links
    that have no description part will be inlined.

*** Implement offsets for ordered lists

    If you want to start an ordered plain list with a number different
    from 1, you can now do it like this:

    : 1. [@start:12] will star a lit a number 12

*** Babel: code block body expansion for table and preview

    In org-babel, code is "expanded" prior to evaluation. I.e. the
    code that is actually evaluated comprises the code block contents,
    augmented with the extra code which assigns the referenced data to
    variables. It is now possible to preview expanded contents, and
    also to expand code during during tangling. This expansion takes
    into account all header arguments, and variables.

    A new keybinding `C-c M-b p' bound to `org-babel-expand-src-block'
    can be used from inside of a source code block to preview its
    expanded contents (which can be very useful for debugging).
    tangling

    The expanded body can now be tangled, this includes variable
    values which may be the results of other source-code blocks, or
    stored in headline properties or tables. One possible use for this
    is to allow those using org-babel for their emacs initialization
    to store values (e.g. usernames, passwords, etc...) in headline
    properties or in tables.

    Org-babel now supports three new header arguments, and new default
    behavior for handling horizontal lines in tables (hlines), column
    names, and rownames across all languages.

*** Editing Convenience and Appearance

**** New command =org-copy-visible= (=C-c C-x v=)

     This command will copy the visible text in the region into the
     kill ring.  Thanks to Florian Beck for this function and to
     Carsten for adding it to org.el and documenting it!

**** Make it possible to protect hidden subtrees from being killed by =C-k=

     See the new variable =org-ctrl-k-protect-subtree=.  This was a
     request by Scott Otterson.

**** Implement pretty display of entities, sub-, and superscripts.

     The command =C-c C-x \= toggles the display of Org's special
     entities like =\alpha= as pretty unicode characters.  Also, sub
     and superscripts are displayed in a pretty way (raised/lower
     display, in a smaller font).  If you want to exclude sub- and
     superscripts, see the variable
     =org-pretty-entities-include-sub-superscripts=.

     Thanks to Eric Schulte and Ulf Stegeman for making this possible.

**** New faces for title, date, author and email address lines

     The keywords in these lines are now dimmed out, and the title is
     displayed in a larger font, and a special font is also used for
     author, date, and email information.  This is implemented by the
     following new faces:

     =org-document-title=
     =org-document-info=
     =org-document-info-keyword=

     In addition, the variable =org-hidden-keywords= can be used to
     make the corresponding keywords disappear.

     Thanks to Dan Davison for this feature.

**** Simpler way to specify faces for tags and todo keywords

     The variables =org-todo-keyword-faces=, =org-tag-faces=, and
     =org-priority-faces= now accept simple color names as
     specifications.  The colors will be used as either foreground or
     background color for the corresponding keyword.  See also the
     variable =org-faces-easy-properties=, which governs which face
     property is affected by this setting.

     This is really a great simplification for setting keyword faces.
     The change is based on an idea and patch by Ryan Thompson.

**** <N> in tables now means fixed width, not maximum width

     Requested by Michael Brand.

**** Better level cycling function

     =TAB= in an empty headline cycles the level of that headline
     through likely states.  Ryan Thompson implemented an improved
     version of this function, which does not depend upon when exactly
     this command is used.  Thanks to Ryan for this improvement.

**** Adaptive filling

     For paragraph text, =org-adaptive-fill-function= did not handle
     the base case of regular text which needed to be filled.  This is
     now fixed.  Among other things, it allows email-style ">"
     comments to be filled correctly.

     Thanks to Dan Hackney for this patch.

**** `org-reveal' (=C-c C-r=) also decrypts encrypted entries (org-crypt.el)

     Thanks to Richard Riley for triggering this change.

**** Better automatic letter selection for TODO keywords

     When all first letters of keywords have been used, Org now
     assigns more meaningful characters based on the keywords.

     Thanks to Mikael Fornius for this patch.

*** Clocking

**** Clock: Allow synchronous update of timestamps in CLOCK log

     Using =S-M-<up/down>= on CLOCK log timestamps will
     increase/decrease the two timestamps on this line so that
     duration will keep the same.  Note that duration can still be
     slightly modified in case a timestamp needs some rounding.

     Thanks to Rainer Stengele for this idea.

**** Localized clock tables

     Clock tables now support a new new =:lang= parameter, allowing
     the user to customize the localization of the table headers.  See
     the variable =org-clock-clocktable-language-setup= which controls
     available translated strings.

**** Show clock overruns in mode line

     When clocking an item with a planned effort, overrunning the
     planned time is now made visible in the mode line, for example
     using the new face =org-mode-line-clock-overrun=, or by adding an
     extra string given by =org-task-overrun-text=.

     Thanks to Richard Riley for a patch to this effect.

**** Clock reports can now include the running, incomplete clock

     If you have a clock running, and the entry being clocked falls
     into the scope when creating a clock table, the time so far spent
     can be added to the total.  This behavior depends on the setting
     of =org-clock-report-include-clocking-task=.  The default is
     =nil=.

     Thanks to Bernt Hansen for this useful addition.

*** Misc

**** Improvements with inline tasks and indentation

     There is now a configurable way on how to export inline tasks.
     See the new variable =org-inlinetask-export-templates=.

     Thanks to Nicolas Goaziou for coding these changes.

**** A property value of "nil" now means to unset a property

     This can be useful in particular with property inheritance, if
     some upper level has the property, and some grandchild of it
     would like to have the default settings (i.e. not overruled by a
     property) back.

     Thanks to Robert Goldman and Bernt Hansen for suggesting this
     change.

**** New helper functions in org-table.el

     There are new functions to access and write to a specific table field.
     This is for hackers, and maybe for the org-babel people.

     #+begin_example
     org-table-get
     org-table-put
     org-table-current-line
     org-table-goto-line
     #+end_example

**** Archiving: Allow to reverse order in target node

     The new option =org-archive-reversed-order= allows to have
     archived entries inserted in a last-on-top fashion in the target
     node.

     This was requested by Tom.

**** Org-reveal: Double prefix arg shows the entire subtree of the parent

     This can help to get out of an inconsistent state produced for
     example by viewing from the agenda.

     This was a request by Matt Lundin.

* Version 7.8

** Summary

- Jambunathan's ODT exporter is now part of Org's core.
- Nicolas' new export engine is now part of =contrib/=
- Standard code block keywords
- 10 new committers
- Many bugfixes

See below for details.

** New committers who signed the FSF copyright assigment

Here is the list of new contributors who signed the FSF papers
since Org 7.7 - welcome, and thanks for your contributions!

- Andreas Leha
- Christian Moe
- Julian Gehring
- Max Mikhanosha
- Michael Brand
- Niels Giessen
- Pieter Praet
- Sergey Litvinov
- Thomas Holst
- Thorsten Jolitz

** The ODT exporter is now part of Org's core

- Full refresh of the OpenDocument Text section in the
  manual.  All new features listed below are fully-documented.
- Associate custom styles on per-file basis using
  =#+ODT_STYLES_FILE:= directive.
- Fontify code listings using an enhanced version of
  =htmlfontify.el= and generate line numbers natively.
- Embed MathML and OpenDocument formula files.
- Use LaTeX to MathML converter -- say MathToWeb
  (http://www.mathtoweb.com/) -- for handling LaTeX Math
  fragments.
- In tables, use column width cookies to control relative width
  of columns.
- Also for tables, you can specify custom styles using
  =#+ATTR_ODT:= lines.
- Lots of bug fixes.

*Experimental*

The following features are /experimental/.  These features are
specific to the ODT export engine and their implementation and
usage could change considerably in future versions.

- Support for list tables -- see this [[http://lists.gnu.org/archive/html/emacs-orgmode/2011-09/msg00017.html][message on the list]].
- Support for annotation blocks -- see this [[http://lists.gnu.org/archive/html/emacs-orgmode/2011-10/msg01251.html][message on the list]].

Special thanks to Jambunathan for his work and his patience
through the process of integrating this vital contribution into
Org's core.

** New export engine by Nicolas

See the comment sections in org-element.el and in org-export.el
(in =contrib/lisp/=).  Also check the experimental LaTeX exporter
using in =EXPERIMENTAL/org-e-latex.el=.

Check Nicolas' announcement [[http://comments.gmane.org/gmane.emacs.orgmode/49416][on the list]] and hack around!

Thanks a lot to Nicolas for this great and promising achievement.

** Incompatible changes

*** Standardized code block keywords
:PROPERTIES:
:CUSTOM_ID: standardized-code-block-keywords
:END:

Following a round of on-list discussion, many code block synonyms
have been removed.  You can safely move forward the following
syntax:

- call lines are specified with #+call:
- code blocks are named with #+name:
- results are named with #+name:, however results generated by a
  code block may still be labeled with #+results:, and tables
  named with #+tblname: will be considered to be named results

The following function may be used to update an existing Org mode
buffer to the new syntax:

#+begin_src emacs-lisp
  (defun update-org-buffer ()
    "Update an Org mode buffer to the new data, code block and call line syntax."
    (interactive)
    (save-excursion
      (flet ((to-re (lst) (concat "^[ \t]*#\\+" (regexp-opt lst t)
                                  "\\(\\[\\([[:alnum:]]+\\)\\]\\)?\\:[ \t]*"))
             (update (re new)
                     (goto-char (point-min))
                     (while (re-search-forward re nil t)
                       (replace-match new nil nil nil 1))))
        (let ((old-re (to-re '("RESULTS" "DATA" "SRCNAME" "SOURCE")))
              (lob-re (to-re '("LOB")))
              (case-fold-search t))
          (update old-re "name")
          (update lob-re "call")))))
#+end_src

*Note*: If an old version of Org mode (e.g., the one shipped with
Emacs) is installed on your system, many of the important
variables will be pre-defined with a =defvar= and *will not* have
their values automatically updated -- these include the
following:

- =org-babel-data-names=
- =org-babel-result-regexp=
- =org-babel-src-block-regexp=
- =org-babel-src-name-regexp=
- =org-babel-src-name-w-name-regexp=

It may be necessary to either remove the source code of older
versions of Org mode or to explicitly evaluate the ob.el file.

*** Removed the =#+BABEL:= keyword

Code block header arguments may now be specified using the
standard =#+Property:= keyword.  See [[#accumulating-property-keywords][Property names ending in =+=
accumulate]] for more information on the extended property syntax.

*** Deleted =org-mode-p= ([[git:4bbdfd22][git]])

This function has been deleted: please update your hacks if you
relied on it.

** New features and user-visible improvements

*** Day names are optional when you type timestamps manually ([[git:278d5afa][git]])

You can type "<2011-12-12>" or [2011-12-12] and modify this timestamps with
S-<right> like other timestamps.  Thanks to Carsten for implementing this.

*** Improved filtering through =org-agenda-to-appt= ([[git:db04ef74][git]])

The new function allows the user to refine the scope of entries
to pass to =org-agenda-get-day-entries= and allows to filter out
entries using a function.
    
Thanks to Peter Münster for raising a related issue and to
Tassilo Horn for this idea.  Also thanks to Peter Münster for
[[git:68ffb7a7][fixing a small bug]] in the final implementation.

*** =org-agenda-date-later= jumps to today when modifying past date ([[git:f20eef318e9e66481dde560dc5e388e911b28aab][git]])

The command =org-agenda-date-later= (<S-right> in the Agenda
Mode) directly jumps to today.  Thanks to Carsten for
implementing this.

*** Use prefix arg 0 to inhibit note taking for TODO change ([[git:773596e3][git]])

See Carsten's comment: "Sometimes I want to quickly make a few TODOs done
in the agenda and I want to bypass the note taking I have normally set
up.  With this change, I can press `0 t d' in the agenda to do this."

Thanks to Carsten for implementing this.

*** Various improvements to =org-indent.el=

Nicolas Goaziou worked on refactoring and improving
=org-indent.el=, which should now be faster.  It also better
combines with =visual-line-mode=.

*** Property names ending in =+= accumulate
:PROPERTIES:
:CUSTOM_ID: accumulating-property-keywords
:END:

This results in the following behavior.

#+begin_src org
  ,#+property: var  foo=1
  ,#+property: var+ bar=2
  
  ,#+begin_src emacs-lisp
  ,  (+ foo bar)
  ,#+end_src
  
  ,#+results:
  ,: 3
  
  ,#+begin_src emacs-lisp
  ,  (org-entry-get (point) "var" t)
  ,#+end_src
  
  ,#+results:
  ,: foo=1 bar=2
  
  ,* overwriting a file-wide property
  ,  :PROPERTIES:
  ,  :var:      foo=7
  ,  :END:
  
  ,#+begin_src emacs-lisp
  ,  foo
  ,#+end_src
  
  ,#+results:
  ,: 7
  
  ,#+begin_src emacs-lisp
  ,  (org-entry-get (point) "var" t)
  ,#+end_src
  
  ,#+results:
  ,: foo=7
  
  ,* appending to a file-wide property
  ,  :PROPERTIES:
  ,  :var+:      baz=3
  ,  :END:
  
  ,#+begin_src emacs-lisp
  ,  (+ foo bar baz)
  ,#+end_src
  
  ,#+results:
  ,: 6
  
  ,#+begin_src emacs-lisp
  ,  (org-entry-get (point) "var" t)
  ,#+end_src
  
  ,#+results:
  ,: foo=1 bar=2 baz=3
#+end_src

*** =org-agenda-custom-commands= has a default value ([[git:b3de2dbb953dcadacafeb179899ab9df184da4ff][git]])

This option used to be `nil' by default.  This now has a default
value, displaying an agenda and all TODOs.  See the docstring for
details.  Thanks to Carsten for this.

*** =outline-demote/promote= points to =org-demote/promote-subtree=

Users who use this outline commands in =outline-mode= will want
them to behave the Org way in Org.  Thanks to Michael Brand for
the suggestion.

*** New escape characters for =org-log-note-headings= ([[git:a5d4783a7eacf6bf67317408e7c4feaea71b746e][git]])

The option =org-log-note-headings= now supports %d and %D for
inactive and active timestamps.  This affect the behavior of the
command =org-store-log-note=.  Thanks to John J Foerch for a
patch for this.

*** New command =org-table-transpose-table-at-point= ([[git:b67b6b7844f619f40a79dff69e700f24ac8d6ac9][git]])

See the docstring.  This hack from Juan Pechiar is now part of
Org's core.  Thanks to Juan!

*** Allow recursive edit of minibuffer ([[git:5091facd7f4ec80cce86049d6d84a164cb017970][git]])

You can now use the command =C-c != (=org-time-stamp-inactive=)
when prompted e.g. for a link name.  This is because the central
function =org-completing-read= now support recursive edit.  Only
=C-c != is available at the moment, but if you can think of a
useful command to use, please let me know.

Thanks to Skip Collins for the idea and to Nick Dokos for the
implementation.

*** Allow dynamic construction of the publishing destination ([[git:af0789a5a8951a87f050abb79313012f261bf4f0][git]])

Thanks to Kai Tetzlaff for adding this.

*** Set the capture default time to the prompt time ([[git:acfd6ff3][git]])

In the file+datetree+promt target type, the user is being asked
for a date, where to file an entry.  In the template, he can use
the escape placeholders for active and inactive time stamps.  So
far, these were filled with todays date.  This behavior changed
so that, also at %t and %u, the date to use is the one entered at
the prompt.
    
Reported by Erik Hetzner and fixed by Carsten.

*** =org-agenda-skip-additional-timestamps-same-entry= defaults to `nil' ([[git:aefd49b9098950a6bf8ebf95160d9b5ae94f2ec0][git]])
*** org-sudoku.el -- small sudoku solver

Carsten wrote org-sudoku.el, a little sudoku solver, which lives
in the contrib/ directory.

From [[https://list.orgmode.org/3692D35F-2C42-43E5-AB4C-731A1887BA12@gmail.com][his message]]: "my daughter got stuck with a couple of SUDOKU
puzzles during the vacation (where wh had no internet
connection), so I hacked a small SUDOKU solver that reads a 9x9
Org table and solves it as a sudoku puzzle.  A little silly, but
maybe fun for someone - I have pushed it into the contrib/lisp
directory."
** Code Block related features and improvements
*** Added [[http://cran.r-project.org/web/packages/tikzDevice/index.html][tikzDevice]] support to ob-R.el
*** Support for Pico Lisp code blocks

Thanks to Thorsten Jolitz Pico Lisp code blocks are now
supported.  See =ob-picolisp.el= for more information.

*** Extension to the =eval= code block header argument

The =eval= code block header argument now accepts four (six)
possible values the meaning of which is shown in the table below.

| never or no               | The code block will not be evaluated under any     |
|                           | circumstances.                                     |
| query                     | Evaluation of the code block will require a query. |
| never-export or no-export | The code block will not be evaluated during export |
|                           | but may still be called                            |
| query-export              | Evaluation of the code block during export will    |
|                           | require a query.                                   |

*** Update of intermediate results during code block evaluation

When set to t, the new =org-babel-update-intermediate= variable
will update in-buffer results for code blocks which are evaluated
in the resolution of a variable reference.  This can be used to
ensure that the latest returned results are always shown in
buffer.

*** Support for Fortran code block is now in the core

Thanks to Sergey Litvinov for contributing this support.

*** The =sbe= function allows header argument specification

If first variable is a string and not a cons cell, then interpret
it as a string of header arguments to be passed to the code
block.

*** Support for Shen code blocks

See http://www.shenlanguage.org/ for information on Shen.

A major mode for shen code blocks is available through the GNU
ELPA.

** New options and faces

*** New option =org-export-html-headline-anchor-format= ([[git:b7f5efdc4e1ed07f295d28a05fab3588c4194110][git]])

Format for anchors in HTML headlines.

It requires to %s: both will be replaced by the anchor referring
to the headline (e.g. "sec-2").  When set to `nil', don't insert
HTML anchors in headlines.

This was requested by Alan L Tyree.

*** New option =org-table-formula-field-format= ([[git:7a513b2c00e83f81c8bf1d3abe482d00a2946abc][git]])

Format for fields which contain the result of a formula.
For example, using \"~%s~\" will display the result within tilde
characters.  Beware that modifying the display can prevent the
field from being used in another formula.

Thanks to Dov Grobgeld for this idea.

*** New option =org-loop-over-headlines-in-active-region= ([[git:e67a28e9][git]])

When set to `t', some commands will loop over the active
region.  Currently, =org-schedule= and =org-deadline= uses this
option: pressing =C-c C-s= or =C-c C-d= when the region is active
will let you schedule/deadline all the visible headlines in the
region.

Thanks a lot to David Maus for implementing this.

*** New option =org-catch-invisible-edits= ([[git:31d9fd44][git]])

This option makes it possible to check what is the right thing to do before
editing invisible regions.  Here are the possible values of this option:

: +nil              Do not check, so just do invisible edits.
: +error            Throw an error and do nothing.
: +show             Make point visible, and do the requested edit.
: +show-and-error   Make point visible, then throw an error and abort the edit.
: +smart            Make point visible, and do insertion/deletion if it is
:                   adjacent to visible text and the change feels predictable.

See the docstring for more details.

Thanks to Carsten for implementing this.

*** New option =org-export-latex-table-caption-above=

Let the user place a caption above its table in LaTeX.
Thanks to Thomas Dye for a patch to this effect.

*** New option =org-agenda-follow-indirect= ([[git:e53f62eba9569b78540481bda4b5e7a6b4016983][git]])

By setting `org-agenda-follow-indirect' to a non-nil value,
`org-agenda-follow-mode' will use an indirect buffer to display
only the current item, rather than the whole agenda file in which
it lives.  

Thanks to Dave Abrahams for implementing this.

*** New option =org-refile-active-region-within-subtree= ([[git:c25165c25dc9fdb5b57b3c66b2e0ec0efdbeb7ad][git]])

Non-nil means also refile active region within a subtree.

By default =org-refile= doesn't allow refiling regions if they
don't contain a set of subtrees, but it might be convenient to do
so sometimes: in that case, the first line of the region is
converted to a headline before refiling.

Thanks to Jeff Horn for raising the issue of refiling a list
item, and to Nicolas Goaziou, Nick Dokos and Suvayu Ali for
discussing them patiently.  

*** New option =org-latex-to-mathml-convert-command= 

This option lets you specify a way to convert LaTeX fragments to
MathML.  See also =org-latex-to-mathml-jar-file= and the
docstring of =org-create-math-formula=.

Thanks to Jambunathan K for implementing this.

*** New option =org-properties-postprocess-alist= ([[git:eb4b0358155c91bdb7071ad455f011d2fe629b97][git]])

See its docstring:

: Alist of properties and functions to adjust inserted values.
: Elements of this alist must be of the form
: 
:   ([string] [function])
: 
: where [string] must be a property name and [function] must be a
: lambda expression: this lambda expression must take one argument,
: the value to adjust, and return the new value as a string.
: 
: For example, this element will allow the property "Remaining"
: to be updated wrt the relation between the "Effort" property
: and the clock summary:
: 
:  (("Remaining" 
:      (lambda(value)
:        (let ((clocksum (org-clock-sum-current-item))
:              (effort (org-duration-string-to-minutes
:                      (org-entry-get (point) "Effort"))))
:          (org-minutes-to-hh:mm-string (- effort clocksum))))))

This is inspired by a request from Pascal Mattia.

*** New options =org-habit-today-glyph= and =org-habit-completed-glyph= ([[git:0c099370691469d8078121ba2b0567bd19a628c3][git]])

This gives you control over the character used for displaying
today (default is `!') and days on which a task has been
completed (default is `*').  Thanks to John Wiegley for this.

*** New option =org-bibtex-type-property-name= ([[git:4fbefd87aa6ce30e6d6bc7c115c9b59042ed02f0][git]])

Configurable property name for bibtex entry types.  Thanks to
Eric Schulte for this.

*** New face =org-agenda-filter-tags= ([[git:63969951][git]])

This face is used for highlighting the tag(s) filter in the
modeline.  Thanks to Sébastien Vauban for this idea and its
implementation.

*** New faces =org-agenda-calendar-event= and =org-agenda-calendar-sexp= ([[git:bfe779fe677e8a23dbf712dd42160a35af1285fa][git]])

=org-agenda-calendar-event= is the face used to show events and
appointments in the agenda, and =org-agenda-calendar-sexp= the
one used to show events computed from a S-expression.  

Thanks to Sébastien Vauban for this addition.

** Important bugfixes

*** Respect =org-export-with-tags= when exporting a subtree ([[git:a0815816][git]])

Thanks to Suvayu Ali for spotting this problem and fixing it.

*** Fix XEmacs compatibility issue when creating an indirect buffer ([[git:d493a0ec][git]])

Thanks to Michael Sperber for this fix.

** Testing

*** New test function =org-test-with-temp-text-in-file= ([[git:1f206ed4]])

* Version 7.7

** COMMENT Incompatible changes
** New features and user-visible improvements

*** New command =org-copy-visible= (=C-c C-x v=)

This command will copy the visible text in the region into the
kill ring.

Thanks to Florian Beck for this function and to Carsten for
adding it to org.el and documenting it!

*** New hook =org-ctrl-c-ctrl-c-final-hook=

This hook will be called when nothing special can be performed by
the busy =C-c C-c= key.  Thanks to Paul Sexton for this idea!

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=eaafa42948427da37c065c8294edd0d0f30cccd4][(git commit)]]

*** Allow relative time when scheduling/adding a deadline

You can now use relative duration strings like "-2d" or "++3w"
when calling =org-schedule= or =org-deadline=: it will schedule
(or set the deadline for) the item respectively two days before
today and three weeks after the current timestamp, if any.

You can use this programmatically: =(org-schedule nil "+2d")=
will work on the current entry.

You can also use this while (bulk-)rescheduling and
(bulk-)resetting the deadline of (several) items from the agenda.

Thanks to Memnon Anon for a heads up about this!

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=88eada52a63539b8866b9be861ea72ffbcafb37e][(git commit)]]

*** New functions: =org-todo-yesterday= and =org-agenda-todo-yesterday=

This is useful when you need to mark things done yesterday.

Thanks to Max Mikhanosha for this patch.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=dea1a6f87b1fcd0122796a6603948bf131d4ff69][(git commit)]]

*** =org-set-property= defaults to the last interactively modified property

When setting a property with =C-c C-x p=, it will offered the
last interactively modified property as a default choice.  If
this command is called on a property line, the property in this
line will take precedence over the last set property.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=9a2bf023467ad97fd171422c06541651c24b6014][(git commit)]]

*** Clock: Allow synchronous update of timestamps in CLOCK log

Using =S-M-<up/down>= on CLOCK log timestamps will
increase/decrease the two timestamps on this line so that
duration will keep the same.  Note that duration can still be
slightly modified in case a timestamp needs some rounding.

Thanks to Rainer Stengele for this idea.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=db731a971546aef8a1003df8f73462fc6dfd6a5a][(git commit)]]

*** Clock: New function =org-clock-remove-empty-clock-drawer=

This function removes empty =CLOCK= drawers and has been added to
=org-clock-out-hook=: when clocking out, if no CLOCK log has been
inserted and the drawer is empty, the drawer will be removed.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=65b64bea53e73ea73a4b791a1057b074db144b23][(git commit)]]

*** Capture: new escape sequence =%F= for templates

Using =%F= in capture templates will insert the full path of the
file or the directory the capture mechanism was called from
(whereas =%f= only insert the filename.)

Thanks to Nicolas Goaziou for this change.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=819fbec64160c3c33884b116734c01f56be7606b][(git commit)]]

*** Agenda: new variable =org-agenda-bulk-custom-functions= for custom bulk functions

When using =org-agenda-bulk-action= in agenda view, the user
could already call custom functions by pressing =f= and entering
the function's name.

This variable lets the user add custom choices and reach them
more quickly.  Set the variable to an alist of keys (chars) and
functions, and these keys will be accessible through the
=org-agenda-bulk-action= interface.

If there is a conflict between custom keys and hardcoded choices,
the latter ones take precedence.

Thanks to Julien Cubizolles for triggering this idea.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=1029a9251741c2cdf10281866a2fbbdaf2e1cb25][(git commit)]]

*** Refile: exclude irrelevant headings

When refiling from an org-mode buffer, the current heading and
its subheadings will be excluded from the list of possible
targets.

This only works when =org-refile-use-cache= is =nil= and in
org-mode buffers, not in agenda buffers.

Thanks to Jason Dunsmore for this idea!

*** Lists: new variable =org-list-use-circular-motion=

This variable allows some commands to consider lists as cyclic
structures.  For example, when non-nil, moving past the last item
of a list with S-down will bring you back to the first one.

*** Lists: New variable =org-list-indent-offset=

This variable helps improving readability of sub-items by
increasing their indentation.  E.g., if =org-list-indent-offset=
is set to 2, you may see the following list:

#+begin_example
- First item
	  - Sub-item 1
	  - Sub-item 2
- Second item
#+end_example

*** Table: New flag ";t" to tailor the display of computed durations

See the new variable =org-table-duration-custom-format= and the
updated example from the manual:

|  Task 1 |   Task 2 | Total |
|---------+----------+-------|
| 3:02:20 | -2:07:00 |  0.92 |
#+TBLFM: @2$3=$1+$2;t

In this example, =0.92= is a fraction of hour, the default for
=org-table-duration-custom-format=.

Thanks to Daniel E. Doherty for discussions about this.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=70fab165e1966b32e08ed05776ca19e711d1d1e9][(git commit)]]

*** Table: display field's coordinates when editing it with =C-c `=

When editing a field with =C-c `=, the field's coordinate will
the displayed in the buffer.

Thanks to Michael Brand for a patch to this effect.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=e7eb56f39b5b843bc1487bb49c58e99e51c81fc1][(git commit)]]

*** Babel: support for =java= code blocks

Evaluation of blocks of Java code is now possible.  Currently
only external evaluation of Java code is supported (i.e., no
session evaluation) and only the =:results output= results are
collected.  Code blocks are compiled to a Java class file which
are then evaluated and the values printed to STDOUT are returned.

Java code blocks required a =:classname= header argument which is
used by the compiler to name =.java= and =.class= files.

Example Java code block:
#+begin_src org
  ,#+begin_src java :classname myfirstjavaprog
  ,  class myfirstjavaprog
  ,  {
  ,      public static void main(String args[])
  ,      {
  ,          System.out.println("Hello World!");
  ,      }
  ,  }
  ,#+end_src
  
  ,#+results:
  ,: Hello World!
#+end_src

*** Babel: support for =fortran= code blocks by Sergey Litvinov

The =contrib/babel/langs/= contains the new library
=ob-fortran.el= by Sergey Litvinov.

Thanks to him for this addition.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=2249abb8ad4bb266c5eb808fce1f7e6be9173628][(git commit)]]

*** Babel: support for the [[http://fomus.sourceforge.net/][fomus]] language by Torsten Anders

=ob-fomus.el= has been added to =contrib/babel/langs/=.

Thanks to Torsten Anders for contributing this functionality.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=baa83dacc732c51e15a593b02218bc5f9ef7fb2e][(git commit)]]

*** Publish: hide .orgx files and use theindex.org directly

When :makeindex is `non-nil' in the publishing options, Org will
export an index.  It populates the directory with .orgx files:
those files are now hidden (.file.orgx).  Also the index is
directly stored in the file =theindex.org=, not in the file
=theindex.inc= (which you can delete).

Thanks to Nathan Neff and Carsten for pointing at the problems
and solutions.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=f0d7acfb7867518529d63fe3d111f5f3cf39a61f][(git commit)]]

*** Export: new variable =org-export-html-divs= to allow custom divs

The default value of =org-export-html-divs= is =("preamble"
"content" "postamble")= and is used to define the =<div "%s">=
for the main structure of the exported HTML file.

Note that modifying the default value will break compatibility
with the =org-info.js= script.

Also note that the variable =org-export-html-content-div= will
still be checked for compatibility reasons but is not a custom
variable anymore.

Thanks to Sébastian Vauban for a preliminary version of this
patch.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=2f1fbc58be1dc48621217d666da7bc46c3c5d84e][(git commit)]]

*** Export: new variable =org-export-latex-quotes= to customize quotes in LaTeX export

This allows users to define what quotes they want to use as a
replacement of english double-quotes while exporting to LaTeX.

In particular, if you use the csquote package, you can configure
Org to output something like \endquote{some quoted text} instead
of "some quoted text".

Thanks to Frederik for bringing this issue up, and to Thomas S.
Dye, Nick Dokos and Stefan Nobis for elaborating this solution.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=2b9afb9e63d2fd60a3bb09e33c9d4abb01586339][(git commit)]]

** Important bugfixes

*** Duration computations now work for complex ranges in tables

Thanks to Christian Moe for signaling this problem.

*** Handle recursive setup files correctly

Thanks to Stefan Vollmar for mentioning this problem.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=bbb2ef510ae8fbf28296c8968b99a24408c7c3ce][(git commit)]]

** Details

*** =org-map-entries= can now have 'region as its scope

Thanks to David Maus for suggesting related improvements to
=org-map-entries=.  This one prepares the possibility of letting
some commands to loop over the active region.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=59e7fc4d3a4ee441d4716ca37fd41a2fa64e04d5][(git commit)]]

*** org-depend.el: new chain-find-next trigger option

See the updated docstring of this file.

Thanks a lot to Max Mikhanosha for this!

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=b1279dde0fec5e043b294117d9b999eb99be9a0f][(git commit)]]

*** Export: new experimental exporter to MoinMoin by Puneeth Chaganti.

The =EXPERIMENTAL/= directory contains a new file org-mm.el that
allows you to export an Org file to a MoinMoin file.

Thanks to Puneeth Chaganti for this addition.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=a90b876b936820f6a80cc2ffa807bc29a9de73eb][(git commit)]]

*** Export: new default for =org-export-html-preamble=

The default value included the title.  It now defaults to the
empty string, as the title is hardcoded and included in the
"content" div.  Including the title here is necessary to let
=org-info.js= find it and display the page properly.

*** Export: new variable =org-lparse-use-flashy-warning= defaulting to =nil=

Flashy and verbose warnings while exporting to ODT have been
disabled.  Set this to =t= if you want it back.

*** Export: new default value for =org-export-latex-image-default-option=

This used to be =width=10em= and this is now width=.9\linewidth,
which makes more sense.

Thanks to Sebastien Vauban for this suggestion.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=46a5bde601980c47eccd06d87b82dbae85b20704][(git commit)]]

*** Export: allow =org-export-latex-href-format= to have only one "%s"

This is useful when you want to use \url{link} instead of the
default \href{link}{path}.

Thanks to Henri-Paul Indiogine for bringing this up.

** Known issues

*** The ODT exporter will choke when using some Org-defined strings

For example, using the hungarian version of the table of
contents, as defined in =org-export-language-setup=, the ODT
exporter will complain about a problem with the translated
string.

The workaround is to customize =org-export-language-setup= 
and to use accents directly.

* Version 7.6

** Incompatible changes
** New features and user-visible improvements

*** Integration of Jambunathan's OpenDocumentText Exporter

**** Activation

Org mode 7.6 supports exporting to OpenDocument Text (=odt=)
format using org-odt.el.  Depending on how you installed Org,
this module can be enabled in one of the following ways:

1. If you have downloaded the Org from the Web, either as a
   distribution =.zip= or =.tar.gz= file, or as a Git archive,
   enable the =odt= option in the variable =org-modules=.

2. If you are using Org mode 7.6 that comes bundled with
   Emacs-24.0.50 (or future Emacs-24.1), then you can install the
   OpenDocumentText exporter using the package manager.  Check
   the list of available packages with =M-x list-packages= and
   install the =org-odt= package.

Thanks a lot to Jambunathan K for this great contribution.

**** Keybindings

The following interactive commands are provided:

1. =C-c C-e o= (=org-export-as-odt=): Export as an =odt= file.

2. =C-c C-e O= (=org-export-as-odt-and-open=): Export as an =odt=
   file and open the resulting file.

See the =contrib/odt/README.org= file for further details; you
may check in particular the commands =M-x org-lparse= and =M-x
org-export-convert=.

*** Ob-Lilypond -- new Babel language to allow score generation

ob-lilypond - an org-babel language, provided to allow LilyPond
music score generation, complete with optional auditioning via
midi, whilst leveraging the full power of org mode, and literate
programming.  See https://github.com/mjago/ob-lilypond for more
documentation.

Thanks to Martyn Jago for this addition.

*** Org-Bibtex -- major improvements

Provides support for managing bibtex bibliographical references
data in headline properties.  Each headline corresponds to a
single reference and the relevant bibliographic meta-data is
stored in headline properties, leaving the body of the headline
free to hold notes and comments.  Org-bibtex is aware of all
standard bibtex reference types and fields.

The key new functions are

- org-bibtex-check :: queries the user to flesh out all required
     (and with prefix argument optional) bibtex fields available
     for the specific reference =type= of the current headline.

- org-bibtex-create :: Create a new entry at the given level,
     using org-bibtex-check to flesh out the relevant fields.

- org-bibtex-yank :: Yank a bibtex entry on the kill ring as a
     formatted Org mode headline into the current buffer

- org-bibtex-export-to-kill-ring :: Export the current headline
     to the kill ring as a formatted bibtex entry.

*** Spreadsheet computation of durations and time values

If you want to compute time values use the =T= flag, either in
Calc formulas or Elisp formulas:

| Task 1 | Task 2 |   Total |
|--------+--------+---------|
|  35:00 |  35:00 | 1:10:00 |
#+TBLFM: @2$3=$1+$2;T

Values must be of the form =[HH:]MM:SS=, where hours are
optional.

Thanks to Martin Halder, Eric Schulte and Carsten for code and
feedback on this.

*** Links within inlined footnotes.

It as also possible to have footnotes side-by-side correctly
exported. New variables =org-export-latex-footnote-separator=,
=org-export-html-footnote-separator= and
=org-export-docbook-footnote-separator= are used to separate them
in that case.

Fontification of footnotes is also more accurate.

*** New variable =org-export-with-tasks=

Non-nil means include TODO items for export.

This may have the following values:

- t                    include tasks independent of state.
- todo                 include only tasks that are not yet done.
- done                 include only tasks that are already done.
- nil                  remove all tasks before export
- list of TODO kwds    keep only tasks with these keywords

Thanks to Carsten for implementing this!

*** New variable =org-export-latex-timestamp-inactive-markup=

This variable allows the user to define the LaTeX markup for
inactive timestamps.  It defaults to the same markup than active
timestamps.  Thanks to Eric S Fraga for this patch.

*** New =org-default= face

=M-x customize-face RET org-default RET= will let you define the
default face for =org-mode= buffers.

*** Babel improvements
**** In line code block call syntax
It is now possible to call code blocks from within blocks of
prose.

The new syntax is exactly analogous to the existing =#+call:=
line syntax, only it may be present embedded in a block of prose
for example =call_double(num=8)= would call the =double= code
block assigning the =num= variable to the value =8=.

**** Optional variable names in code block calls
Variable names are now optional when passing variables to a code
block reference.  Un-named variables will be assigned in order as
shown below.

: #+source: minus
: #+begin_src emacs-lisp :var a=0 :var b=0
:   (- a b)
: #+end_src
:
: #+call: minus(a=8, b=4)
:
: #+call: minus(8,4)

**** Sub-tree ID as valid code block variable reference
It is now possible to assign the textual contents of an Org mode
subtree to a code block variable using the ID of the subtree.
Both custom IDs and Org mode IDs may be used.  For example;

#+begin_src org
  ,#+begin_src sh :var text=foo
  ,  echo "$text"|wc
  ,#+end_src

  ,#+results:
  ,: 8      58     415

  ,* example foo
  ,  :PROPERTIES:
  ,  :CUSTOM_ID: foo
  ,  :END:

  ,Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec
  ,hendrerit tempor tellus. Donec pretium posuere tellus. Proin quam
  ,nisl, tincidunt et, mattis eget, convallis nec, purus. Cum sociis
  ,natoque penatibus et magnis dis parturient montes, nascetur ridiculus
  ,mus. Nulla posuere. Donec vitae dolor. Nullam tristique diam non
  ,turpis. Cras placerat accumsan nulla. Nullam rutrum. Nam vestibulum
  ,accumsan nisl.
#+end_src

**** =org-babel-tangle-body-hook= for reprocessing code block bodies during tangling
**** =padline= header argument controls newline padding during tangling
**** Maxima code blocks are now supported

Thanks to Eric Fraga for contributing this support.

**** =awk= code blocks are now supported
**** Added =xmpfilter= to Ruby code blocks for annotated code output
**** New =noweb-ref= header argument

This header argument may be used to concatenate the bodies of
many code blocks into a single noweb reference.  This brings
Org mode's tangling functionality in line with traditional noweb
tangling.

A no web reference like the following

#+begin_src org
  ,#+begin_src sh
  ,  <<the-ref>>
  ,#+end_src
#+end_src

will now expand to include the bodies of all code blocks which
are named =the-ref=, as well as all code blocks which have a
=:noweb-ref= header argument set to the value =the-ref=.

*** New tests

The =tests/= directory has been extensively updated.

** Important bugfixes

*** Org-exp-blocks --- proper handling of recursively nested blocks

During export pre-processing org-exp-blocks will now ensure that
all matched blocks contain a proper balanced number of
recursively nested blocks.

Before this fix nested blocks such as the following would break
during export.

#+begin_src org
  ,#+begin_src org
  ,  ,#+begin_example
  ,  ,  nested example
  ,  ,#+end_example
  ,#+end_src
#+end_src

*** List handling

Fix an infinite loop when a list has an end of block string
without the corresponding beginning.

Auto-filling cannot happen at a location where it would otherwise
insert a new item.

** Details

*** Footnotes have gone through some bug-fixing:

- properly ignore footnotes in comments,
- export calls to previously defined footnotes in LaTeX using
  \footnotemark,
- export footnotes before first heading (LaTeX),
- export footnotes when selecting a subtree not holding their
  definition (LaTeX).

*** Many small bug fixes have been applied to list handling

- fix `org-timer-item',
- fix insertion of a new item with a non-nil `indent-tabs-mode',
- fix use of `fill-region' in an item,
- correct export lists within footnotes and footnotes within lists,
- correctly export lists containing macros,
- don't ignore with-case specification when sorting a list,
- better indentation handling when changing an item to an headline
  or the other way,
- fix check-boxes' cookies updating.

* Version 7.5

** Incompatible changes

*** Code block variable initialized with Emacs Lisp code in tables and lists

It is no longer possible to assign code block variables using
executable Emacs Lisp statements contained in tables or lists.
As per the following example.
#+tblname: table
| (a b c) |

#+begin_src perl :var data=table[0,0]
  $data
#+end_src

#+results:
: (a b c)

Thanks to Vladimir Alexiev for raising this issue.

*** `org-bbdb-anniversary-format-alist' has changed

Please check the docstring and update your settings accordingly.
** New features and user-visible improvements

*** Implement formulas applying to field ranges

Carsten implemented this field-ranges formulas.

: A frequently requested feature for tables has been to be able to define
: row formulas in a way similar to column formulas.  The patch below allows
: things like
:
: @3=
: @2$2..@5$7=
: @I$2..@II$4=
:
: as the left hand side for table formulas in order to write a formula that
: is valid for an entire column or for a rectangular section in a
: table.

Thanks a lot to Carsten for this.

*** Improved handling of lists

Nicolas Goaziou extended and improved the way Org handles lists.

1. Indentation of text determines again end of items in
   lists. So, some text less indented than the previous item
   doesn't close the whole list anymore, only all items more
   indented than it.

2. Alphabetical bullets are implemented, through the use of the
   variable `org-alphabetical-lists'. This also adds alphabetical
   counters like [@c] or [@W].

3. Lists can now safely contain drawers, inline tasks, or various
   blocks, themselves containing lists. Two variables are
   controlling this: `org-list-forbidden-blocks', and
   `org-list-export-context'.

4. Improve `newline-and-indent' (C-j): used in an item, it will
   keep text from moving at column 0. This allows to split text
   and make paragraphs and still not break the list.

5. Improve `org-toggle-item' (C-c -): used on a region with
   standard text, it will change the region into one item. With a
   prefix argument, it will fallback to the previous behavior and
   make every line in region an item. It permits to easily
   integrate paragraphs inside a list.

6. `fill-paragraph' (M-q) now understands lists. It can freely be
   used inside items, or on text just after a list, even with no
   blank line around, without breaking list structure.

Thanks a lot to Nicolas for all this!

*** Modified link escaping

David Maus worked on `org-link-escape'.  See [[https://list.orgmode.org/87k4gysacq.wl%dmaus@ictsoc.de][his message]]:

: Percent escaping is used in Org mode to escape certain characters
: in links that would either break the parser (e.g. square brackets
: in link target oder description) or are not allowed to appear in
: a particular link type (e.g. non-ascii characters in a http:
: link).
:
: With this change in place Org will apply percent escaping and
: unescaping more consistently especially for non-ascii characters.
: Additionally some of the outstanding bugs or glitches concerning
: percent escaped links are solved.

Thanks a lot to David for this work.

*** Simplification of org-export-html-preamble/postamble

When set to `t', export the preamble/postamble as usual, honoring
the =org-export-email/author/creator-info= variables.

When set to a formatting string, insert this string.  See the
docstring of these variable for details about available
%-sequences.

You can set =:html-preamble= in publishing project in the same
way: `t' means to honor =:email/creator/author-info=, and a
formatting string will insert a string.

*** New command `org-agenda-append-agenda'

You can now use `org-agenda-append-agenda' to dynamically add new
agendas views to the current one.  It is particularily useful to
compare multiple small agendas.

*** Localized clock tables

Clock tables now support a new new =:lang= parameter, allowing
the user to customize the localization of the table headers.  See
the variable =org-clock-clocktable-language-setup= which controls
available translated strings.

*** New sorting options when publishing projects

The =:sitemap-sort-file= option now allows sorting the sitemap
file (anti-)alphabetically and (anti-)chronogically.  Thanks a
lot to Manuel Giraud for a patch to this effet.

*** Testing with ERT

Martyn Jago added new tests to =testing/= - thanks to him!
*** New file in contrib/: org-notmuch.el

Org is now distributed with =org-notmuch.el=, by Matthieu
Lemerre.  See explanations in the header of =org-notmuch.el=:

: =org-notmuch.el= implements links to notmuch messages and
: "searchs". A search is a query to be performed by notmuch; it is
: the equivalent to folders in other mail clients. Similarly, mails
: are refered to by a query, so both a link can refer to several
: mails.

*** org-gnus.el now allows link creation from messages

You can now create links from messages.  This is particularily
useful when the user wants to stored messages that he sends, for
later check.  Thanks to Ulf Stegemann for the patch.

** Important bug fixes

*** Capturing to narrowed buffers

You can now safely capture entries to narrowed buffers.  Thanks a
lot to Memnon Anon for bringing this up.

*** Better handling of the new `org-agenda-span' variable

Agendas were a bit confused by the introduction of this variable,
in particular block agendas.  This is now fixed.

Thanks to Julien and Carsten for helping find the right fix for
this issue, and to Michael Brand and Matt Lundin for their
patient testing and reporting.

*** Security warning: using org-crypt with auto-save

To prevent Emacs from auto-saving encrypted entries in clear
text, the user should not use auto-save with org-crypt.el.  We
now send a warning when users are both using auto-saving and
org-crypt.el.  Thanks to Peter Jones for bringing this up.

** Details

*** Babel
**** :file argument causes results to be written to file for all languages
:file <filename> should be understood as saying "write the result
to <filename> and return a link to <filename>".

This works for all languages. For graphics languages (e.g. ditaa, dot,
gnuplot) there is no change in behavior: "result" in the above is the
graphics, and a link to the image is placed in the org buffer. For
general-purpose languages (e.g. emacs-lisp, python, R, ruby, shell),
the "result" written to file is the normal org-babel result (string,
number, table).

In order to return a file link from a src block without telling babel
to save any results to that file, use :results <filename> and do not
use :file. The code block can of course write arbitrary content to
<filename>.

Some examples:

Save the output of ls -l as a .csv file (recall that :results value is
the default):

#+begin_src sh :file dirlisting.csv :sep ,
 ls -l
#+end_src

Send the text output of ls -l directly to file:

#+begin_src sh :results output :file dirlisting.txt
 ls -l
#+end_src

**** R requires :results graphics :file filename when generating graphics
":results graphics" is now required in addition to ":file
filename" in order for graphical output to be sent automatically
to file. If :file is supplied, but not ":results graphics", then
non-graphical, "value" or "output" results are written to file,
depending on which of those options is in effect.
**** Calc code blocks can now accept vectors
For example;

#+begin_src calc :var y=[1 2 3]
  3 y
#+end_src

#+results:
: [3, 6, 9]

Thanks to Eric S. Fraga for raising this issue

**** Code blocks with empty bodies are now acceptable

Previously these caused errors on export.  Thanks to Martyn Jago
for this patch.

**** Emacs Lisp variable assignments which don't eval cleanly passed literally

This makes it possible to easily pass through non-elisp variable
assignments which may initially look like valid elisp.

**** Unified naming of =c++= functions to =C++=
Thanks to Martyn Jago for this patch.

**** `org-babel-execute-buffer' and `org-babel-execute-subtree' now eval inline code blocks as well

**** New :mkdirp header argument creates parent dirs of tangle targets

**** New ":comments noweb" option for wrapping noweb references in comment links

This can be useful to allow backward linking from tangle code
files to the original code block holding noweb-expanded content.

**** Allow detangling of text containing '\'s -- Thanks to Seth Burleigh

**** =:sep= specifies table separator when opening or writing tabular results

**** `org-edit-src-content-indentation' can now be a buffer-local variable
*** All export configuration variables can now be buffer-local variables
*** org-complete.el has been renamed to org-pcomplete.el

In case you were manually loading =org-complete.el= (which is
*not* necessary anyway), please be aware that the name of this
library was changed to =org-pcomplete.el=.

*** New user options for LaTeX source code export via minted and listings packages

New variables `org-export-latex-listings-options' and
`org-export-latex-minted-options' allow package options to be
controlled; `org-export-latex-custom-lang-environments' allows
arbitrary configuration on a per-language basis.

*** Effort durations now support 2d, 2m, etc.

Effort duration can now be set as 2h (for 2 hours), etc.  This
will be converted to minutes automatically when clocking in an
entry with an effort property.   See the =org-effort-durations=
variable.

Thanks a lot to Lawrence Mitchell for this patch.

*** New option :clock-keep for capture templates

A capture template with =:clock-keep t= will prevent the refiling
process from clocking out the entry.  If =:clock-resume= is also
`t', =:clock-keep= will take precedence and =:clock-resume= will
be ignored.

So now =:immediate-finish t :clock-in t :clock-keep t= makes
sense: it will capture a new task and clock it.

*** Misc

**** New command `org-agenda-bulk-mark-regexp'

=M-x org-agenda-bulk-mark-regexp RET= will mark agenda entries
which headings match against a regular expression.  You can call
this command with the `%' key from an agenda buffer.

**** New command `org-agenda-reset-view'

Julien Danjou implemented this:

: This new command lets you switch to day/week/month/year view.
:
: When switching to day or week view, this setting becomes the default for
: subsequent agenda refreshes.  Since month and year views are slow to
: create, they do not become the default.  A numeric prefix argument may be
: used to jump directly to a specific day of the year, ISO week, month, or
: year, respectively.  For example, `32 d' jumps to February 1st, `9 w' to
: ISO week number 9.  When setting day, week, or month view, a year may be
: encoded in the prefix argument as well.  For example, `200712 w' will jump
: to week 12 in 2007.  If such a year specification has only one or two
: digits, it will be mapped to the interval 1938-2037. `v SPC'' will reset to
: what is set in `org-agenda-span'.

Thanks a lot to Julien for this.

**** New options for ignoring past or future items in the global todo list

This patch gives users greater control over which past or future items
they would like to ignore in the global todo list. By setting
org-agenda-todo-ignore-scheduled to 7, for instance, a user can ignore all
items scheduled 7 or more days in the future. Similarly, by setting
org-agenda-todo-ignore-scheduled to -1, a user can ignore all items that
are truly in the past (unlike the 'past setting, which ignores items
scheduled today).

See the docstrings of these variables:

- org-agenda-todo-ignore-deadlines
- org-agenda-todo-ignore-scheduled
- org-agenda-todo-ignore-timestamp

Thanks a lot to Matt Lundin for implementing this and to Paul
Sexton for the idea.

**** New variable `org-export-table-remove-empty-lines'

When set to `nil', don't remove empty tables when exporting
tables.  This was requested by Eric S Fraga.

**** New variable `org-table-fix-formulas-confirm'

Sometime, editing the structure of a table should not edit the
corresponding formulas.  This new variable lets the user decide
whether he wants to confirm formula fixes or not.

**** New variable `org-export-initial-scope'

This variable controls the initial scope when exporting with `org-export'.
It can be set to 'buffer or 'subtree.  If there is an active region, tell
it when prompting the user for an export command.

**** Show and use the default refile location

M-x org-refile RET now shows the default refile location.  Thanks to
Tassilo Horn for a patch to this effect.

**** New variable `org-archive-subtree-add-inherited-tags'

Non-nil means append inherited tags when archiving a subtree.

**** New variable `org-export-current-backend'

This variable is dynamically set by exporters.  You can check
against its value anytime in your code to see if you are
exporting to HTML, LaTeX, etc.  Possible values are 'html,
'latex, 'ascii, 'docbook.  Thanks to Eric Schulte and Dan Davison
for ideas and patches in this area.

**** New hook `org-clock-before-select-task-hook'

Hook called in task selection just before prompting the user.

Thanks to Benjamin Drieu for the patch.

**** = = emphasis now uses \protectedtexttt
**** Author's email now included in the LaTeX title

When `org-export-email-info' is non-nil, the LaTeX title will
also include the author's email.  Thanks to Lawrence Mitchell for
the patch.


**** Update contrib/scripts/ditaa.jar to ditaa v0.9 of 2009-11-24

**** New variable `org-mobile-files-exclude-regexp'

This variable lets you exclude files that you don't want in
org-mobile-files.

**** New variable `org-confirm-elisp-link-not-regexp'

Set this to a regexp if you want to skip the confirmation step for
Elisp/Shell code matching this regexp.

**** New variable `org-attach-store-link-p'

When set to `t', store link to the attached file, at its original location.

**** `org-table-use-standard-references' now defaults to 'from

**** Better `org-agenda-repeating-timestamp-show-all'

When this is set to a list of TODO keywords, the agenda will only show
occurrences of repeating stamps for these TODO keywords.

**** New command `org-narrow-to-block'

This command (`C-x n b') will narrow the buffer to the current block.
* Version 7.4
:PROPERTIES:
:VISIBILITY: content
:CUSTOM_ID: v7.4
:END:

** Incompatible changes

*** Agenda: rework ndays and span handling

The variable =org-agenda-ndays= is obsolete - please use
=org-agenda-span= instead.

Thanks to Julien Danjou for this.

** Details

*** Improvements with inline tasks and indentation

There is now a configurable way on how to export inline tasks.  See
the new variable =org-inlinetask-export-templates=.

Thanks to Nicolas Goaziou for coding these changes.

*** Agenda: Added a bulk "scattering" command

=B S= in the agenda buffer will cause tasks to be rescheduled a random
number of days into the future, with 7 as the default.  This is useful
if you've got a ton of tasks scheduled for today, you realize you'll
never deal with them all, and you just want them to be distributed
across the next N days.  When called with a prefix arg, rescheduling
will avoid weekend days.

Thanks to John Wiegley for this.

*** In-buffer completion is now done using John Wiegleys pcomplete.el

Thanks to John Wiegley for much of this code.

*** Sending radio tables from org buffers is now allowed

Org radio tables can no also be sent inside Org buffers.  Also,
there is a new hook which get called after a table has been sent.

Thanks to Seweryn Kokot.

*** Command names shown in manual

The reference manual now lists command names for most commands.
Thanks to Andreas Röhler who started this project.

*** Allow ap/pm times in agenda time grid

Times in the agenda can now be displayed in am/pm format.  See the new
variable =org-agenda-timegrid-use-ampm=.  Thanks to C. A. Webber for
a patch to this effect.

*** Rewriten clock table code

The entire clocktable code has been rewritten to add more options and
to make hacking time reports easier.

Thanks to Erwin Vrolijk for a patch introducing clock tables for
quarters.

*** Babel
**** Add =msosql= engine to sql code blocks
SQL code blocks can now be executed using the =myosql= engine
using the osql command (from MS SQL Server) on Windows systems.

Thanks to Sébastien Vauban for this contribution.

**** Python code blocks now accept a =preamble= header argument
This allows specification of coding declarations and library imports
which must take place in the beginning of a file of executed python
code (note this header argument is used during code block evaluation
unlike the =shebang= header argument which is used during tangling).
For example

#+begin_src org
  ,#+begin_src python :preamble # -*- coding: utf-8 -*- :return s
  ,s = "é"
  ,#+end_src
#+end_src

Thanks to Vincent Beffara for this idea.

**** Code block name is shown during evaluation query
When the user is queried about the evaluation of a named code block
the name of the code block is now displayed.

Thanks to Tom Dye for this suggestion.

**** Clojure code blocks results insertion
The results of Clojure code blocks have been improved in two ways.
1. lazy sequences are now expanded for insertion into the Org mode
   buffer
2. pretty printing of results is now possible with both "code" and
   "data" pretty print formats

Thanks to Rick Moynihan for suggesting these changes.

**** Python code blocks now accept a =:return= header argument
This alleviates the need to explicitly insert return statements into
the bode of Python code blocks.  This change both
- allows the same python code blocks to be run both in sessions and
  externally
- removes the floating =return= statements which violated python
  syntax

Thanks to Darlan Cavalcante for proposing this feature.

**** =:results wrap= header argument wraps code block results
The new =:results wrap= wraps code blocks results in a custom
environment making it possible to offset their contents during
export.  For example

#+begin_src org
  ,#+begin_src emacs-lisp :results wrap
  ,  "code block results"
  ,#+end_src

  ,#+results:
  ,#+BEGIN_RESULT
  ,: code block results
  ,#+END_RESULT
#+end_src

Thanks to Sébastien Vauban for persistently suggesting this enhancement.

**** Code block error buffer wiped clean between executions
Previously the code block error buffer accumulated errors making it
difficult to distinguish between previous and current errors.  This
buffer is now cleaned before every interactive code block evaluation.

**** Lists now recognized by code blocks
It is now possible for code blocks to both read and write list
contents from and to Org mode buffers.  For example

#+begin_src org
  ,#+results: a-list
  ,- babel
  ,- and
  ,- org-mode

  ,#+source: a-list
  ,#+begin_src emacs-lisp :var lst=a-list :results list
  ,  (reverse lst)
  ,#+end_src
#+end_src

**** Calc added as a supported code block language
The Emacs Calc package can be used through =calc= code blocks allowing
both regular arithmetic operations as well as stack based
calculation.  For example

#+begin_src org
  ,#+source: calc-stack
  ,#+begin_src calc
  ,  8
  ,  1
  ,  '+
  ,  9
  ,  '*
  ,#+end_src

  ,#+results: calc-stack
  ,: 81

  ,#+source: calc-arithmetic
  ,#+begin_src calc :var in=calc-stack
  ,  in / 9
  ,#+end_src

  ,#+results: calc-arithmetic
  ,: 9
#+end_src

**** "org-babel-detangle" propagates change to source code files into code blocks
`org-babel-detangle' can be used to propagate changes to pure source
code files tangled from embedded code blocks in Org mode files back to
the original code blocks in the Org mode file.  This can be used on
collaborative projects to keep embedded code blocks up to date with
edits made in pure source code files.

* Version 7.02

:PROPERTIES:
:CUSTOM_ID: v7.02
:END:

** Incompatible Changes
*** Code block hashes
Due to changes in the code resolving code block header arguments
hashing of code block results should now re-run a code block when
an argument to the code block has changed.  As a result of this
change *all* code blocks with cached results will be re-run after
upgrading to the latest version.

*** Testing update
Anyone using the org-mode test suite will need to update the jump
repository for test navigation by executing the following from
the root of the org-mode repository.
: git submodule update
Failure to update this repository will cause loading of
org-test.el to throw errors.
** Details
*** Org-babel speed commands
All Org-babel commands (behind the C-c C-v key prefix) are now
available as speed commands when the point is on the first line of a
code block.  This uses the existing Org mode speed key mechanisms.

Thanks to Jambunathan K for implementation this new feature.

*** Fontify code in code blocks.

Source code in code blocks can now be fontified.  Please customize the
varable =org-src-fontify-natively=. For very large blocks (several
hundreds of lines) there can be delays in editing such fontified
blocks, in which case C-c ' should be used to bring up a dedicated
edit buffer.

Thanks to Dan Davison for this.

*** Language-mode commands are available in the Org-buffer
    The most general machinery for doing this is the macro
    `org-babel-do-in-edit-buffer'. There is also the convenience
    function `org-babel-do-key-sequence-in-edit-buffer' which makes
    use of this macro, and is bound to C-c C-v C-x and C-c C-v x. If
    there is an active region contained within the code block, then
    this is inherited by the edit buffer. Some examples of the sorts
    of usage this permits are

C-c C-v C-x M-;       comment region according to language
C-c C-v C-x C-M-\     indent region according to language

Users can make these more convenient, e.g.

(defun my/org-comment-dwim (&optional arg)
    (interactive "P")
    (or (org-babel-do-key-sequence-in-edit-buffer "\M-;")
        (comment-dwim arg)))

(define-key org-mode-map "\M-;" 'my/org-comment-dwim)

A common instance of this general pattern is built in to Org mode,
controlled by the variable `org-src-tab-acts-natively': if this
variable is set, then TAB in a code block has the effect that it would
have in the language major mode buffer.

*** Org-babel commands are available in language-mode edit buffer
    Mirroring the language-native commands in Org buffers above, a new
    macro `org-src-do-at-code-block' and convenience function
    `org-src-do-key-sequence-at-code-block' provide the converse. When
    used in a language major-mode edit buffer (i.e. a buffer generated
    by C-c '), `org-src-do-key-sequence-at-code-block' executes a key
    sequence at the code block in the source Org buffer.  The command
    bound to the key sequence in the Org-babel key map is executed
    remotely with point temporarily at the start of the code block in
    the Org buffer.

    The command is not bound to a key by default, to avoid conflicts
    with language major mode bindings. To bind it to C-c @ in all
    language major modes, you could use

  (add-hook 'org-src-mode-hook
            (lambda () (define-key org-src-mode-map "\C-c@"
                    'org-src-do-key-sequence-at-code-block)))

    In that case, for example, C-c @ t issued in code edit buffers
    would tangle the current Org code block, C-c @ e would execute
    the block and C-c @ h would display the other available
    Org-babel commands.

*** Multi-line header arguments to code blocks
Code block header arguments can now span multiple lines using the
new =#+header:= or =#+headers:= lines preceding a code block or
nested in between the name and body of a named code block.
Examples are given below.

- multi-line header arguments on an un-named code block
  : #+headers: :var data1=1
  : #+begin_src emacs-lisp :var data2=2
  :   (message "data1:%S, data2:%S" data1 data2)
  : #+end_src
  :
  : #+results:
  : : data1:1, data2:2

- multi-line header arguments on a named code block
  :   #+source: named-block
  :   #+header: :var data=2
  :   #+begin_src emacs-lisp
  :     (message "data:%S" data)
  :   #+end_src
  :
  :   #+results: named-block
  :   : data:2

*** Unified handling of variable expansion for code blocks
The code used to resolve variable references in code block header
arguments has now been consolidated.  This both simplifies the
code base (especially the language-specific files), and ensures
that the arguments to a code block will not be evaluated multiple
times.  This change should not be externally visible to the
Org mode user.
*** Improved Caching
Code block caches now notice if the value of a variable argument
to the code block has changed, if this is the case the cache is
invalidated and the code block is re-run.  The following example
can provide intuition for the new behavior.
#+begin_src org :exports code
  ,#+srcname: random
  ,#+begin_src R :cache yes
  ,runif(1)
  ,#+end_src

  ,#+results[a2a72cd647ad44515fab62e144796432793d68e1]: random
  ,: 0.4659510825295

  ,#+srcname: caller
  ,#+begin_src emacs-lisp :var x=random :cache yes
  ,x
  ,#+end_src

  ,#+results[bec9c8724e397d5df3b696502df3ed7892fc4f5f]: caller
  ,: 0.254227238707244
#+end_src

*** Added :headers header argument for LaTeX code blocks
This makes it possible to set LaTeX options which must take place in
the document pre-amble for LaTeX code blocks.  This header argument
accepts either a single string or a list, e.g.

#+begin_src org
  ,#+begin_src latex :headers \usepackage{lmodern} :file name1.pdf
  ,  latex body
  ,#+end_src

  ,#+begin_src latex :headers '("\\usepackage{mathpazo}" "\\usepackage{fullpage}") :file name2.pdf
  ,  latex body
  ,#+end_src
#+end_src

*** New function `org-export-string'
Allows exporting directly from a string to the specified export format.
*** Code block header argument ":noweb tangle"
Only expands <<noweb>> syntax references when tangling, not during
export (weaving).
*** New function `org-babel-switch-to-session-with-code'
C-c C-v z (`org-babel-switch-to-session-with-code') is a variant of
C-c C-v C-z (`org-babel-switch-to-session'): instead of switching to
the session buffer, it splits the window between (a) the session
buffer and (b) a language major-mode edit buffer for the code block in
question. This can be convenient for using language major mode for
interacting with the session buffer.

*** Improvements to R sessions
    R now uses standard ESS code evaluation machinery in the :results
    value case, which avoids unnecessary output to the comint
    buffer. In addition, the R command responsible for writing the
    result to file is hidden from the user.  Finally, the R code edit
    buffer generated by C-c ' is automatically linked to the ESS
    session if the current code block is using :session.

*** Temporary file directory
All babel temporary files are now kept in a single sub-directory in
the /tmp directory and are cleaned up when Emacs exits.

*** Function for demarcating blocks `org-babel-demarcate-block'
Can be called to wrap the region in a block, or to split the block
around point, bound to (C-c C-v d).

*** Function for marking code block contents `org-babel-mark-block'
    Bound to C-M-h in the babel key map (i.e. C-c C-v C-M-h by
    default).  This can be useful in conjunction with
    `org-babel-do-in-edit-buffer', for example for language-native
    commenting or indenting of the whole block.
*** Lists of anniversaries are now handeled better

When several anniversaries are defined in the bbdb anniversaries
field (separated by semicolon), this is now handled nicely by the
agenda.

Thanks to Łukasz Stelmach for a patch to this effect.

*** Table fields are now aligned better, new <c> cookie.

In HTML export, table fields are now properly aligned in accord
with automatic alignment in org, or as set by the =<r>=, =<l>=, and
=<c>= cookies.  The =<c>= cookie is new and has no effect in
Org, but it does do the right thing in HTML export.  A LaTeX export
implementation will follow, but is currently still missing.

*** Update freemind converter to include body text

The freemind exporter now incorporates body text into the mind
map.

Thanks to Lennard Borgman for this patch.

*** Make footnotes work correctly in message-mode
The footnotes code now searches for =message-signature-separator=
(which is "-- " by default) in order to place footnotes before the
signature.  Thanks to Tassilo Horn for this patch.

*** Improve XEmacs compatibility

Org mode 7.02 now runs again in 21.4.22 if the new XEmacs base
package is installed.

Thanks to Uwe Bauer, Volker Ziegler, Michael Sperber and others
for a discussion that lead to this nice result.

*** Make it configurable wether agenda jumping prefers the future

When jumping to a date from the agenda using the =j= key, you may
or may not like the property of Org's date reader to prefer the
future when you enter incomplete dates.   This can now be
configured using the variable =org-agenda-jump-prefer-future'.

*** Add publishing functions for ASCII, Latin-1 and UTF-8

There are now publishing functions =org-publish-org-to-ascii=,
=org-publish-org-to-latin1=, and =org-publish-org-to-utf8=.

Thanks to Matthias Danzl for showing how to do this.

*** Indentation and headline insertion after inline tasks

Indentation in inline tasks, and headline insertion after inline
tasks now behave as expected.

*** Encryption in MobileOrg finally works

As soon as MobilOrg 1.5 hits the Apple's AppStore, you can
encrypt your org files on public servers.  Please see the
documentation of MobileOrg and Appendix B of the manual for more
details.

*** MobileOrg: Do not force to insert IDs

If you dislike the property of MobileOrg to insert ID properties
for in all entries being part of an agenda view, you can now turn
this off using the variable
=org-mobile-force-id-on-agenda-items=.  When this variable is set
to =nil=, MobileOrg will use outline paths to identify entries.
Note that this may fail if several entries have identical outline
paths.

*** LaTeX minted package for fontified source code export
Patch by Dan Davison.

A non-nil value of `org-export-latex-minted' means to export source
code using the minted package, which will fontify source code
with color.  If you want to use this, you need to make LaTeX use the
minted package. Add minted to `org-export-latex-packages-alist', for
example using customize, or with something like

  (require 'org-latex)
  (add-to-list 'org-export-latex-packages-alist '("" "minted"))

In addition, it is neccessary to install
pygments (http://pygments.org), and to configure
`org-latex-to-pdf-process' so that the -shell-escape option is
passed to pdflatex.

*** Allow to use texi2dvi or rubber for processing LaTeX to pdf

Please see the variable =org-export-latex-to-pdf-process= for
more information.

Thanks to Olivier Schwander for the rubber part.

*** New STARTUP keywords to turn on inline images

If you want to inline images whenever you visit an Org file, use

: #+STARTUP: inlineimages

*** Support for user-extensible speed commands.

There is a new hook =org-speed-command-hook=.  Thanks to
Jambunathan for a patch to this effect.

*** Add macro to insert property values into exported text

you can use {{{property{NAME}}}} to insert the value of a
property upon export.

Thanks to David Maus for a patch to this effect.

*** LaTeX package fixes

We updated the list of default packages loaded by LaTeX exported
files.

*** Allow "#" and "%" in tags

Tags can now also contain the characters =#= and =%=, in addition
to =@= and letters.

*** Show command names in manual

Andreas Röhler is adding command names to keys in the manual.
This will take a while to complete, but a start has been made.

*** Make backslash escape "-" in property matches

When entering a tags/property query, "-" is a logical operator.
However, "-" is also allowed in property names.  So you can now
write "SOME\-NAME" to work around this issue.

This was a request by Ilya Shlyakhter.

*** Document quick insertion of empty structural elements

Org mode has a built-in template mechanism for inserting block
templates.  This was undocumented until now.

Thanks to Jambunathan K for the patch.

*** Implement MathJax support

Org mode now uses MathJax to display math on web pages.  We serve
MathJax from the orgmode.org server, at least for the time being
(thanks Bastien!).  If you are going to use this for pages which
are viewed often, please install MathJax on your own webserver.

To return to the old way of creating images and inserting them
into web pages, you would have to set

: (setq org-export-with-LaTeX-fragments 'dvipng)

or on a per-file basis

: #+OPTIONS: LaTeX:dvipng

*** Agenda: Allow compact two-column display in agenda dispatcher

If you have many custom agenda commands, you can have the display
in the dispatcher use two columns with the following settings

: (setq org-agenda-menu-show-match nil
:       org-agenda-menu-two-column t)

This was a request by John Wiegley.

*** Add org-wikinodes.el as a contributed package

One frequent request has been to be able to use CamelCase words
for automatic cross links in a Wiki created by Org.  THis is now
possible with org-wikinodes.el, which is available in the contrib
directory.  We also have some [[https://orgmode.org/worg/org-contrib/org-wikinodes.php][documentation]] for this feature up
on Worg.

*** Timer/clock enhancements

=org-timer-set-timer= displays a countdown timer in the modeline.
From the agenda, `J' invokes =org-agenda-clock-goto=.

* Version 7.01
:PROPERTIES:
:CUSTOM_ID: v7.01
:END:

** Incompatible Changes

*** Emacs 21 support has been dropped

Do not use Org mode 7.xx with Emacs 21, use [[https://orgmode.org/org-6.36c.zip][version 6.36c]] instead.

*** XEmacs support requires the XEmacs development version

To use Org mode 7.xx with XEmacs, you need to run the developer
version of XEmacs.   I was about to drop XEmacs support entirely,
but Michael Sperber stepped in and made changes to XEmacs that
made it easier to keep the support.  Thanks to Michael for this
last-minute save.  I had hoped to be able to remove
xemacs/noutline.el from release 7 by moving it into XEmacs, but
this is not yet done.

*** Org-babel configuration changes
:PROPERTIES:
:CUSTOM_ID: ob-configuration-changes
:END:

Babel took the integration into Org mode as an opportunity to do
some much needed house cleaning.  Most importantly we have
simplified the enabling of language support, and cleared out
unnecessary configuration variables -- which is great unless you
already have a working configuration under the old model.

The most important changes regard the /location/ and /enabling/
of Babel (both core functionality and language specific support).

- Babel :: Babel is now part of the core of Org mode, so it is
     now loaded along with the rest of Org mode.  That means that
     there is /no configuration/ required to enable the main
     Babel functionality.  For current users, this means that
     statements like
     #+begin_src emacs-lisp
       (require 'org-babel)
     #+end_src
     or
     #+begin_src emacs-lisp
       (require 'org-babel-init)
     #+end_src
     that may by lying around in your configuration must now be
     removed.
- load path :: Babel (including all language specific files --
     aside from those which are located in the =contrib/=
     directory for reasons of licencing) now lives in the base of
     the Org mode lisp directory, so /no additional directories/
     need to be added to your load path to use babel.  For Babel
     users this means that statements adding babel-specific
     directories to your load-path should now be removed from
     your config.
- language support :: It is no longer necessary to require
     language specific support on a language-by-language basis.
     Specific language support should now be managed through the
     `org-babel-load-languages' variable.  This variable can be
     customized using the Emacs customization interface, or
     through the addition of something like the following to your
     configuration (note: any language not mentioned will /not/
     be enabled, aside from =emacs-lisp= which is enabled by
     default)
     #+begin_src emacs-lisp
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((R . t)
          (ditaa . t)
          (dot . t)
          (emacs-lisp . t)
          (gnuplot . t)
          (haskell . nil)
          (ocaml . nil)
          (python . t)
          (ruby . t)
          (screen . nil)
          (sh . t)
          (sql . nil)
          (sqlite . t)))
     #+end_src

	   Despite this change it is still possible to add
	   language support through the use of =require=
	   statements, however to conform to Emacs file-name
	   regulations all Babel language files have changed
	   prefix from =org-babel-*= to =ob-*=, so the require
	   lines must also change e.g.
	   #+begin_src emacs-lisp
       (require 'org-babel-R)
	   #+end_src
	   should be changed to
	   #+begin_src emacs-lisp
       (require 'ob-R)
	   #+end_src

We have eliminated the =org-babel-tangle-w-comments= variable as
well as the two main internal lists of languages, namely
- =org-babel-interpreters= and
- =org-babel-tangle-langs=

so any config lines which mention those variables, can/should be
stripped out in their entirety.  This includes any calls to the
=org-babel-add-interpreter= function, whose sole purpose was to
add languages to the =org-babel-interpreters= variable.

With those calls stripped out, we may still in some cases want to
associate a file name extension with certain languages, for
example we want all of our emacs-lisp files to end in a =.el=, we
can do this will the =org-babel-tangle-lang-exts= variable.  In
general you shouldn't need to touch this as it already has
defaults for most common languages, and if a language is not
present in org-babel-tangle-langs, then babel will just use the
language name, so for example a file of =c= code will have a =.c=
extension by default, shell-scripts (identified with =sh=) will
have a =.sh= extension etc...

The configuration of /shebang/ lines now lives in header
arguments.  So the shebang for a single file can be set at the
code block level, e.g.

#+begin_src org
  ,#+begin_src clojure :shebang #!/usr/bin/env clj
  ,  (println "with a shebang line, I can be run as a script!")
  ,#+end_src
#+end_src

Note that whenever a file is tangled which includes a /shebang/
line, Babel will make the file executable, so there is good
reason to only add /shebangs/ at the source-code block level.
However if you're sure that you want all of your code in some
language (say shell scripts) to tangle out with shebang lines,
then you can customize the default header arguments for that
language, e.g.

#+begin_src emacs-lisp
  ;; ensure this variable is defined defined
  (unless (boundp 'org-babel-default-header-args:sh)
    (setq org-babel-default-header-args:sh '()))

  ;; add a default shebang header argument
  (add-to-list 'org-babel-default-header-args:sh
               '(:shebang . "#!/bin/bash"))
#+end_src

The final important change included in this release is the
addition of new security measures into Babel.  These measures are
in place to protect users from the accidental or uninformed
execution of code.  Along these lines /every/ execution of a code
block will now require an explicit confirmation from the user.
These confirmations can be stifled through customization of the
`org-confirm-babel-evaluate' variable, e.g.
#+begin_src emacs-lisp
  ;; I don't want to be prompted on every code block evaluation
  (setq org-confirm-babel-evaluate nil)
#+end_src

In addition, it is now possible to remove code block evaluation
form the =C-c C-c= keybinding.  This can be done by setting the
=org-babel-no-eval-on-ctrl-c-ctrl-c= variable to a non-nil value,
e.g.
#+begin_src emacs-lisp
  ;; I don't want to execute code blocks with C-c C-c
  (setq org-babel-no-eval-on-ctrl-c-ctrl-c t)
#+end_src

An additional keybinding has been added for code block
evaluation, namely =C-c C-v e=.

Whew! that seems like a lot of effort for a /simplification/ of
configuration.

*** New keys for TODO sparse trees

The key =C-c C-v= is now reserved for Org Babel action.  TODO
sparse trees can still be made with =C-c / t= (all not-done
states) and =C-c / T= (specific states).

*** Customizable variable changes for DocBook exporter

To make it more flexible for users to provide DocBook exporter
related commands, we start to use format-spec to format the
commands in this release.  If you use DocBook exporter and use it
to export Org files to PDF and/or FO format, the settings of the
following two customizable variables need to be changed:

- =org-export-docbook-xslt-proc-command=
- =org-export-docbook-xsl-fo-proc-command=

Instead of using =%s= in the format control string for all
arguments, now we use /three/ different format spec characters:

- =%i=: input file argument
- =%o=: output file argument
- =%s=: XSLT stylesheet argument

For example, if you set =org-export-docbook-xslt-proc-command= to

: java com.icl.saxon.StyleSheet -o %s %s /path/to/docbook.xsl

in the past, now you need to change it to

: java com.icl.saxon.StyleSheet -o %o %i %s

and set a new customizable variable called
=org-export-docbook-xslt-stylesheet= to =/path/to/docbook.xsl=.

Please check the documentation of these two variables for more
details and other examples.

Along with the introduction of variable
=org-export-docbook-xslt-stylesheet=, we also added a new
in-buffer setting called =#+XSLT:=.  You can use this setting to
specify the XSLT stylesheet that you want to use on a per-file
basis.  This setting overrides
=org-export-docbook-xslt-stylesheet=.

** Details

*** Org Babel is now part of the Org core
See [[#ob-configuration-changes][Org-babel configuration changes]] for instructions on how to
update your babel configuration.

The most significant result of this change is that Babel now has
documentation!  It is part of Org mode's documentation, see
Chapter 14 [[https://orgmode.org/manual/Working-with-source-code.html#Working-with-source-code][Working With Source Code]].  The Babel keybindings
are now listed in the refcard, and can be viewed from any
Org mode buffer by pressing =C-c C-v h=.  In addition this
integration has included a number of bug fixes, and a significant
amount of internal code cleanup.

*** The default capture system for Org mode is now called org-capture

This replaces the earlier system org-remember.  The manual only
describes org-capture, but for people who prefer to continue to
use org-remember, we keep a static copy of the former manual
section [[https://orgmode.org/org-remember.pdf][chapter about remember]].

The new system has a technically cleaner implementation and more
possibilities for capturing different types of data.  See
[[https://list.orgmode.org/C46F10DC-DE51-43D4-AFFE-F71E440D1E1F@gmail.com][Carsten's announcement]] for more details.

To switch over to the new system:

1. Run

   : M-x org-capture-import-remember-templates RET

   to get a translated version of your remember templates into the
   new variable =org-capture-templates=.  This will "mostly" work,
   but maybe not for all cases.  At least it will give you a good
   place to modify your templates.  After running this command,
   enter the customize buffer for this variable with

   : M-x customize-variable RET org-capture-templates RET

   and convince yourself that everything is OK.  Then save the
   customization.

2. Bind the command =org-capture= to a key, similar to what you did
   with org-remember:

   : (define-key global-map "\C-cc" 'org-capture)

   If your fingers prefer =C-c r=, you can also use this key once
   you have decided to move over completely to the new
   implementation.  During a test time, there is nothing wrong
   with using both system in parallel.

*** Implement pretty display of entities, sub-, and superscripts.

The command =C-c C-x \= toggles the display of Org's special
entities like =\alpha= as pretty unicode characters.  Also, sub
and superscripts are displayed in a pretty way (raised/lower
display, in a smaller font).  If you want to exclude sub- and
superscripts, see the variable
=org-pretty-entities-include-sub-superscripts=.

Thanks to Eric Schulte and Ulf Stegeman for making this possible.

*** Help system for finding entities

The new command =M-x org-entities-help= creates a structured
buffer that lists all entities available in Org.  Thanks to Ulf
Stegeman for adding the necessary structure to the internal
entity list.

*** New module to create Gantt charts

Christian Egli's /org-taskjuggler.el/ module is now part of Org.
He also wrote a [[https://orgmode.org/worg/org-tutorials/org-taskjuggler.html][tutorial]] for it.

*** Refile targets can now be cached

You can turn on caching of refile targets by setting the variable
=org-refile-use-cache=.  This should speed up refiling if you
have many eligible targets in many files.  If you need to update
the cache because Org misses a newly created entry or still
offers a deleted one, press =C-0 C-c C-w=.

*** Enhanced functionality of the clock resolver

Here are the new options for the clock resolver:

: i/q/C-g  Ignore this question; the same as keeping all the idle time.
:
: k/K      Keep X minutes of the idle time (default is all).  If this
:          amount is less than the default, you will be clocked out
:          that many minutes after the time that idling began, and then
:          clocked back in at the present time.
: g/G      Indicate that you \"got back\" X minutes ago.  This is quite
:          different from 'k': it clocks you out from the beginning of
:          the idle period and clock you back in X minutes ago.
: s/S      Subtract the idle time from the current clock.  This is the
:          same as keeping 0 minutes.
: C        Cancel the open timer altogether.  It will be as though you
:          never clocked in.
: j/J      Jump to the current clock, to make manual adjustments.

For all these options, using uppercase makes your final state
to be CLOCKED OUT.  Thanks to John Wiegley for making these
changes.

*** A property value of "nil" now means to unset a property

This can be useful in particular with property inheritance, if
some upper level has the property, and some grandchild of it
would like to have the default settings (i.e. not overruled by a
property) back.

Thanks to Robert Goldman and Bernt Hansen for suggesting this
change.

*** The problem with comment syntax has finally been fixed

Thanks to Leo who has been on a year-long quest to get this fixed
and finally found the right way to do it.

*** Make it possible to protect hidden subtrees from being killed by =C-k=

This was a request by Scott Otterson.
See the new variable =org-ctrl-k-protect-subtree=.

*** New module org-mac-link-grabber.el

This module allows to grab links to all kinds of applications on
a mac.  It is available in the contrib directory.

Thanks to Anthony Lander for this contribution.

*** LaTeX export: Implement table* environment for wide tables

Thanks to Chris Gray for a patch to this effect.

*** When cloning entries, remove or renew ID property

Thanks to David Maus for this change.

* Version 6.36

 :PROPERTIES:
 :CUSTOM_ID: v6.36
 :END:

** Details
*** Inline display of linked images

Images can now be displayed inline.  The key C-c C-x C-v does
toggle the display of such images.  Note that only image links
that have no description part will be inlined.

*** Implement offsets for ordered lists

If you want to start an ordered plain list with a number
different from 1, you can now do it like this:

: 1. [@start:12] will star a lit a number 12

*** Extensions to storing and opening links to Wanderlust messages

- Remove filter conditions for messages in a filter folder

  If customization variable `org-wl-link-remove-filter' is non-nil,
  filter conditions are stripped of the folder name.

- Create web links for messages in a Shimbun folder

  If customization variable `org-wl-shimbun-prefer-web-links' is
  non-nil, calling `org-store-link' on a Shimbun message creates a
  web link to the messages source, indicated in the Xref: header
  field.

- Create web links for messages in a nntp folder

  If customization variable `org-wl-nntp-prefer-web-links' is
  non-nil, calling `org-store-link' on a nntp message creates a web
  link either to gmane.org if the group can be read trough gmane or
  to googlegroups otherwise. In both cases the message-id is used as
  reference.

- Open links in namazu search folder

  If `org-wl-open' is called with one prefix, WL opens a namazu
  search folder for message's message-id using
  `org-wl-namazu-default-index' as search index.  If this variable is
  nil or `org-wl-open' is called with two prefixes Org asks for the
  search index to use.

Thanks to David Maus for these changes.

*** Org-babel: code block body expansion for table and preview

In org-babel, code is "expanded" prior to evaluation. I.e. the
code that is actually evaluated comprises the code block
contents, augmented with the extra code which assigns the
referenced data to variables. It is now possible to preview
expanded contents, and also to expand code during during
tangling. This expansion takes into account all header arguments,
and variables.

A new key-binding C-c M-b p bound to
`org-babel-expand-src-block' can be used from inside of a
source code block to preview its expanded contents (which can
be very useful for debugging).  tangling

The expanded body can now be tangled, this includes variable
values which may be the results of other source-code blocks, or
stored in headline properties or tables. One possible use for
this is to allow those using org-babel for their emacs
initialization to store values (e.g. usernames, passwords,
etc…) in headline properties or in tables.

Org-babel now supports three new header arguments, and new
default behavior for handling horizontal lines in tables
(hlines), column names, and rownames across all languages.

* Version 6.35
 :PROPERTIES:
 :CUSTOM_ID: v6.35
 :END:

** Incompatible Changes

*** Changes to the intended use of =org-export-latex-classes=

So far this variable has been used to specify the complete header
of the LaTeX document, including all the =\usepackage= calls
necessary for the document.  This setup makes it difficult to
maintain the list of packages that Org itself would like to call,
for example for the special symbol support it needs.  Each time I
have to add a package, I have to ask people to revise the
configuration of this variable.  In this release, I have tried to
fix this.

First of all, you can *opt out of this change* in the following
way: You can say: /I want to have full control over headers, and
I will take responsibility to include the packages Org needs/.
If that is what you want, add this to your configuration and skip
the rest of this section (except maybe for the description of the
=[EXTRA]= place holder):

#+begin_src emacs-lisp
  (setq org-export-latex-default-packages-alist nil
        org-export-latex-packages-alist nil)
#+end_src

/Continue to read here if you want to go along with the modified
setup./

There are now two variables that should be used to list the LaTeX
packages that need to be included in all classes.  The header
definition in =org-export-latex-classes= should then not contain
the corresponding =\usepackage= calls (see below).

The two new variables are:

1. =org-export-latex-default-packages-alist= :: This is the
     variable where Org mode itself puts the packages it needs.
     Normally you should not change this variable.  The only
     reason to change it anyway is when one of these packages
     causes a conflict with another package you want to use.
     Then you can remove that packages and hope that you are not
     using Org mode functionality that needs it.

2. =org-export-latex-packages-alist= :: This is the variable
     where you can put the packages that you'd like to use across
     all classes.  For example, I am putting =amsmath= and =tikz=
     here, because I always want to have them.

The sequence how these customizations will show up in the LaTeX
document are:
1. Header from =org-export-latex-classes=
2. =org-export-latex-default-packages-alist=
3. =org-export-latex-packages-alist=
4. Buffer-specific things set with =#+LaTeX_HEADER:=

If you want more control about which segment is placed where, or
if you want, for a specific class, have full control over the
header and exclude some of the automatic building blocks, you can
put the following macro-like place holders into the header:

#+begin_example
[DEFAULT-PACKAGES]      \usepackage statements for default packages
[NO-DEFAULT-PACKAGES]   do not include any of the default packages
[PACKAGES]              \usepackage statements for packages
[NO-PACKAGES]           do not include the packages
[EXTRA]                 the stuff from #+LaTeX_HEADER
[NO-EXTRA]              do not include #+LaTeX_HEADER stuff
#+end_example

If you have currently customized =org-export-latex-classes=, you
should revise that customization and remove any package calls that
are covered by =org-export-latex-default-packages-alist=.  This
applies to the following packages:

- inputenc
- fontenc
- fixltx2e
- graphicx
- longtable
- float
- wrapfig
- soul
- t1enc
- textcomp
- marvosym
- wasysym
- latexsym
- amssymb
- hyperref

If one of these packages creates a conflict with another package
you are using, you can remove it from
=org-export-latex-default-packages-alist=.  But then you risk
that some of the advertised export features of Org will not work
properly.

You can also consider moving packages that you use in all classes
to =org-export-latex-packages-alist=.  If necessary, put the
place holders so that the packages get loaded in the right
sequence.  As said above, for backward compatibility, if you omit
the place holders, all the variables will dump their content at
the end of the header.

Damn, this has become more complex than I wanted it to be.  I
hope that in practice, this will not be complicated at all.

*** The constant =org-html-entities= is obsolete

Its content is now part of the new constant =org-entities=, which
is defined in the file org-entities.el.  =org-html-entities= was
an internal variable, but it is possible that some users did
write code using it - this is why I am mentioning it here.

** Editing Convenience and Appearance

*** New faces for title, date, author and email address lines.

The keywords in these lines are now dimmed out, and the title is
displayed in a larger font, and a special font is also used for
author, date, and email information.  This is implemented by the
following new faces:

org-document-title
org-document-info
org-document-info-keyword

In addition, the variable =org-hidden-keywords= can be used to
make the corresponding keywords disappear.

Thanks to Dan Davison for this feature.

*** Simpler way to specify faces for tags and todo keywords

The variables =org-todo-keyword-faces=, =org-tag-faces=, and
=org-priority-faces= now accept simple color names as
specifications.  The colors will be used as either foreground or
background color for the corresponding keyword.  See also the
variable =org-faces-easy-properties=, which governs which face
property is affected by this setting.

This is really a great simplification for setting keyword faces.
The change is based on an idea and patch by Ryan Thompson.

*** <N> in tables now means fixed width, not maximum width

Requested by Michael Brand.

*** Better level cycling function

=TAB= in an empty headline cycles the level of that headline
through likely states.  Ryan Thompson implemented an improved
version of this function, which does not depend upon when exactly
this command is used.  Thanks to Ryan for this improvement.

*** Adaptive filling

For paragraph text, =org-adaptive-fill-function= did not handle the
base case of regular text which needed to be filled.  This is now
fixed.  Among other things, it allows email-style ">" comments
to be filled correctly.

Thanks to Dan Hackney for this patch.

*** `org-reveal' (=C-c C-r=) also decrypts encrypted entries (org-crypt.el)

Thanks to Richard Riley for triggering this change.

*** Better automatic letter selection for TODO keywords

When all first letters of keywords have been used, Org now assigns
more meaningful characters based on the keywords.

Thanks to Mikael Fornius for this patch.

** Export

*** Much better handling of entities for LaTeX export

Special entities like =\therefore= and =\alpha= now know if
they need to be in LaTeX math mode and are formatted accordingly.

Thanks to Ulf Stegemann for the tedious work to make this
possible.

*** LaTeX export: Set coding system automatically

The coding system of the LaTeX class will now be set to the value
corresponding to the buffer's file coding system.  This happens
if your setup sets up the file to have a line
=\usepackage[AUTO]{inputenc}= (the default setup does this).

*** New exporters to Latin-1 and UTF-8

While Ulf Stegemann was going through the entities list to
improve the LaTeX export, he had the great idea to provide
representations for many of the entities in Latin-1, and for all
of them in UTF-8.  This means that we can now export files rich
in special symbols to Latin-1 and to UTF-8 files.  These new
exporters can be reached with the commands =C-c C-e n= and =C-c
C-e u=, respectively.

When there is no representation for a given symbol in the
targeted coding system, you can choose to keep the TeX-macro-like
representation, or to get an "explanatory" representation.  For
example, =\simeq= could be represented as "[approx. equal to]".
Please use the variable =org-entities-ascii-explanatory= to state
your preference.

*** Full label/reference support in HTML, Docbook, and LaTeX backends

=#+LABEL= definitions for tables and figures are now fully
implemented in the LaTeX, Docbook, and HTML interfaces.
=\ref{xxx}= is expanded to a valid link in all backends.

*** BEAMER export: Title of the outline frame is now customizable

The new option =org-outline-frame-title= allows to set the
title for outline frames in Beamer presentations.

Patch by Łukasz Stelmach.

*** BEAMER export: fragile frames are better recognized

A =lstlisting= environment now also triggers the fragile option in
a beamer frame, just like =verbatim= environments do.

Thanks to Eric Schulte for this patch.

*** BEAMER export: Protect <...> macro arguments

Macros for the BEAMER package can have arguments in angular
brackets.  These are now protected just like normal arguments.

Requested by Bill Jackson.

*** HTML export: Add class to outline containers using property

The =HTML_CONTAINER_CLASS= property can now be used to add a
class name to the outline container of a node in HTML export.

*** New option =org-export-email-info= to turn off export of the email address

Default is actually off now.

*** Throw an error when creating an image from a LaTeX snippet fails

This behavior can be configured with the new option variable
=org-format-latex-signal-error=.

** Index generation

Org mode can now produce a 2-level subject index spanning an
entire publishing project.  Write index entries in your files as

#+begin_src org
  ,* What is org-mode?
  ,#+index: Org mode
  ,#+index: Definitions!Org mode
#+end_src

where the first line will produce an index entry /Org mode/,
while the second line will create /Definitions/ with a sub-item
/Org mode/.  Three-level entries are not supported.

To produce the index, set

#+begin_src emacs-lisp
:makeindex t
#+end_src

in the project definition in =org-publish-project-alist=.  You
may have to force re-export of all files to get the index by
using a =C-u= prefix to the publishing command:

#+begin_example
C-u M-x org-publish-all
#+end_example

Whenever an Org file is published in this project, a new file
with the extension "orgx" will be written.  It contains the index
entries and corresponding jump target names.  When all project
files are published, Org will produce a new file "theindex.inc"
containing the index as a to-level tree.  This file can be
included into any project file using

#+begin_src org
  ,#+include: "theindex.inc"
#+end_src

Org mode will also create a file "theindex.org" with this include
statement, and you can build a more complex structure (for
example style definitions, top and home links, etc) around this
statement.  When this file already exists, it will not be
overwritten by Org.

Thanks to Stefan Vollmar for initiating and driving this feature.

*** TODO Still need to do the LaTeX portion

** MobileOrg

*** Encrypting stage files for MobileOrg

Since the use of (often pubic) servers is needed for MobileOrg,
it is now possible to encrypt the files to be staged for
MobileOrg.  Version 1.2 of MobileOrg will be needed for this
feature, and Richard Moreland will show instructions on his
website once that is available.  Basically, on the Org-side this
will require the following settings:

#+begin_src emacs-lisp
  (setq org-mobile-use-encryption t
        org-mobile-encryption-password "My_MobileOrg_Password")
#+end_src

So the password will be visible in your local setup, but since
the encryption is only for the public server, this seems
acceptable.

** Agenda

*** Specify entry types as an option

Custom Agenda commands can now limit the sets of entry types
considered for this command by binding =org-agenda-entry-types=
temporarily in the options section of the command.  This can lead to
significant speedups, because instead of laboriously finding entries
and then rejecting them, a whole search cycle is skipped.  For more
information see this [[https://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html#orgf395e43][worg page]].

Thanks to Matt Lundin for this feature.

*** Speed up multiple calls to org-diary by only doing buffer prep once

Also a patch by Matt Lundin.

*** Show and hide deadlines in the agenda

You can now hide all deadline entries in the agenda by pressing
=!=.

Thanks to John Wiegley for this feature.

*** Agenda: Allow to suppress deadline warnings for entries also scheduled

The the docstring of the variable
=org-agenda-skip-deadline-prewarning-if-scheduled=.

*** Expand file names in org-agenda-files (external file case)

If you are using a file to manage the list of agenda files, the
names in this file can now contain environment variables and "~"
to write them more compactly and portable.

Thanks to Mikael Fornius for a patch to this effect.

*** Agenda: Allow TODO conditions in the skip functions

The agenda skip function has now special support for skipping
based on the TODO state.  Here are just two examples, see the
manual for more information.

#+begin_src emacs-lisp
(org-agenda-skip-entry-if 'todo '(\"TODO\" \"WAITING\"))
(org-agenda-skip-entry-if 'nottodo 'done)
#+end_src

Thanks to Łukasz Stelmach for this patch.

*** Extracting the time-of-day when adding diary entries

The time of day can now be extracted from new diary entries made
from the agenda with (for example) =i d=.  When
=org-agenda-insert-diary-extract-time= is set, this is done, and
the time is moved into the time stamp.

Thanks to Stephen Eglen for this feature.

*** The customization group org-font-lock has been renamed

The new name is `org-appearance'.

Thanks to Dan Davison for a patch to this effect.

*** The TODO list: Allow skipping scheduled or deadlined entries

Skipping TODO entries in the global TODO list based on whether
they are scheduled or have a deadline can now be controlled in
more detail.  Please see the docstrings of
=org-agenda-todo-ignore-scheduled= and
=org-agenda-todo-ignore-deadline=.

Thanks to Łukasz Stelmach for patches to this effect.

** Hyperlinks

*** Make =org-store-link= point to directory in a dired buffer

When, in a dired buffer, the cursor is not in a line listing a
file, `org-store-link' will store a link to the directory.

Patch by Stephen Eglen.

*** Allow regexps in =org-file-apps= to capture link parameters

The way extension regexps in =org-file-apps= are handled has
changed.  Instead of matching against the file name, the regexps
are now matched against the whole link, and you can use grouping
to extract link parameters which you can then use in a command
string to be executed.

For example, to allow linking to PDF files using the syntax
=file:/doc.pdf::<page number>=, you can add the following entry to
org-file-apps:

#+begin_example
Extension: \.pdf::\([0-9]+\)\'
Command:   evince "%s" -p %1
#+end_example

Thanks to Jan Böcker for a patch to this effect.

** Clocking

*** Show clock overruns in mode line

When clocking an item with a planned effort, overrunning the
planned time is now made visible in the mode line, for example
using the new face =org-mode-line-clock-overrun=, or by adding an
extra string given by =org-task-overrun-text=.

Thanks to Richard Riley for a patch to this effect.

** Tables

*** Repair the broken support for table.el tables again.

Tables created with the table.el package now finally work again
in Org mode.  While you cannot edit the table directly in the
buffer, you can use  =C-c '= to edit it nicely in a temporary
buffer.

Export of these tables to HTML seem to work without problems.
Export to LaTeX is imperfect.  If fails if the table contains
special characters that will be replaced by the exporter before
formatting the table.  The replacement operation changes the
length of some lines, breaking the alignment of the table fields.
Unfortunately this is not easy to fix.  It is also not an option
to not do these replacements.  The table.el LaTeX exporter will
for example not escape "&" in table fields, causing the exported
tables to be broken.

** Misc

*** New logging support for refiling

Whenever you refile an item, a time stamp and even a note can be
added to this entry.  For details, see the new option
=org-log-refile=.

Thanks to Charles Cave for this idea.

*** New helper functions in org-table.el

There are new functions to access and write to a specific table
field.  This is for hackers, and maybe for the org-babel people.

#+begin_example
org-table-get
org-table-put
org-table-current-line
org-table-goto-line
#+end_example

*** Tables: Field coordinates for formulas, and improved docs

Calc and Emacs-Lisp formulas for tables can access the current
field coordinates with =@#= and =$#= for row and column,
respectively.  These can be useful in some formulas.  For
example, to sequentially number the fields in a column, use
~=@#~ as column equation.

One application is to copy a column from a different table.  See
the manual for details.

Thanks to Michael Brand for this feature.

*** Archiving: Allow to reverse order in target node

The new option =org-archive-reversed-order= allows to have
archived entries inserted in a last-on-top fashion in the target
node.

Requested by Tom.

*** Better documentation on calc accuracy in tables

Thanks to Michael Brand for this fix.

*** Clock reports can now include the running, incomplete clock

If you have a clock running, and the entry being clocked falls
into the scope when creating a clock table, the time so far spent
can be added to the total.  This behavior depends on the setting
of =org-clock-report-include-clocking-task=.  The default is
=nil=.

Thanks to Bernt Hansen for this useful addition.

*** American-style dates are now understood by =org-read-date=

So when you are prompted for a date, you can now answer like this

#+begin_example
2/5/3         --> 2003-02-05
2/5           --> <CURRENT-YEAR>-02-05
#+end_example

*** org-timer.el now allows just one timer

There is now only a single free timer supported by org-timer.el.
Thanks to Bastien for cleaning this up, after a bug report in
this area by Frédéric Couchet.

*** Remember: Allow to file as sibling of current clock

=C-3 C-c C-c= will file the remember entry as a sibling of the
last filed entry.

Patch by Łukasz Stelmach.

*** Org-reveal: Double prefix arg shows the entire subtree of the parent

This can help to get out of an inconsistent state produced for
example by viewing from the agenda.

This was a request by Matt Lundin.

*** Add org-secretary.el by Juan Reyero to the contrib directory

org-secretary.el is a possible setup for group work using
Org mode.

Thanks to Juan Reyero for this contribution.

** Babel

Eric and Dan have compiled the following list of changes in and
around org-babel.

- Added support for Matlab and Octave.
- Added support for C and C++ code blocks.
- Added support for the Oz programming language.
  Thanks to Torsten Anders for this contribution
- Can now force literal interpretation of table cell contents
  with extra "$" in table formula.
  Thanks to Maurizio Vitale for this suggestion.
- Variable references which look like lisp forms are now
  evaluated.
- No longer adding extension during tangling when filename is
  provided.
  Thanks to Martin G. Skjæveland and Nicolas Girard for prompting this.
- Added `org-babel-execute-hook' which runs after code block
  execution.
- Working directories and remote execution

  This introduces a new header argument :dir. For the duration of
  source block execution, default-directory is set to the value
  of this header argument. Consequences include:

  - external interpreter processes run in that directory
  - new session processes run in that directory (but existing
    ones are unaffected)
  - relative paths for file output are relative to that directory

  The name of a directory on a remote machine may be specified
  with tramp syntax (/user@host:path), in which case the
  interpreter executable will be sought in tramp-remote-path, and
  if found will execute on the remote machine in the specified
  remote directory.
- Tramp syntax can be used to tangle to remote files.
  Thanks to Maurizio Vitale and Rémi Vanicat.
- org-R removed from contrib.
- gnuplot can now return it's string output -- when session is
  set to "none".
- Now including source code block arguments w/source name on
  export.
- Now able to reference file links as results.
- Allow pdf/png generation directly from latex source blocks
  with :file header argument.

* Version 6.34
 :PROPERTIES:
 :CUSTOM_ID: v6.34
 :END:

** Incompatible changes

*** Tags in org-agenda-auto-exclude-function must be lower case.

When defining an =org-agenda-auto-exclude-function=, you need to
be aware that tag that is being passed into the function is
always lower case - even if it was defined in upper case
originally.

** Details

*** Support for creating BEAMER presentations from Org mode documents

Org mode documents or subtrees can now be converted directly in to
BEAMER presentation.  Turning a tree into a simple presentations is
straight forward, and there is also quite some support to make richer
presentations as well.  See the [[https://orgmode.org/manual/Beamer-Export.html][BEAMER section]] in the manual for more
details.

Thanks to everyone who has contributed to the discussion about BEAMER
support and how it should work.  This was a great example for how this
community can achieve a much better result than any individual could.

*** Hyperlinks

**** Add Paul Sexton's org-ctags.el

Targets like =<<my target>>= can now be found by Emacs' etag
functionality, and Org mode links can be used to to link to etags,
also in non-Org mode files.  For details, see the file /org-ctags.el/.

This feature uses a new hook =org-open-link-functions= which will call
function to do something special with text links.

Thanks to Paul Sexton for this contribution.

**** Add Jan Böcker's org-docview.el

This new module allows links to various file types using docview,
where Emacs displays images of document pages.  Docview link
types can point to a specific page in a document, for example to
page 131 of the Org mode manual:

: [[docview:~/.elisp/org/doc/org.pdf::131][Org mode Manual]]

Thanks to Jan Böcker for this contribution.

**** New link types that force special ways of opening the file

- =file+sys:/path/to/file=  will use the system to open the file,
  like double-clicking would.
- file+emacs:/path/to/file will force opening the linked file
  with Emacs.

This was a request by John Wiegley.

**** Open all links in a node

When using =C-c C-o= on a headline to get a list of links in the
entry, pressing =RET= will open *all* links.  This allows
something like projects to be defined, with a number of files
that have to be opened by different applications.

This was a request by John Wiegley.

*** Agenda Views

**** Improve the logic of the search view.

The logic of search views is changed a bit.  See the docstring of
the function =or-search-view=.

These changes resulted from a discussion with Matt Lundin.

**** New face for entries from the Emacs diary

Entries that enter the Agenda through the Emacs diary now get the
face =org-agenda-diary=.

This was a request by Thierry Volpiatto.

**** New function `org-diary-class' to schedule classes with skipped weeks.

This was a request by Daniel Martins.

**** Empty matcher means prompt in agenda custom commands

When an agenda custom command has an empty string as MATCH
element, so far this would lead to a meaningless search using an
empty matcher.  Now an empty (or white) string will be
interpreted just like a nil matcher, i.e. the user will be
prompted for the match.

**** Agenda: Selectively remove some tags from agenda display

If you use tags very extensively, you might want to exclude some
from being displayed in the agenda, in order to keep the display
compact.  See the new option =org-agenda-hide-tags-regexp= for
details.

This was largely a patch by Martin Pohlack.

*** Export

**** Direct export of only the current subtree

Pressing =1= after =C-c C-e= and before the key that selects the
export backend, only the current subtree will be exported,
exactly as it you had selected it first with =C-c @=.  So for
example, =C-c C-e 1 b= will export the current subtree to HTML
and open the result in the browser.

**** Direct export of enclosing node

Pressing =SPC= after =C-c C-e= and before the key that selects
the export backend, the enclosing subree that is set up for
subtree export will be exported, exactly as it you had selected
it first with =C-c @=.  So for example, =C-c C-e SPC d= will find
the enclosing node with a LaTeX_CLASS property or an
EXPORT_FILE_NAME property and export that.

**** Caching export images

Images that are created for example using LaTeX or ditaa for
inclusion into exported files are now cached.  This works by
adding a hash to the image name, that reflects the source code
and all relevant settings.  So as long as the hash does not
change, the image does not have to be made again.  His can lead
to a substantial reduction in export/publishing times.

Thanks to Eric Schulte for a patch to this effect.

**** Preserving line breaks for export no longer works

ASCII export always preserves them - no other export format
does.  We had attempted to use =\obeylines= for this in LaTeX,
but that does create too many problems.

**** New symbols =\EUR= and =\checkmark=

=\EUR= symbols from Marvosym package, and =\checkmark= are now
supported symbols in Org mode, i.e. they will be exported
properly to the various backends.

**** Allow LaTeX_CLASS_OPTIONS to set options, also from a property

You can set the options to the =\documentclass= command on a
per-file basis, using

: #+LaTeX_CLASS_OPTIONS: [11pt]

or on a per-tree basis using the corresponding property.  The
defined string will replace the default options entirely.

**** The encoding of LaTeX files is now handled property

Org now makes sure that the encoding used by the file created
through the export mechanism is reflected correctly in the

: \usepackage[CODINGSYSTEM]{inputenc}

command.  So as long as the =org-export-latex-classes= definition
contains an =\usepackage[utf8]{inputenc}= statement, that
statement will be modified so that the correct option is used.

If you wan to use special encodings, for example =utf8x= instead
of =utf8=, see the variable =org-export-latex-inputenc-alist=.

This was a request by Francesco Pizzolante.

*** Property API enhancements

**** Make a new special property BLOCKED, indicating if entry is blocked

A new special property BLOCKED returns "t" when the entry is
blocked from switching the TODO state to a DONE state.

This was a request by John Wiegley.

**** New hooks for external support for allowed property values

It is now possible to hook into Org in order to provide the
allowed values for any property with a lisp function.  See the
docstring of the variable =org-property-allowed-value-functions=

**** Allow unrestricted completion on properties

When listing the allowed values for a property, for example with
a =:name_ALL:= property, completion on these values enforces that
one of the values will be chosen.  Now, if you add ":ETC" to the
list of allowed values, it will be interpreted as a switch, and
the completion will be non-restrictive, so you can also choose to
type a new value.

*** Changes to Org-babel

- The documentation for Org-babel has been drastically improved
  and is available on Worg at
  https://orgmode.org/worg/org-contrib/babel/
- Source-code block names are now exported to HTML and LaTeX
- Org-babel functions are now bound to keys behind a common key
  prefix (see https://orgmode.org/manual/Working-with-source-code.html)
- Results are now foldable with TAB
- Header argument values can now be lisp forms
- Readable aliases for #+srcname: and #+resname:
- Sha1 hash based caching of results in buffer
- Can now index into variable values
- org-babel-clojure now supports multiple named sessions

*** Miscellaneous changes

**** Make =C-c r C= customize remember templates

=C-c r C= is now a shortcut for

:  M-x customize-variable RET org-remember-templates RET

This was a proposal by Adam Spiers.

**** Use John Gruber's regular expression for URL's

We now use a better regexp to spot plain links in text.  This
regexp is adopted from [[http://daringfireball.net/2009/11/liberal_regex_for_matching_urls][John Gruber's blogpost]].

Thanks to William Henney for the pointer.

**** Implement tag completion of all tags in all agenda files

The new option =org-complete-tags-always-offer-all-agenda-tags=
makes Org complete all tags from all agenda files if non-nil.
Usually, setting it locally to t in org-remember buffers is the
most useful application of this new feature.

Thanks to Tassilo Horn for a patch to this effect.

* Version 6.33
 :PROPERTIES:
 :CUSTOM_ID: v6.33
 :END:

** Incompatible changes

*** Reorganize key bindings for archiving

The following keys now do archiving

- C-c C-x C-a :: archive using the command specified in
     =org-archive-default-command=.  This variable is by default
     set to =org-archive-subtree=, which means arching to the
     archive file.

The three specific archiving commands are available through

- C-c C-x C-s ::    archive to archive file
- C-c C-x a ::     toggle the archive tag
- C-c C-x A ::   move to archive sibling

These bindings work the same in an Org file, and in the agenda.

In addition:

- In the agenda you can also use =a= to call the default archiving
  command, but you need to confirm the command with =y= so that this
  cannot easily happen by accident.

- For backward compatibility, =C-c $= in an org-mode file, and
  =$= in the agenda buffer continue to archive to archive file.


** Details

*** Level indentation cycling new empty entries and plain list items
:PROPERTIES:
:ID: 1CBF16C9-031C-4A03-A5EE-09B6AAB6209C
:END:

To speed up data entry, TAB now behaves special in an empty
headline, i.e. if the current line only contains the headline
starter stars, maybe a TOD keyword, but no further content.  This
is usually the situation just after creating a new headline with
=M-RET= or =M-S-RET=.

Then, TAB will first make the current entry a child of the
entry above, then a parent, then a grand parent etc until it
reaches top level.  Yet another TAB and you will be back at the
initial level at which the headline was created.

New plain list items behave in just the same way.

Sounds strange?  Try it, it is insanely fast when entering data.
If you still don't like it, turn it off by customizing
=org-cycle-level-after-item/entry-creation=.

Thanks to [[https://list.orgmode.org/20524da70910071107s55fff3ecj4d92f2bc9511b970@mail.gmail.com][Samuel Wales]] and [[https://list.orgmode.org/F423AE52-4791-478E-AE96-5B80B088FF30@gmail.com][John Wiegley]] for ideas that
contributed to this new feature.

*** Speed commands at the start of a headline

If you set the variable =org-use-speed-commands=, the cursor
position at the beginning of a headline (i.e. before the first
star) becomes special.  Single keys execute special commands in
this place, for example outline navigation with =f=, =b=, =n=,
and =p=, equivalent to the corresponding =C-c C-f=, =C-c C-b=,
=C-c C-n=, and =C-c C-f= commands.  The full list of commands can
be seen by pressing =?= at the special location.  More commands
can be added and existing ones modified by configuring the
variable =org-speed-commands-user=.

This was a request by John Wiegley, based on similar speed
navigation in /allout.el/.

*** Logging changes in scheduling and deadline time stamps

Setting the variables =org-log-reschedule= and
=org-log-redeadline= to either =time= or =note= will arrange for
recording a logbook entry whenever a scheduling date or deadline
is changed.

This was a request by Rick Moynihan.

*** File remember notes into a date tree

Remember notes can now be filed to a location in a date tree.  A
date tree is an outline tree with years as top levels, months as
level 2 headings, and days as level three headings.  These are
great for journals and for recording appointments and other loose
dates because it will be easy to find all entries referencing a
particular date, and it will be easy to archive all such entry
from last year, for example.

To select date tree filing, set the HEADLINE part of the remember
template to the symbol =date-tree=.  The date tree will be build
in the file on top level.  However, if the file contains an entry
with a non-nil =DATE_TREE= property, then the tree will be build
under that headline.

*** New commands to create entries from agenda and calendar

If you make the variable =org-agenda-diary-file= point to an
org-mode file, the =i= key in both the agenda buffer and in the
Emacs calendar will be made to insert entries into that Org file.
The dates at the cursor and the mark are being used when making
entries for specific dates or blocks.  In the new file,
anniversaries will be collected under a special headline, and
day/block entries will be filed into a date tree (see previous
section).

This was a request by Stephen Eglen.

*** A new freemind exporter has been integrated with Org mode

org-freemind.el has a number of entry points (for details, see
the source code), but you can also use Org's =C-c C-e m= to
export a file or a selected subtree.

Thanks to Lennart Borgman for this contribution.  An earlier
version of this file was part of the nxhtml package, under the
name /freemind.el/.

*** Drawers are now exported properly

Drawers are now exported when the configuration requires it,
i.e. if the variable `org-export-with-drawers' is t or a list
containing the drawers to export.

*** Min/Max/Mean age operators in Column View.

This lets you see how much time has passed since the specified
timestamp property each entry. The three operators (=@min=,
=@max=, =@mean=) show either the age of the youngest or oldest
entry or the average age of the children.

Thanks to James TD Smith for a patch to this effect.

*** Allow source code block indentation to be preserved

If =org-src-preserve-indentation= is non-nil, or if a block has a
=-i= switch, then the behavior of org-exp-blocks is altered as
follows:

1. Indentation is not removed before passing the block contents
   to the block-transforming plugin.

2. The result returned by the plugin is not re-indented.

3. Editing the source code block with =C-c '= preserves it's
   indentation.

Thanks to Dan Davison for this feature.

*** Frame/window control when switching to source code edit buffer.

When switching to a source code editing buffer with =C-c '=, you
can now control the frame / window setup using the new variable
=org-src-window-setup=.

Thanks to Dan Davison for this feature.

*** Refile an entry to the current clock

You can now quickly refile an entry to become a child of the
entry currently being clocked.  The keys for doing this are
=C-2 C-c C-w=.

This was a request by Bernt Hansen.

*** Make =C-c C-o= open the attachment directory is there are no links

If there is no link in an entry, =C-c C-o= will now open the
attachment directory instead.

This was a request/patch by John Wiegley.

*** org-mac-iCal.el: work with calendar "groups"

Some calendar systems (Google, Zimbra) handle subscriptions to
multiple calendars (or to an account) by grouping them under a
single caldav directory in the calendar tree.  org-mac-iCal used
to assumes there is only one ics file created per caldav
directory, so while it *creates* all of the needed merged ics
files, it only copies one of them to ~/Library/Calendar before
importing the contents into the diary.

Thanks to Doug Hellmann for a patch to fix this.

*** New module /org-learn.el/ in the contrib directory

The file implements the learning algorithm described at
http://supermemo.com/english/ol/sm5.htm, which is a system for reading
material according to "spaced repetition".  See
http://en.wikipedia.org/wiki/Spaced_repetition for more details.

Thanks to John Wiegley for this contribution.

*** New contributed package /org-git-link.el/

/org-git-link.el/ defines two new link types. The =git= link type
is meant to be used in the typical scenario and mimics the =file=
link syntax as closely as possible.  The =gitbare= link type
exists mostly for debugging reasons, but also allows e.g.
linking to files in a bare git repository for the experts.

Thanks to Raimar Finken for this contribution.

*** /org-annotation-helper.el/ and /org-browser-url.e./ have been removed
Please switch to /org-protocol.el/, into which contains the same
functionality in a more general framework.
*** The contributed /org-export-freemind/ package has been removed.
Org now contains a new freemind exporter, /org-freemind.el/.

** Org-babel Changes
- Clojure is supported [Thanks to Joel Boehland]
- Perl is supported
- Ruby and Python now respond to the :file header argument
- Added :results_switches header argument for passing switches
  through to raw src blocks
- Preserve indentation in source blocks on export and tangle
- Possible to evaluate noweb reference on tangling or code block
  evaluation
- Allowing multiple noweb references on a single line
- Cleaned up the passing of parameter values from Org-babel to
  language specific functions

* Version 6.32
 :PROPERTIES:
 :CUSTOM_ID: v6.32
 :END:

** Rewrite of org-mobile.org, for MobileOrg 1.0 (build 20)

MobileOrg is currently under review at the iPhone App Store.  You
will need Org mode version 6.32 to interact with it.

** Added support for habit consistency tracking

/org-habit.el/ contains new code to track habits.  Please
configure the variable org-modules to activate it.  When active,
habits (a special TODO entry) will be displayed in the agenda
together with a "consistency graph".  Habit tracking is described
in a new [[https://orgmode.org/manual/Tracking-your-habits.html][manual section]].

Thanks to John Wiegley for this contribution.

** New context-aware tag auto-exclusion

After writing a function relating to location and context
information, you will be able to press =/ RET= in the agenda to
exclude tasks that cannot be done in the current context.
For details, see the information about filtering in the manual.

Thanks to John Wiegley for a patch to this effect.

** New clock resolving tools

When clocking into a new task while no clock is running, Org now
checks for orphaned CLOCK lines and offers to repair these before
starting the clock.  You can also configure this feature to check
for idle time and prompt you to subtract that time from the
running timer.

See the new [[https://orgmode.org/manual/Resolving-idle-time.html][manual section]] for more details.

Thanks to John Wiegley for a patch to this effect.

** Mutually exclusive tag groups can now have a name in the tags interface

The customize interface allows to optionally add a string to the
beginning or end of such a group.

Thanks to James TD Smith for a patch to this effect.

** Agenda Search view: Search for substrings

The default in search view (/C-c a s/)is now that the search
expression is searched for as a /substring/, i.e. the different
words must occur in direct sequence, and it may be only part of
a word.  If you want to look for a number of separate keywords
with Boolean logic, all words must be preceded by =+= or =-=.

This was, more-or-less, requested by John Wiegley.

** Make space and backspace scroll the show window in the agenda

Pressing SPC again after using it to show an agenda item in
another window will make the entire subtree visible, and show
scroll it.  Backspace and DEL will scroll back.

This was a request by Eric Fraga.

** File tags are now offered for completion during a tag prompts

Requested by Matt Lundin.

** Make `- SPC' an agenda filter that selects entries without any tags

Request by John Wiegley.

** Better way to edit multi-line macro definitions

The editing tool key =C-c '= now also edits =#+MACRO=
definitions, including multiline macros.

** Restructured Manual

The manual has been slightly reorganized.  The archiving stuff,
which was - somewhat obscurely - hidden in the /Document
Structure/ chapter, has been moved into the new chapter
/Capture-Refile-Archive/.  Also, there is a new chapter /Markup/
which contains both the markup rules (moved there from the Export
chapter) and the documentation for embedded LaTeX.

** Improved figure placement in LaTeX and HTML export

Text can now be wrapped around figures.  See the manual for
details.

** Allow date to be shifted into the future if time given is earlier than now

By setting

:     (setq org-read-date-prefer-future 'time)

you indicate to Org that, if you only give a time at the
date/time prompt, and if this time is earlier then the current
time, then the date of tomorrow will be assumed to be valid for
this event.  A similar mechanism was already in place for dates,
but now you can make it work for times as well.

** Collected changes in org-babel
- Source blocks can now reference source-blocks in other files
  using =filepath:srcname= syntax.
- Inline code blocks like =src_python{2+2}= are now exported
- Remote source block calls using the =#+lob: srcname(arg=val)=
  syntax can now be exported.
- When =:file= is supplied with an =R= block, graphics are
  automatically sent to file and linked from the org buffer, thus
  appearing on export.  The image format is obtained from the
  filename extension.  Possible values are =.png, .jpg, .jpeg,
  .tiff, .bmp, .pdf, .ps, .postscript=, defaulting to =png=.
- Results can be returned as parseable code using =:results code=,
  and as pretty-printed code using =:results pp= (emacs-lisp,
  python, ruby).  Thanks to Benny Andresen for the idea and patch
  for emacs-lisp.
- When =:file filename= is supplied, =:exports file= is unnecessary
- Header args are taken from org-file-properties in addition to
  properties active in the subtree.
- =:noweb= header argument now expands noweb references before
  source-block evaluation.
- Tangling honours the new org variable
  org-src-preserve-indentation, so that correct code is output for
  a language like python that depends on indentation.

** Changes in org-exp-blocks.el
- Interblocks export has been simplified.
- Support for R code (=begin_R= blocks and inline =\R{}=) has been
  removed.  Please use org-babel instead.

* Version 6.31
 :PROPERTIES:
 :CUSTOM_ID: v6.31
 :END:

** Org-babel is now part of the Org distribution

Org-babel provides the ability to execute source code in many
different languages within org-mode documents.  The results of
code execution -- text, tables and graphics -- can be integrated
into Org mode documents and can be automatically updated during
publishing.  Since Org-babel allows execution of arbitrary code,
the range of tasks that can be addressed from within an Org mode
file becomes very large.  Examples of ways in which Org-babel
might be used include

- Documenting a task that involves some programming so that it is
  automatically repeatable
- Creating dynamic (executable) reports that respond to changes
  in the underlying data (Reproducible Research)
- Exportation of code contained in an Org mode document into
  regular source code files (Literate Programming)

Additionally, Org-babel provides a programming environment within
Org files, in which data can be transmitted between parameterised
source code blocks in different languages, as well as between
source code blocks and Org mode tables.

A simple API is defined so that users can add support for new
"languages" (broadly construed).  Languages currently supported
are:

- asymptote
- css
- ditaa
- dot
- emacs-lisp
- gnuplot
- haskell
- ocaml
- python
- R
- ruby
- sass
- sh
- sql

Org-babel was designed and implemented Eric Schulte with continued
significant help on both accounts from Dan Davison.

** MobileOrg support

Richard Morelands iPhone/iPod Touch program [[http://mobileorg.ncogni.to/][MobileOrg]] can view
Org files, mark entries as DONE, flag entries for later
attention, and capture new entries on the road.  Org mode has now
support to produce a staging area where MobileOrg can download
its files, and to integrate changes done on the phone in a half
automatic, half interactive way.  See the new appendix B in the
manual for more information.


** Indented lines starting with "#+ " are treated as comments

To allow comments in plain lists without breaking the list
structure, you can now have indented comment lines that start
with "#+ ".

** New STARTUP keyword `showeverything'

This will make even drawer contents visible upon startup.
Requested by Jeff Kowalczyk.

** New contributed package org-invoice.el

This package collects clocking information for billing
customers.

Thanks to Peter Jones for this contribution.

** Encrypting subtrees

/org-crypt.el/ by John Wiegley and Peter Jones allows encryption
of individual subtrees in Org mode outlines.  Thanks to John and
Peter for this contribution.

** Agenda: Support for including a link in the category string

The category (as specified by an #+CATEGORY line or CATEGORY
property can contain a bracket link.  While this sort-of worked
in the past, it now is officially supported and should cause no
problems in agenda display or update.  The link can be followed
by clicking on it, or with =C-c C-o 0=.

This was a request by Peter Westlake.

* Version 6.30
 :PROPERTIES:
 :CUSTOM_ID: v6.30
 :END:

** Inconsistent changes

*** Agenda now uses =f= and =b= to move through time

Up to now, the Org mode agenda used the cursor keys =left= and
=right= to switch the agenda view forward an backward through
time.  However, many people found this confusing, and others
wanted to be able to do cursor motion in the agenda, for example
to select text.  Therefore, after an extensive discussion on
=emacs-orgmode@gnu.org=, it was decided to use the =b= and
=f= keys instead, and to let the cursor keys do cursor motion
again.

*** Agenda follow mode is now on the =F= key

This was necessary to free up the =f= key, see above.

** Details

*** Maintenance

**** New command to submit a bug report

There is now a special command =M-x org-submit-bug-report=.  This
command will create a mail buffer with lots of useful details.
In particular, it contains complete version information for Emacs
and Org mode.  It will also (if you agree to it) contain all
non-standard settings of org-mode and outline-mode related
variables.  Even if you do not sent your emails from within
Emacs, please still use this command to generate the information
and then copy it into your mail program.

The command will not generate and include a =*Backtrace*= buffer,
please do this yourself if you have hit an error.  For more
information, see the [[https://orgmode.org/manual/Feedback.html#Feedback][feedback section]] of the manual.

**** New contributed package org-track.el

This package allows to keep up-to-date with current Org
development, using only Emacs on-board means.  So if you don't
want or cannot use =git=, but still want to run the latest and
hottest Org mode, this is for you.

Thanks to Sebastian Rose for this contribution.

*** Agenda

**** Agenda now uses =f= and =b= to move through time

Up to now, the Org mode agenda used the cursor keys =left= and
=right= to switch the agenda view forward an backward through
time.  However, many people found this confusing, and others
wanted to be able to do cursor motion in the agenda, for example
to select text.  Therefore, after an extensive discussion on
=emacs-orgmode@gnu.org=, it was decided to use the =b= and
=f= keys instead, and to let the cursor keys do cursor motion
again.

**** Agenda follow mode is now on the =F= key

This was necessary to free up the =f= key, see above.

**** The agenda can be put into a dedicated frame

When the variable =org-agenda-window-setup= has the value
=other-frame=, then the new frame created to show the agenda
will now have the window marked as /dedicated/.  As a
consequence, exiting the agenda while the agenda is the only
window on the frame will kill that frame.

This was a request by Henry Atting.

**** New mode to show some entry body text in the agenda

There is now a new agenda sub-mode called
=org-agenda-entry-text-mode=.  It is toggled with the =E= key.
When active, all entries in the agenda will be accompanied by a
few lines from the outline entry.  The amount of text can be
customized with the variable =org-agenda-entry-text-maxlines=.

This was a request by Anthony Fairchild, Manish, and others.

**** Improve following links from the agenda

=C-c C-o= in the agenda will now offer all links in the headline
and text of an entry.  If there is only a single link, it will be
followed immediately.

**** Avoid some duplicate entries

There is a new variable that can be used to avoid some duplicate
agenda entries: =org-agenda-skip-scheduled-if-deadline-is-shown=
If that is set, it avoids that an entry shows up in the agenda for
today for both a scheduling and a deadline entry.  See the
docstring of the variables for more details.

This partially addresses a request by Samuel Wales.

**** Mark the running clock in the agenda.

If the entry currently being clocked is present in the agenda, it
will be highlighted with the face =org-agenda-clocking=.

This was a request by Rainer Stengele.


*** Export

**** Allow LaTeX export to use the listings package

The LaTeX =listings= package can now be used for formatting
fontified source code in many programming languages.  For more
information, see
https://list.orgmode.org/m2prb6t9lw.fsf@gmail.com and
https://orgmode.org/worg/org-faq.php#fontified_source_code_w_latex

Thanks to Eric Schulte for this patch.

**** Remove table rows that only contain width and alignment markers

The width and alignment in table columns can be set with a cookie
like "<10>" or "<r>" or "<r10>".  In order to keep Org from
exporting such lines, the first column of a line should contain
only "/".  However, for convenience, there is now a special case:
If the entire row contains only such markers, the line will
automatically be discarded during export, even is the first
column is not "/".

**** Allow Macro calls to span several lines.

Macro calls may now span several lines, to write several
arguments in a cleaner way.  The result of a macro call can also
span several lines, by inserting the string "\n" (backslash
followed by n) into the value in the macro definition.

These were requests by Stefan Vollmar.

*** Misc

**** Quick access to all links in an entry

If =C-c C-o= is called while the cursor is in a headline, but not
directly on a link, then all links in the entry will be offered
in a small menu.  If there is only a single link, it will be
followed without a prompt.

**** Visibility Cycling: Allow to show all empty lines after a headline

=org-cycle-separator-lines= can now be set to a negative value,
to indicate that, if the number of empty lines before a visible
entry is greater than the specified number, then *all* empty
lines should be shown.

This was a request by "PT" whatever this means.

**** Allow language names to replace some strange major mode names

Sometimes a language uses a major mode which can't be guessed
from it's name.  There is now a new variable =org-src-lang-modes=
which can be used to map language names to major modes when this
is the case.  This is used when editing a source-code
block, or when exporting fontified source-code with htmlize.

Thanks to Eric Schulte for a patch to this effect.

**** iswitchb support for many completion prompts

This is enabled using =org-completion-use-iswitchb=, and follows
the same model of usage as for ido users.

Thanks to John Wiegley for a patch to this effect.

**** New commands to set the effort property of an entry

There is now a special command, =C-c C-x e= to set the =Effort=
property of an entry.  From the agenda you can even use =e=.
If you have set up allowed values for the =Effort= property, then
using a prefix argument will directly select the nth allowed
value.  For example, in the agenda, =5 e= will select the 5th
allowed value.

This was a request by Michael Gilbert

**** Edit src works now better with killing buffer

Thanks to Dan Davison for a patch to this effect

* Version 6.29
 :PROPERTIES:
 :CUSTOM_ID: v6.29
 :END:

** Structure editing and cycling

*** New minor mode =org-indent-mode=

This mode implements outline indentation similar to clean view,
but in a dynamic and virtual way, at display time.  I have wanted
this functionality for years and tried several implementations,
all unworkable.  Emacs 23 has finally made it possible.  So this
solution is for Emacs 23 only, and I am not sure yet how stable
it really is.  Time will tell.

Currently I do not recommend to turn it on globally using the
variable =org-startup-indented=.  But you can turn it on for a
particular buffer using

#+begin_example
  ,#+STARTUP: indent
#+end_example

Turning on this minor mode automatically turns on
=org-hide-leading-stars=, and it turns off
=org-adapt-indentation=.

*** Skip CHILDREN state if there are no children

When a subtree does not have any children, visibility cycling now skips the
CHILDREN state.  You can customize this behavior with the variable
=org-cycle-skip-children-state-if-no-children=.

*** Nodes without keyword can now be counted for statistics

See the variable =org-provide-todo-statistics= for details.  It can be the
symbol =all-headings=, or a list of TODO states to consider.

This was requested by David A. Gershman.

*** New function =org-list-make-subtree=

This function converts the plain list at point into a subtree, preserving
the list structure.  The key for this command is =C-c C-*=.  Thanks to Ilya
Shlyakhter for this suggestion.

*** Headlines can be fontified to the right window border

Use the variable =org-fontify-whole-heading-line= to turn this on.  Then
headline fontification will include the final newline.  If your setup for
headline faces includes a background different from the default background,
this setup creates a visual line across the window.

*** Inline tasks have become better citizens

The new key =C-c C-x t= inserts an inline task including an END
line.  Inline tasks play along with (i,e, are ignored by) link creation and
footnotes.  Inline tasks with an =END= line can be refiled and
archived.  During the refile/archive operation, the tasks become normal
tasks and the =END= line disappears.

These improvements reflect reports and requests by Peter Westlake and Matt
Lundin.

*** Archive subtree and move to next visible task

When archiving a task, the cursor now ends up on the next headline, so the
repeated application of the archiving command will archive successive
tasks.

Thanks to Bernt Hansen for a patch to this effect.

*** Renumbering the fn:N-like footnotes

The new footnote action =r= will renumber simple =fn:N= footnotes in the
current document.  The action =S= will first do the renumbering and then
sort the footnotes (the =s= action).

This was a request by Andreas Röhler.

*** Automatic sorting and renumbering

Customize the new variable =org-footnote-auto-adjust= or use the
=#+STARTUP= option =fnadjust= to get automatic renumbering and sorting of
footnotes after each insertion/deletion.

This was a request by Andreas Röhler.

*** Improvements to plain-list-cycling with TAB.

TAB now by default cycles visibility in plain lists if the cursor is at a
plain list item.  This corresponds to the new default value =t= of
=org-cycle-include-plain-lists=.  If you want to treat plain list items as
part of the outline hierarchy during cycling of outline headings (this is
what a =t= value used to mean), set this variable to =integrate=.

*** Force bullet type changes during plain list demotion

We now have a mechanism to force a particular bullet type when demoting a
plain list item.  See the variable =org-list-demote-modify-bullet= for
details.

This was a request by Rainer Stengele.

** Tables

*** Relative row references may now cross hlines

A relative row reference like @-1 in a table may now reach across a
horizontal separator line.  I hope this will not break any important tables
out there, but I think it is the right thing to do.

The sole original reason for not allowing such crossing was to implement
running averages of one column in the next.  This can now be done using
field formulas near the beginning and end of the column, and a column
formula for the central part.

See the variable =org-table-relative-ref-may-cross-hline= for more details.

*** Cut or copy single fields

=C-c C-x C-w= and =C-c C-x M-w= now act on single table fields if there is
no active region defined.

** Links

*** Find agenda files linking to the current location

The new command =org-occur-link-in-agenda-files= creates a link like
=org=store-link= would, and then searches all agenda files for this
link.  So for example, you could be in a GNUS message, trying to find tasks
that have links to this message.

*** Include stored links into link completion

When inserting a link with =C-c C-l=, TAB completion will now not only
access link prefixes, but also the stored links.

** Agenda

*** Bulk commands: Add Schedule and Deadline processing

Agenda bulk commands on marked entries now can also set the scheduling date
or a deadline.  Normally, all entries will be set to the specified
date.  However, when writing the change as "++5d" or "++2w", then each time
stamp will independently be shifted by that amount.

*** Tags-todo searches: No longer force to list sublevels

For historic reasons, =org-tags-match-list-sublevels= was forced to =t= in
tags-todo agenda searches.  Now we no longer do this and accept the user
setting of this variable.

Thanks to Patrick Bahr for bringing this up.

** Export

*** Use file-source.org format instead of file.org-source

When publishing the source Org file to the source directory (i.e. if the
publishing directory is the same as the source directory), then the file
name will now look like =file-source.org= and =file-source.org.html=.  Note
that if you do use this kind of setup, you probably want to specify

#+begin_src emacs-lisp
:exclude "-source\.org"
#+end_src

in your publishing project, to avoid that a new generation of =-source=
files is created each time you publish the project.

*** LaTeX export: Skip title command when there is no title

Using =#+TITLE:= without a value makes the LaTeX export ignore the value of
=org-export-latex-title-command=.

*** New option =org-export-html-footnote-format=

This defines the format for footnote references.  This string must contain
=%s= which will be replaced by the footnote label.

*** More export options for source code examples

Allow whitespace in code references.  Allow the =-r= switch to remove the
references in the source code even when the lines are not numbered: the
labels can be explicit enough.  Note that =-r -k= is the same as no switch
at all.

Thanks to Ulf Stegemann for bring this up.

*** LaTeX export: Allow more environment for low-level headings

The user can now define a non-standard environment or macro to handle
export of low-level headings to LaTeX.

For details, see the variable =org-export-latex-low-levels=.

*** LaTeX export: Add postscript file extensions for images

Some people process LaTeX files not directly to pdf, but go through dvi and
then to ps or pdf.  In that case, allowed images are ps and eps files, not
pdf and jpg.

This commit adds the two extensions, so that export using that alternative
path can be supported better.  However, it is up to the user to make sure
that the images are actually compatible with the backend.

*** HTML export: Show UP and HOME links

=org-export-html-link-up= and =org-export-html-link-home= are now also
inserted into normal HTML export, above the page title.

*** General mechanism for local variable settings

Many different people want to set many different variables in a
buffer-local way for export.  This cannot be done with file variables,
because the Org buffer is not current while the exporter is running.

Lots of variables can be set with the =#+OPTIONS= lines, but finding
abbreviations goes only so far.

Therefore we have now a general mechanism that can be used to bind
variables during export operations.

A line like:

#+begin_src org
  ,#+BIND: variable value
#+end_src

will bind the variable to value.  For example, the line

#+begin_src org
  ,#+OPTIONS: toc:nil
#+end_src

can now equivalently be written as

#+begin_src org
  ,#+BIND: org-export-with-toc nil
#+end_src

*** Clean out publishing timestamp directory

When changing the publishing setup, old timestamp files can
be left behind.  Forcing publishing of all projects with
=C-u C-c C-e E= will remove all existing timestamp files.

** Miscellaneous

*** Calendar for reading a date forced into current frame.

Separate-frame setup for calendar had caused problems in AquaEmacs.

*** Set timers for headlines

You can now set a timer related to any headline, like an alarm
clock.  Three new commands have been defined:

- org-timer-set-timer :: bound to =C-c C-x ;= in Org buffers and to =;= in
     Org agenda buffers.  This function sets a timer for the headline the
     cursor is currently it.  Up to three timers can be used at any time.

- org-timer-show-remaining-time :: Show the remaining time for the last
     timer set.

- org-timer-cancel-timers :: Cancel all timers.

This functionality was requested by Samuel Wales and emulates that of
/tea-time.el/ -- see the emacswiki doc at
http://www.emacswiki.org/emacs/tea-time

*** Clock reports may include a time stamp

Using =:timetamp t= as an option in a clock report now allows insertion of
the timestamp for the clocked entry.  Timestamps are searched for in this
order: =SCHEDULING=, =TIMESTAMP=, =DEADLINE= and =TIMESTAMP_IA=.

*** New option =org-id-uuid-program=

On some systems, =uuidgen= is named =uuid=.

*** Clock notification handler made configurable

See the variable =org-show-notification-handler=.

*** New option =org-tags-sort-function=.

This allows tags to be sorted by =string<=, =string>=, or a custom
function.

Thanks to James TD Smith for a patch to this effect.

*** Improvements for org-feed.el

But fixes, and allowing to choose between =wget= and =curl=.

Thanks to Christopher League for a patch to this effect.

* Version 6.28
 :PROPERTIES:
 :CUSTOM_ID: v6.28
 :END:


** Agenda changes
*** Refiling now works from the agenda

The command =C-c C-w= can be executed to refile an entry shown in the
agenda.  After the command, the entry will no longer be shown in the
agenda.  It it is still in an agenda file, refresh the agenda to bring it
up from it's new context.

*** Bulk action

You can now use the =m= key to mark entries in the agenda.  =u= will unmark
the etry at point, and =U= will unmark everything.  When one or more
entries have been selected, the =B= key will execute an action on all
selected entries.  I believe this bulk action makes mainly sense for the
commands that require answering interactive prompts.  So far the supported
actions are

 - Refile all selected entries to a single destination
 - Archive all selected entries
 - Set the TODO state of all selected entries, bypassing any blocking or
   note-taking.
 - Add or remove a tag to/from all selected entries

We can add more actions, if you convince me they make sense.

*** Modified keys

To make room for the new Bulk action commands, some keys in the agenda
buffer had to move:

There is a new command bound to the =v= key, it dispatches various view
mode changes.  Month and year view are now only available as =v m= and =v
y=, respectively.  Turning on inclusion of archive trees and files (unsed
to be on =v=) is now on =v a= and =v A=.

** Improvements related to =#+begin= blocks

*** Indented blocks

=#+begin_ ... +#end_...= blocks may now be indented along with the
structure of your document.  So the =#+= lines no longer need to start in
column 0, these lines can be, along with the block contents, indented
arbitrarily.  Org supports this during editing with "C-c '", and now
finally treats them consistently during export across all backends.  This
makes these blocks work much better with plain list structure editing, and
it also looks better if you like to indent text under outline
headings.  For example:

#+begin_src org
  ,*** This is some headline
  ,    #+begin_example
  ,    here we have an example
  ,    #+end_example
  ,
  ,    - a plain list
  ,      - a sublist item
  ,        - a second sublist item

  ,          #+begin_center
  ,           centering within the plain list item
  ,          #+end_center

  ,      #+begin_example
  ,       This example does terminate the sublist,
  ,       the indentation of the #+begin line counts.
  ,      #+end_example

  ,    - but the top level plain lists continues here
#+end_src

From now on, the indentation of such a block decides whether it is part of
a plain list item or if it is actually terminating the list.  This was so
far inconsistent between editing behavior and export, now it is consistent.

The content of the block, i.e. the text between the #+ lines gets an extra
indentation of two space characters, which I find visually pleasing.  You
can change the amount of extra indentation using the variable
=org-src-content-indentation=.

This was a pretty complex change, achieved in many small steps over the
last couple of weeks.  It cleans up one of the more annoying
inconsistencies in Org.  I hope it will work, but I am sure you will let me
know if not.

*** Indented tables

Also tables can be fully indented now.  What is new here is that the
=#+TBLFM= line, and also things like =#+caption=, =#+label=, =#+attr_...=
etc can be indented along with the table.  Again, this makes the look of
the document better and allows for proper plain list structure editing.

*** Protected blocks

Some =#+begin_ ... +#end_...= blocks contain text that should not be
processed like normal Org mode text.  =example= and =src= block fall into
this class, and so do =ditaa= blocks, for example.  The content in such
blocks is now properly fontified in a single face (called
=org-block=).  This was a frequently requested feature.  The list of blocks
that should be protected from normal Org mode fontification is defined in
the variable =org-protecting-blocks=.  Modules defining new blocks should
add to this variable when needed.  =org-exp-blocks.el= does this already.

*** Hide and show the contents of blocks

Blocks can now be folded and unfolded with =TAB=.  If you want to have all
blocks folded on startup, customize =org-hide-block-startup= or use the
=#+STARTUP= options =hideblocks= or =showblocks= to overrule this variable
on a per-file basis.

Thanks to Eric Schulte for a patch to this effect.

*** Moved Eric Schulte's org-exp-blocks.el into the core

This seems to be getting a lot of use now, so it is now part of the core
and loaded automatically.  This package can now also be used to define new
blocks.  Customize the variable =org-export-blocks= or use the function
=org-export-blocks-add-block=.

** New and updated contributed modules
*** org-export-generic.el is now a contributed package.

This new module allows users to export an Org page to any type of output by
constructing the output using a list of prefixes, format specifications and
suffixes for the various types of org data (headlines, paragraphs, list
bullets, etc).  Use the =org-set-generic-type= function to define your own
export types and have them bound to a key (use an upper-case letter for
user export definitions).

Thanks to Wes Hardaker for this contribution with a lot of potential.

*** New contributed modules org-mac-iCal.el by Christopher Suckling

See the [[https://orgmode.org/worg/org-contrib/org-mac-iCal.php][documentation on Worg]].

*** org-jira.el: New file, by Jonathan Arkell

Links to Jira tickets.

*** org-R.el: Updated.

/org-R.el/ has been updated, thanks to Dan Davison for this.

*** =[ TABLE-OF-CONTENTS]= is now also used for LaTeX export

This cookie will mark the location of the =\tableofcontents=
macro.  Triggered by a report by Yuva.

** Changes to the clocking system

*** New option `org-clock-out-switch-to-state'.

Clocking out can now switch the task to a particular state.

This was a request by Manish.

*** More control about what time is shown in mode line while clocking

- If you have an =Effort= property defined, its value is also shown in the
  mode line, and you can configure =org-clock-sound= to get an alert when
  your planned time for a particular item is over.

- When an entry has been clocked earlier, the time shown in the mode line
  while the item is being clocked is now the sum of all previous, and the
  current clock.

- The exception to the previous rule are repeating entries: There the clock
  time will only be clocking instances recorded since the last time the
  entry when through a repeat event.  The time of that event is now
  recorded in the =LAST_REPEAT= property

- You can use the property CLOCK_MODELINE_TOTAL to get control over what
  times are displayed in the mode line, see the manual for more
  information.

- The new command =C-c C-x C-e= can be used to change the Effort estimate
  and therefore to change the moment when the clock sound will go off.

- The clock string in the modeline now has a special font,
  =org-mode-line-clock=.  This was a proposal by Samuel Wales.

- Clicking on the mode line display of the clock now offers a menu with
  important clock functions like clocking out, or switching the clock to a
  different task.

Thanks to Konstantin Antipin for part of the implementation, and thanks to
Bernt Hansen for helping to iron out the issues related to repeated tasks.

** Miscellaneous changes

*** Allow to specify the alignment in table columns by hand

Similar to the =<20>= cookies that allow to specify a maximum width for a
table column, you can now also specify the alignment in order to overrule
the automatic alignment choice based on the dominance of number or
non-number fields in a column.  The corresponding cookies are =<l>= and
=<r>= for left and right side alignment, respectively.  These can be
combined with maximum width specification like this: =<r15>=.

This was a proposal by Michael Brand.

*** Stop logging and blocking when selecting a TODO state

Sometimes you want to quickly select or change a TODO state of an item,
without being bothered by your setup for blocking state changes and logging
entries.  So in this case, you don't want the change be seen as a true
state change.

You can now set the variable
=org-treat-S-cursor-todo-selection-as-state-change= to nil.  Then, when you
use =S-left= and =S-right= to quickly flip through states, blocking and
logging will be temporarily disabled.

*** Export BBDB anniversaries to iCalendar

See the variable `org-icalendar-include-bbdb-anniversaries'.

This was a request by Richard Riley, thanks to Thomas Baumann for the
prompt implementation.

*** Macro definitions can be collected in an #+SETUPFILE

If you want to use many macros in different files, collect the =#+macro=
lines into a file and link to them with

: #+SETUPFILE: path/to-file

*** Subtree cloning now also shifts inactive dates

When using the command =org-clone-subtree-with-time-shift=, time stamps
will be shifted for each clone.  So far, this applied only to active
timestamps, but now it does apply to inactive ones as well.

*** HTML table export: Assign alternating classes to rows

The new variable =org-export-table-row-tags= can now be set up in a way so
that different table lines get special CSS classes assigned.  This can be
used for example to choose different background colors for odd and even
lines, respectively.  The docstring of the variable contains this example:

#+begin_src emacs-lisp
  (setq org-export-table-row-tags
        (cons '(if head
               "<tr>"
             (if (= (mod nline 2) 1)
                 "<tr class=\"tr-odd\">"
               "<tr class=\"tr-even\">"))
          "</tr>"))
#+end_src

It makes use of the local variables =head= and =nline= which are used to
check whether the current line is a header line, and whether it is an odd
or an even line.  Since this is fully programmable, you can do other things
as well.

This was a request by Xin Shi.

*** Remember: target headline may be a function

When setting up remember templates, the target headline may now be a
function, similarly to what is allowed for the target file.  The functions
needs to return the headline that should be used.

*** Remove flyspell overlays in places where they are not wanted

We now keep flyspell from highlighting non-words in links.

*** Update targets in the Makefile

Some new targets in the default Makefile make it easier to update through
git to the latest version: =update= and =up2=.  Here are the definitions.

#+begin_src BSDmakefile
update:
	git pull
	${MAKE} clean
	${MAKE} all

up2:	update
	sudo ${MAKE} install
#+end_src

This was a request by Konstantin Antipin.

* Version 6.27
  :PROPERTIES:
  :CUSTOM_ID: v6.27
  :END:

** Details

*** Macros for export

Macro processing for export has been enhanced:

- You can use arguments in a macro, for example

  #+begin_src org
    ,#+macro hello Greet the $1: Hello $1
  #+end_src

  which would turn ={{{hello(world)}}}= into =Greet the world: Hello world=

- The macro value can be an emacs-lisp for to be evaluated at the time of
  export:

  #+begin_src org
    ,#+macro: datetime (eval (format-time-string "$1"))
  #+end_src

- More built-in default macros:
  - date(FORMAT_TIME_STRING) :: Time/Date of export
  - time(FORMAT_TIME_STRING) :: Same as date
  - modification-time(FORMAT_TIME_STRING) :: Last modification of file
  - input-file :: Name of the input file

  The new built-in macros have been requested by Daniel Clemente.

*** Link completion for files and bbdb names

Org now has a general mechanism how modules can provide enhanced support
(for example through completion) when adding a link.  For example, when
inserting a link with =C-c C-l=, you can now type =file:= followed by =RET=
to get completion support for inserting a file.  After entering =bbdb:= and
=RET=, a completion interface will allow to complete names in the BBDB
database.  These are the only ones implemented right now, but modules that
add a link type =xyz:= can simple define =org-xyz-complete-link= that
should return the full link with prefix after aiding the used to create the
link.  For example, if you have =http= links that you have to insert very
often, you could define a function =org-http-complete-link= to help
selecting the most common ones.

*** Source file publishing

It is now easy to publish the Org sources along with, for example, HTML
files.  In your publishing project, replace

: :publishing-function org-publish-org-to-html

with

:  :publishing-function (org-publish-org-to-html org-publish-org-to-org)
:  :plain-source t
:  :htmlized-source t

to get both the plain org file and an htmlized version that looks like your
editing buffer published along with the HTML exported version.

*** Push exported stuff to kill ring

All exporters now push the produced material onto the kill-ring in Emacs,
and also to the external clipboard and the primary selection to make it
easy to paste this under many circumstances.

*** Tables in LaTeX without centering

Set the variable `org-export-latex-tables-centered' to =nil= if you prefer
tables not to be horizontally centered.  Note that longtable tables are
always centered.

*** LaTeX export: TODO markup configurable

The markup for TODO keywords in LaTeX export is now configurable using the
variable =org-export-latex-todo-keyword-markup=.

*** ASCII export to buffer

ASCII export has now the same command variations as the other export
backends, for example exporting to a temporary buffer instead of a file.

The was a request by Samuel Wales.

*** Accessibility improvements for HTTP tables

When exporting tables to HTML, Org now adds =scope= attributes to all
header fields, in order to support screen readers.  Setting the variable
=org-export-html-table-use-header-tags-for-first-column= will request using
=<th>= instead of =<td>= also in the entire first column, so that also row
information can be scoped.  This was triggered by a request by Jan Buchal,
and as usually Sebastian Rose came up with the right implementation.

*** Timezone information in iCalendar files

The timezone information in iCalendar files is now written in the correct
format, and can be set in the variable =org-ical-timezone=.  This variable
is initialized from the =TZ= environment variable.

*** New contributed package /org-special-blocks.el/

The package turns any "undefined" =#+begin_...= blocks into LaTeX
environments for LaTeX export, and into =<div>= tags for HTML export.

Thanks to Chris Gray for this contribution.

*** More flexibility about placing logging notes.

Logging into a drawer can now also be set for individual subtrees using the
=LOG_INTO_DRAWER= property.

Requested by Daniel J. Sinder.

*** New reload key

Reloading Org has moved to a new key, =C-c C-x !=, and is now also
available in the agenda.

*** Start Agenda with log mode active

Set the new option =org-agenda-start-with-log-mode= to have log mode turned
on from the start.  Or set this option for specific custom commands.

Thanks to Benjamin Andresen for a patch to this effect.

*** Agenda speed optimizations

Depending on circumstances, construction the agenda has become a lot
faster.

Triggered by Eric S Fraga's reports about using Org on a slow computer like
a netbook.

*** New face for today in agenda

The date that is today can now be highlighted in the agenda by customizing
the face =org-agenda-date-today=.

Thanks to Dmitri Minaev for a patch to this effect.

*** Properties to disambiguate statistics

When an entry has both check boxes and TODO children, it is not clear what
kind of statistics a cookie should show You can now use the =COOKIE_DATA=
property to disambiguate, by giving it a value "todo" or "checkbox".

Thanks to Ulf Stegeman, who was persistent enough to push this change past
my initial resistance.

*** Checkboxes and TODO items: recursive statistics

=nil= will make statistics cookies count all checkboxes in the Setting the
variable =org-hierarchical-checkbox-statistics= to lit hierarchy below it.

Setting the variable =org-hierarchical-todo-statistics= to
=nil= will do the same for TODO items.

To turn on recursive statistics only for a single subtree, add the word
"recursive" to the =COOKIE_DATA= property.  Note that you can have such a
property containing both "todo" or "checkbox" for disambiguation, and the
word "recursive", separated by a space character.

The change for checkboxes was a patch by Richard Klinda.

*** New operators for column view

Column view has new operators for computing the minimum, maximum, and mean
of property values.

Thanks to Mikael Fornius for a patch to this effect.

* Version 6.26
  :PROPERTIES:
  :CUSTOM_ID: v6.26
  :END:

** Details

*** custom IDs

Entries can now define a =CUSTOM_ID= property.  This property must be a
valid ID according to HTML rules, and it will be used in HTML export as the
main target ID for this entry.  That means, both the table of conents and
other internal links will automatically point to this ID instead of the
automatic ID like =sec-1.1=.  This is useful to create humar-readable
permanent links to these location in a document.

The user is responsible to make sure that custom IDs are unique within a
file.

Links written like =[[#my-target-name] ]= can be used to target a custom
ID.

When using =C-c l= to store a link to a headline that has a custom ID, Org
will now create two links at the same time.  One link will be to the custom
ID.  The other will be to the globaly unique ID property.  When inserting
the line with =C-c C-l=, you need to decide which one you want to use.  Use
the ID links for entries that are expected to move from one file to the
next.  Use custom ID links publishing projects, when you are sure that te
entry will stay in that file.  See also the variable
=org-link-to-org-use-id=.

*** Remember to non-org files

If the target headline part of a remember template definition entry is
=top= or =bottom=, the target file may now be a non-Org mode file.  In this
case, the content of the remember buffer will be added to that file without
enforcing an Org-like headline.  Sorry, Russel, that this took so long.

*** New property to turn off todo dependencies locally

Setting the property =NOBLOCKING= will turn off TODO dependency checking
for this entry.

*** Refile verify

A new function is called to verify tasks that are about to be selected as
remember targets.  See the new variable
=org-refile-target-verify-function=.

*** New version org ditaa.jar

Thanks to Stathis Sideris.

*** htmlize.el is now in the contrib directory

The latest version of htmlize.el is now the in the contrib directory of
Org.  Thanks to Hrvoje Niksic for allowing this.

* Version 6.25
  :PROPERTIES:
  :CUSTOM_ID: v6.25
  :END:

** Major new features

*** DocBook export

We now do have a fully functional DocBook exporter, contributed by Baoqiu
Cui.  Simple press =C-c e D= to export the current file to DocBook
format.  You can also get direct conversion to PDF if you have made the
correct setup, please see the manual for details.

Kudos to Baoqiu for this fantastic addition, and my personal thanks for
doing this in a such a smooth way that I did not have to do anything
myself.

*** Protocols for external access to Emacs and Org

/org-protocol.el/ is a new module that supersedes both
/org-annotation-helper.el/ and /org-browser.el/ and replaces them with a
more abstracted interface.  /org-protocol/ intercepts calls from
emacsclient to trigger custom actions without external dependencies.  Only
one protocol has to be configured with your external applications or the
operating system, to trigger an arbitrary number of custom actions. Just
register your custom sub-protocol and handler with the new variable
=org-protocol-protocol-alist=.

org-protocol comes the with three standard protocol handlers (in
parenthesis the name of the sub-protocol):

- =org-protocol-remember= (=remember=) :: Trigger remember
- =org-protocol-store-link= (=store-link=) :: Store a link
- =org-protocol-open-source= (=open-source=) :: Find the local
     source of a remote web page.

Passing data to emacs is now as easy as calling

: emacsclient org-protocol://sub-protocol://data

For more information see the [[https://orgmode.org/worg/org-contrib/org-protocol.php][online documentation]].

Thanks to Sebastian Rose for this really beautiful module.

*** Inline tasks

Inline tasks are tasks that have all the properties of normal outline
nodes, including the ability to store meta data like scheduling dates, TODO
state, tags and properties.  But these tasks are not meant to introduce
additional outline structure, at least as far as visibility cycling and
export is concerned.  They are useful for adding tasks in extensive pieces
of text where interruption of the flow or restructuring is unwanted.

This feature is not turned on by default, you need to configure
=org-modules= to turn it on, or simply add to you .emacs file:

: (require 'org-inlinetask)

After that, tasks with level 15 (30 stars when using org-odd-levels-only)
will be treated as inline tasks, and fontification will make obvious which
tasks are treated in this way.

*** Input from RSS feeds

Org can now collect tasks from an RSS feed, a great method to get stuff
from online call and note-taking services into your trusted system.  You
need to configure the feeds in the variable =org-feed-alist=.  The manual
contains a short description, more detailed information is [[https://orgmode.org/worg/org-contrib/org-feed.php][available on
Worg]].

Full credit goes to Brad Bozarth who really [[https://list.orgmode.org/f47cd1b50903220338g79cb0d32gcef1c4496b243aac@mail.gmail.com][paved the way]] for this exciting
new feature.

** Export

*** Allow modification of table attributes in HTML export

The #+ATTR_HTML line can now be used to set attributes for a
table.  Attributes listed in that line will replace existing attributes in
=org-export-html-table-tag=, or will add new ones.  For example

: #+ATTR_HTML: border="2" rules="all" frame="all"
: #+CAPTION: Finally a table with lines!
: | a | b |
: |---|---|
: | 1 | 2 |

*** LaTeX low levels are now exported as itemize lists

LaTeX export now treats hierarchy levels 4,5, etc as itemize lists, not as
description lists as before.  This is more consistent with the behavior of
HTML export.  You can configure this behavior using the variable
=org-export-latex-low-levels=.

*** Markup for centering.

Text can be exported centered with

#+begin_src org
  ,#+BEGIN_CENTER
  ,Everything should be made as simple as possible, \\
  ,but not any simpler
  ,#+END_CENTER
#+end_src

*** Sitemap file is now /sitemap.org/

Org-publish can produce a list of all files in a project.  Previously the
file containing this list was called "index.org", really a brain-dead
default because during publication it would overwrite the "index.html" file
of the website.

The default file name is now "sitemap.org".

*** Protect explicit target links in HTML export

If a link is =[[#name] [desc]]=, the href produced when exporting the file
will be exactly href="#name".  So starting a link target with # will
indicate that there will be an explicit target for this.

*** HTML export: Allow "- ___" to explicitly terminate a list

If a list contains "- ___" (three underscores) as an item, this terminates
the list, ignoring this item.  This is an experimental feature, it may
disappear again if we find other ways to deal with literal examples right
after lists.

See [[https://list.orgmode.org/877i2g53px.fsf@fastmail.fm][this mailing list thread]] for context.

** Agenda

*** Changing the time of an entry from the agenda

We now have a way to change not only the date, but also the start time of
an entry from the agenda.  The date is normally changed with
S-right/left.  Now, if you add a C-u prefix, the hour will be changed.  If
you immediately press S-right/left again, hours will continue to be
changed.  A double prefix will do the same for minutes.  If the entry has a
time range like 14:40-16:00, then both times will change, preserving the
length of the appointment.

*** Show saved PDF agenda view with prefix arg

When writing an agenda view to a PDF file, supplying a a prefix argument
(=C-u C-x C-w=) will get the new file displayed immediately.

This was a request by Alan E Davis.

*** Filter for entries with no effort defined

During secondary agenda filtering, pressing "?" now will install a filter
that selects entries which do not have an effort defined.

This new model was necessary because we needed to stop interpreting entries
with no effort defines as 0 effort.  This was inconsistent, because for
normal agenda sorting, the treatment of these entries depends on the
variable =org-sort-agenda-noeffort-is-high=.  Now this variable is also
respected during filtering.

This new feature resulted from a [[https://list.orgmode.org/87tz5aq48u.fsf@fastmail.fm][discussion]] with Matt Lundin and Bernt
Hansen.

*** Introduce user-defined sorting operators

The new variable =org-agenda-cmp-user-defined= can contain a function to
test how two entries should be compared during sorting.  The symbols
=user-defined-up= and =user-defined-down= can then be part of any sorting
strategy.

This was a request by Samuel Wales.

*** Indentation of subitems in the agenda

When a tags/property match does match an entry and it's sublevels, the
sublevels used to be indented by dots, to indicate that the matches likely
result from tag inheritance.  This is now no longer the default, so the
subitems will not get special indentation.  You can get this behavior back
with

: (setq org-tags-match-list-sublevels 'indented)

*** Stuck projects search now searches subtrees of unstuck projects

When, during a stuck-project search, a project tree is identified as not
stuck, so far the search would continue after the end of the project
tree.  From now on, the search continues in the subtree, so that stuck
subprojects can still be identified.

** Miscellaneous

*** Citations: Use RefTeX to insert citations

RefTeX can now be used to create a citation in Org mode buffers.  Setup the
buffer with

#+begin_src org
  ,#+BIBLIOGRAPHY: bibbase style
#+end_src

and create citations with =C-c C-x [=.

Together with org-exp-bibtex.el by Taru Karttunen (available as a
contributed package), this provides a great environment for including
citations into HTML and LaTeX documents.

*** Changing time ranges as a block

When using the S-cursor keys to change the first time in a time range like

: <2009-04-01 Wed 14:40-16:40>

then the end time will change along, so that the duration of the event will
stay the same.

This was a request by Anupam Sengupta.

*** New sparse tree command

A new sparse tree command shows entries with times after a certain
date.  Keys are =C-c / a=, this command is for symmetry with =C-c / b=.

*** Cloning tasks

A new command allows to create clone copies of the current entry, with
shifted dates in all stamps in the entry.  This is useful to create, for
example, a series of entries for a limited time period.  I am using it to
prepare lectures, for example.

*** New face for checkboxes

Checkboxes now have their own face, =org-checkbox=.  This can be used
for nice effects, for example choosing a face with a box around it:

#+begin_src emacs-lisp
  (custom-set-faces
   (org-checkbox ((t (:background "#444444" :foreground "white"
                                  :box (:line-width 1 :style released-button)))))
#+end_src

*** M-a and M-e for navigation in a table field

In tables fields, the sentence commands =M-a= and =M-e= are redefined to
jump to the beginning or end of the field.

This was a request by Bastien Guerry.

*** Backup files for remember buffers

Sometimes users report that they lost data when not immediately storing
a new remember note, and then later exiting Emacs or starting a new
remember process.

Now you can set the variable =org-remember-backup-directory=.  Each
remember buffer created will then get its own unique file name in that
directory, and the file will be removed only if the storing of the note
to an Org files was successful.

*** org-mac-message.el: New functions to access flagged mail

Christopher Suckling has added functionality to
/org-mac-message.el/.  In particular, you can now select a number of
messages and easily get links to all of them with a single command.  For
details, see the [[https://orgmode.org/worg/org-contrib/org-mac-link.html][online documentation]].

*** Read-date: New hook

Setting up the minibuffer for reading a date.  If can be used to The new
hook =org-read-date-minibuffer-setup-hook= is called when install new
keys into the temporary keymap used there.

* Version 6.24
  :PROPERTIES:
  :CUSTOM_ID: v6.24
  :END:

** Incompatible changes

*** Tag searches are now case-sensitive

From this release on, tag searches will be case sensitive.  While I
still think it would be nice to have them case-insensitive, this was
both an inconsistency (TODO keyword searches have always been
case-sensitive), and trouble for coding some efficient algorithms.  So
please make sure that you give the tags with correct casing when
prompted for a match expression.

*** New key for creating tags/property sparse trees

The key to produce a sparse tree matching tags and properties is now
=C-c / m= instead of =C-c a T=.  This is also more consistent with the
=C-c a m= key for the corresponding agenda view.  =C-c / T= will still
work for now, but it is no longer advertised in the documentation and
may go away at any time in the future.

*** IDs in HTML have "ID-" prefix when generated by uuidgen

/uuidgen/ generates IDs that often start with a number, not a
latter.  However, IDs and names in XHTML must start with a
letter.  Therefore, IDs in HTML files will now get an "ID-" prefix if
they have been generated by uuidgen.  This means that id links from one
file to another may stop working until all files have been exported
again.

*** In agenda, only priority cookies get the special face

So far, an entire task would get a special face when
=org-agenda-fontify-priorities= was set.  Now, the default value for
this variable is the symbol =cookies=, which means that on the cookie is
fontified.  Set it to =t= if you want the entire task headline to be
fontified.

** Details

*** PDF export of agenda views

Agenda views can now be exported to PDF files by writing them to a file
with extension ".pdf".  Internally this works by first producing the
postscript version and then converting that to PDF using the ghostview
utility =ps2pdf=.  Make sure that this utility is installed on your
system.

The postscript version will not be removed, it will stay around.

*** Inline some entry text for Agenda View export

When exporting an agenda view to HTML or PDF for printing or remote
access, one of the problems can be that information stored in entries
below the headline is not accessible in that format.

You can now copy some of that information to the agenda view before
exporting it.  For this you need to set the variable
=org-agenda-add-entry-text-maxlines= to a number greater than 0.

#+begin_src emacs-lisp
  (setq org-agenda-add-entry-text-maxlines 20)
#+end_src

Or you can do this with the settings in a custom agenda view, for
example:

#+begin_src emacs-lisp
  ("A" "" agenda ""
   ((org-agenda-ndays 1)
    (org-agenda-add-entry-text-maxlines 5))
   ("agenda-today.pdf"))
#+end_src

*** Improved ASCII export of links

ASCII export of links works now much better.  If a link has a link and a
description part which are different, then the description will remain
in the text while the link part will be moved to the end of the current
section, before the next heading, as a footnote-like construct.

Configure the variable =org-export-ascii-links-to-notes= if you prefer
the links to be shown in the text.  In this case, Org will make an
attempt to wrap the line which may have become significantly longer by
showing the link.

Thanks to Samuel Wales for pointing out the bad state of ASCII link export.

*** Custom agenda commands can specify a filter preset

If a custom agenda command specifies a value for
=org-agenda-filter-preset= in its options, the initial view of the
agenda will be filterd by the specified tags.  Applying a filter with
=/= will then always add to that preset filter, clearing the filter with
=/ /= will set it back to the preset.  Here is an example of a custom
agenda view that will display the agenda, but hide all entries with tags
=FLUFF= or =BLUFF=:

#+begin_src emacs-lisp
  ("A" "" agenda ""
   ((org-agenda-filter-preset '("-FLUFF" "-BLUFF"))))
#+end_src

This is in response to a [[https://list.orgmode.org/87ocwjzts2.fsf@CPU107.opentrends.net][thread on the mailing list]], started by Daniel
Clemente and with great contributions by Bernt Hansen and Matt Lundin.

*** Exporting of citations to LaTeX and HTML, using BibTeX

Citations can now me made using BibTeX, and will be exported to LaTeX
and HTML.  This is implemented in a contributed package by Taru
Karttunen, /org-exp-bibtex.el/.  Kudos to Taru for this really nice
addition.

*** Finally a way to specify keywords and description for HTML export

Use something like

#+begin_src org
  ,#+DESCRIPTION: This page is all about ....
  ,#+KEYWORDS: org-mode, indexing, publishing
#+end_src

To specify the content of the description and keywords meta tags for HTML
output.

*** org-collector.el is now a contributed package

/org-collector.el/ provides functions to create tables by collecting and
processing properties from entries in a specific scope like the current
tree or file, or even from all agenda files.  General lisp expressions
can be used to manipulate the property values before they are inserted
into an org-mode table, for example as a dynamic block that is easy to
update.

Thanks to Eric Schulte for yet another great contribution to Org.

*** Update of org2rem.el

/org2rem.el/ has been updated significantly and now does a more
comprehensive job of exporting Org events to remind.

Thanks to Sharad Pratap for this update.

*** New div around the entire page in HTMP export

A new =<div id=content>= is wrapped around the entire page, everything
that is inside =<body>=.

This means that you need to update /org-info.js/ (if you have a local
copy).  It will be safe todo so, because the new org-info.js still
handles older pages correctly.  Thanks to Sebastian Rose for making
these changes so quicky.

*** Clustering characters for undo

When typing in Org mode, undo will now remove up to 20 characters at a
time with a single undo command.  This is how things work normally in
Emacs, but the special binding of characters in Org mode made this
impossible until now.

Thanks to Martin Pohlack for a patch which mimicks the behavior of the
Emacs command loop for the Org version of =self-insert-command=.  Note
that this will not work in headlines and tables because typing there
will do a lot of extra work.

There might be a small typing performance hit resulting from this
change - please report in the mailing list if this is noticeable and
annoying.

*** Separate settings for special C-a and C-e

The variable =org-special-ctrl-a/e= now allows separate settings for
=C-a= and =C-e=.  For example

#+begin_src emacs-lisp
  (setq org-special-ctrl-a/e '(reversed . t))
#+end_src

Thanks to Alan Davis for this proposal.

*** orgstruct++-mode improvements

In addition to =orgstruct-mode= which allows to use some Org mode
structure commands in other major modes, there is a more invasive
version of this mode: =orgstruct++-mode=.  This mode will import all
paragraph and line wrapping variables into the major mode, so that, for
example, during typing the auto-fill wrapping of items will work just
like in Org mode.  This change is not reversible, so turning off
=orgstruct++-mode= will not remove these settings
again. =orgstruct++-mode= is most useful in text modes like message-mode
or =magit-log-edit-mode=.  Furthermore, =orgstruct++-mode= will
recognize plain list context not only in the first line of an item, but
also further down, so that =M-RET= will correctly insert new items.

Thanks to Austin Frank for requesting some of these changes.

*** Promotion and demotion works for regions now

=M-right= and =M-left= now do demote and promote all headlines in an
active region.

*** Match syntax for tags/properties is now described in a single place

The manual chapters about tags and about properties now only refer to
the section about agenda views, where the general syntax of tag/property
matches is described.

*** Macro replacement

A string like ={{{ title }}}= will be replaced by the title of the
document, ={{{ email }}}= by the email setting of the author and
similarly for other export settings given in =#+...= lines.  In addition
to that, you can define an arbitrary number of macros, for example:

#+begin_src org
  ,#+MACRO: myaddress 41 Onestreet, 12345 New York, NY
  ,...
  ,my address is {{{myaddress}}}, see you there.
#+end_src

Macro replacement is the very first thing that happens during export, and
macros will be replaced even in source code and other protected regions.

*** New reload command, with keyboard access

There is now a special command to reload all Org Lisp files, so that you
can stay in your Emacs session while pulling and compiling changes to
Org.  The command to reload the compiled files (if available) is =C-c C-x
r=.  If no compiled files are found, uncompiled ones will be loaded.  If
you want to force loading of uncompiled code (great for producing
backtraces), use a prefix arg: =C-u C-c C-x r=.  Both commands are
available in the menu as well.

This new command was inspired by one written earlier by Bernt Hansen.

*** Faces for priority cookies can now be set freely

The new variable =org-priority-faces= can be used to set faces for each
priority.

*** New key for creating tags/property sparse trees

The key to produce a sparse tree matching tags and properties is now =C-c /
m= instead of =C-c a T=.  This is more consistent with the =C-c a m= key
for the corresponding agenda view.  =C-c / T= will still work for now, but
it is no longer advertised in the documentation and may go away at any time
in the future.

*** IDs in HTML have "ID-" prefix when generated by uuidgen

/uuidgen/ generates IDs that often start with a number, not a
letter.  However, IDs and names in XHTML must start with a
letter.  Therefore, IDs in HTML files will now get an "ID-" prefix if they
have been generated by /uuidgen/.  This means that id links from one file
to another may stop working until all files have been exported again, so
that both links and targets have the new prefix.

*** In agenda, only priority cookies get the special face

So far, an entire task would get a special face when
=org-agenda-fontify-priorities= was set.  Now, the default value for this
variable is the symbol =cookies=, which means that on the cookie is
fontified.  Set it to =t= if you want the entire task headline to be
fontified.

*** Turning off time-of-day search in headline

Some people like to put a creation time stamp into a headline and then get
confused if the time-of-day found in there shows up as the time-of-day of
the deadline/scheduling entry for this headline.  The reason for this is
that Org searches the headline for a free-format time when trying to sort
the entry into the agenda, and that search accidentally finds the time in
the creation time stamp or something else that happens to look like a
time.  If this is more painful than useful for you, configure the new
variable =org-agenda-search-headline-for-time=.

* Version 6.23
  :PROPERTIES:
  :CUSTOM_ID: v6.23
  :END:
** Overview

- Capture state change notes into a drawer
- Clock lines are now captured into the LOGBOOK drawer as well
- Added org-R.el to contrib directory
- Allow individual formatting of each TODO keyword in HTML export
- New hooks for add-ons to tap into context-sensitive commands
- Publishing files irrespective of extension
- New variable index in the manual
- The ORDERED property also influences checkboxes
- The ORDERED property can be tracked with a tag
- You may now specify line breaks in the fast tags interface
- When a TODO is blocked by checkboxes, keep it visible in agenda
- LaTeX can import Org's in-buffer definitions for TITLE, EMAIL etc.

** Incompatible changes

- CLOCK lines will now be captured into the LOGBOOK drawer.
  See below for details.

** Details

*** Capture state change notes into a drawer

State change notes can now be captured into a drawer =LOGBOOK=, to keep the
entry tidy.  If this is what you want, you will need this configuration:

#+begin_src emacs-lisp
  (setq org-log-into-drawer "LOGBOOK")
#+end_src

Thanks to Wanrong Lin for this proposal.

*** Clock lines are now captured into the LOGBOOK drawer as well

The =CLOCK= drawer will be abandoned, clock lines will now also end up in a
drawer =LOGBOOK=.  The reason for this is that it's a bit useless to have
two different drawers for state change notes and clock lines.  If you wish
to keep the old way, use

#+begin_src emacs-lisp
  (setq org-clock-into-drawer "CLOCK")
#+end_src

*** Added org-R.el to contrib directory

Dan Davison has contributed /org-R.el/ which is now in the contrib
directory.  Org-R performs numerical computations and generates
graphics.  Data can come from org tables, or from csv files; numerical
output can be stored in the org buffer as org tables, and links are
created to files containing graphical output.  Although, behind the
scenes, it uses R, you do not need to know anything about R.  Common
operations, such as tabulating discrete values in a column of an org
table, are available "off the shelf" by specifying options on lines
starting with =#+R:=.  However, you can also provide raw R code to be
evaluated.  The documentation is currently the worg tutorial at
https://orgmode.org/worg/org-tutorials/org-R/org-R.php

Thanks to Dan for this great contribution.

*** Allow individual formatting of TODO keyword and tags in HTML export

TODO keywords in HTML export have the CSS class =todo= or =done=.  Tags
have the CSS class =tag=.  In addition to this, each keyword has now
itself as class, so you could do this in your CSS file:

#+begin_src css
  .todo { font-weight:bold; }
  .done { font-weight:bold; }
  .TODO { color:red; }
  .WAITING { color:orange; }
  .DONE { color:green; }
#+end_src

If any of your keywords causes conflicts with CSS classes used for
different purposes (for example a tag "title" would cause a conflict with
the class used for formatting the document title), then you can use the
variables =org-export-html-tag-class-prefix= and
=org-export-html-todo-kwd-class-prefix= to define prefixes for the class
names for keywords, for example "kwd-".

Thanks to Wanrong Lin for this request, and to Sebastian Rose for help with
the implementation.

*** New hooks for add-ons to tap into context-sensitive commands

Some commands in Org are context-sensitive, they will execute different
functions depending on context.  The most important example is of course
=C-c C-c=, but also the =M-cursor= keys fall into this category.

Org has now a system of hooks that can be used by add-on packages to
install their own functionality into these keys.  See the docstring of
=org-ctrl-c-ctrl-c-hook= for details.  The other hooks are named like
=org-metaleft-hook= or =org-shiftmetaright-hook=.

*** Publishing files irrespective of extension

If you set the =:base-extension= property for a publishing project to the
symbol =any=, all files in the directory will be published, irrespective of
extension.

Thanks to Richard Klinda for a patch to this effect.

*** New variable index in the manual

A new index in the manual lists all variables mentioned in the manual,
about 200 variables in total.

*** The ORDERED property also influences checkboxes

When an entry has the ORDERED property set, checkboxes in the entry must be
completed in order.  This was already the case for children TODO items, now
it also applies for checkboxes.

Thanks to Rainer Stengele for this proposal.

*** The ORDERED property can be tracked with a tag

The =ORDERED= property is used to flag an entry so that subtasks
(both children TODO items and checkboxes) must be completed in
order.  This property is most easily toggled with the command
=C-c C-x o=.  A property was chosen for this functionality,
because this should be a behavior local to the current task, not
inherited like tags.  However, properties are normally
invisible.  If you would like visual feedback on the state of
this property, configure the variable
=org-track-ordered-property-with-tag=.  If you then use =C-c C-x
o= to toggle the property, a tag will be toggled as well, for
visual feedback.

Note that the tag itself has no meaning for the behavior of TODO
items and checkboxes, and that changing the tag with the usual
tag commands will not influence the property and therefore the
behavior of TODO and checkbox commands.

*** You may now specify line breaks in the fast tags interface

Up to now, the fast tags interface tried to lump as many tags as
possible into a single line, with the exception that groups would
always be on a line by themselves.

Now, if you use several lines to define your tags, like

#+begin_src org
  ,#+TAGS: aa(a) bb(b) cc(c)
  ,#+TAGS: dd(d) ee(e) ff(f)
#+end_src

then there will also be a line break after the "cc" tag in the
fast tag selection interface.  You may also write

#+begin_src org
  ,#+TAGS: aa(a) bb(b) cc(c) \n dd(d) ee(e) ff(f)
#+end_src

to achieve the same effect, and you can use =\n= several times in order
to produce empty lines.  In =org-tag-alist=, newlines are represented as
=(:newline)=.

Thanks to Christopher Suckling for a patch to this effect.

*** When a TODO is blocked by checkboxes, keep it visible in agenda

When the variable =org-agenda-dim-blocked-tasks= is set to =invisible=,
tasks that are blocked will not be visible in the agenda.  If the
blocking is due to child TODO entries, this does make sense because the
children themselves will show up in the TODO list.

However, as John Rakestraw has [[https://list.orgmode.org/20090201154424.2c07d9ff@johnrakestraw.com][pointed out]], if the blocking is done by
checkboxes, no trace of these subtasks is left.  Therefore, when the
blocking is done by checkboxes, we now overrule the =invisible= setting
and replace it with mere dimming of the task.

*** LaTeX can import Org's in-buffer definitions for TITLE, EMAIL etc.

If you configure =org-export-latex-import-inbuffer-stuff=, in-buffer
definitions like =#+TITLE= will be made available in the LaTeX file as
=\orgTITLE=.

This was a request by Russel Adams.

* Version 6.22
  :PROPERTIES:
  :CUSTOM_ID: v6.22
  :END:
** Details

*** org-choose.el by Tom Breton is now included

Org-choose helps documenting a decision-making process by using TODO
keywords for different degrees of /chosenness/, and by automatically
keeping a set of alternatives in a consistent state.

Documentation for /org-choose.el/ is available [[https://orgmode.org/worg/org-contrib/org-choose.php][here]].

This package inserts itself into Org using hooks, so if other people
would like to do interesting stuff with TODO keywords for special
purposes, looking at Tom's code might be a good way to start.

Thanks to Tom for this interesting contribution!

*** orgmode.org and Worg css works now better on IE

Thanks to Sebastian Rose for making these changes.

*** When exporting a subtree, headline levels are now relative to parent

This was reported as a bug by William Henney and is fixed now.

*** Inactive dates in tables can be used for sorting.

When sorting table fields or entries by date, Org first tries to
find an active date, and, if none exist, uses a passive date if
present.

This was a request by Hsui-Khuen Tang

*** The default for =org-return-follows-link= is back to =nil=

Setting it to =t= violates Emacs rules to some extent.  The internal
implementation of this has been improved, so setting it to =t= should
now be pretty stable.

*** Automatic scheduling of siblings with org-depend.el

The sibling of a DONE task can now automatically be scheduled.

This was a patch by Andrew Hyatt.

*** New skipping conditions

The functions =org-agenda-skip-entry-if= and
=org-agenda-skip-subtree-if= now accept =timestamp= and =nottimestamp=
as additional conditions.

This was in response to a request by Saurabh Agrawal.

* Version 6.21
  :PROPERTIES:
  :CUSTOM_ID: v6.21
  :END:

** Details

*** Changes to some default values of variables:

Here are the new default values:

#+begin_src emacs-lisp
  (setq org-return-follows-link t)
  
  (setq org-use-fast-todo-selection t)
  
  (setq org-yank-adjusted-subtrees nil)
  
  (setq org-tags-column -77)
  
  (setq org-agenda-sorting-strategy
       '((agenda time-up priority-down category-keep)
          (todo time-up priority-down category-keep)
          (tags time-up priority-down category-keep)
          (search category-keep)))
#+end_src

*** Final cleanup for Emacs 21.1 pretest

* Version 6.20
  :PROPERTIES:
  :CUSTOM_ID: v6.20
  :END:

** Details

*** Support for simple TODO dependencies

John Wiegley's code for enforcing simple TODO dependencies has been
integrated into Org mode.  Thanks John!

The structure of Org files (hierarchy and lists) makes it easy to define
TODO dependencies.  A parent TODO task should not be marked DONE until
all subtasks (defined as children tasks) are marked as DONE.  And
sometimes there is a logical sequence to a number of (sub)tasks, so that
one task cannot be acted upon before all siblings above it are done.  If
you customize the variable =org-enforce-todo-dependencies=, Org will
block entries from changing state while they have children that are not
DONE.  Furthermore, if an entry has a property =ORDERED=, each of its
children will be blocked until all earlier siblings are marked
DONE.  Here is an example:

#+begin_src org
,* TODO Blocked until (two) is done
,** DONE one
,** TODO two

,* Parent
,  :PROPERTIES:
,    :ORDERED: t
,  :END:
,** TODO a
,** TODO b, needs to wait for (a)
,** TODO c, needs to wait for (a) and (b)
#+end_src

The command =C-c C-x o= toggles the value of the =ORDERED= property.

The variable =org-agenda-dim-blocked-tasks= controls how blocked entries
should appear in the agenda, where they can be dimmed or even made
invisible.

Furthermore, you can use the variable
=org-enforce-todo-checkbox-dependencies= to block TODO entries from
switching to DONE while any checkboxes are unchecked in the entry.

*** Support for shift-selection in Emacs 23

Customize the variable =org-support-shift-select= to use S-cursor key
for selecting text.  Make sure that you carefully read the docstring of
that variable first.

*** Adding and removing checkboxes from many lines

The command =C-c C-x C-b= normally toggles checkbox status in the
current line, or in all lines in the region.  With prefix argument it
now either adds or removes the checkbox.

This was a requested by Daniel Clemente.

* Version 6.19
  :PROPERTIES:
  :CUSTOM_ID: v6.19
  :END:

** Overview

- Improved behavior of conversion commands =C-c -= and =C-c *=
- Table formulas may now reference fields in other tables
- A final hline is imagined in each table, for the sake of references
- A tags-todo search can now ignore timestamped items
- =\par= can be used to force a paragraph break, also in footnotes

** Details


*** Improved behavior of conversion commands =C-c -= and =C-c *=

    The conversion commands =C-c -= and =C-c *= are now better behaved
    and therefore more useful, I hope.

    If there is an active region, these commands will act on the region,
    otherwise on the current line.

    - C-c - :: This command turns headings or normal lines into items,
               or items into normal lines.  When there is a region,
               everything depends on the first line of the region:
	 - if it is a item, turn all items in the region into
	   normal lines.
         - if it is a headline, turn all headlines in the region
	   into items.
	 - if it is a normal line, turn all lines into items.
	 - special case: if there is no active region and the
	   current line is an item, cycle the bullet type of the
           current list.
    - C-c * :: This command turns items and normal lines into headings,
               or headings into normal lines.  When there is a region,
               everything depends on the first line of the region:
	 - if it is a item, turn all items in the region into
	   headlines.
         - if it is a headline, turn all headlines in the region
	   into normal lines.
	 - if it is a normal line, turn all lines into headlines.

*** Table formulas may now reference fields in other tables

You may now reference constants, fields and ranges from a different
table, either in the current file or even in a different file.  The
syntax is

: remote(NAME-OR-ID,REF)

where /NAME/ can be the name of a table in the current file as set by a
=#+TBLNAME: NAME= line before the table.  It can also be the ID of an
entry, even in a different file, and the reference then refers to the
first table in that entry.  /REF/ is an absolute field or range
reference, valid in the referenced table.  Note that since there is no
"current filed" for the remote table, all row and column references must
be absolute, not relative.

*** A final hline is imagined in each table, for the sake of references

Even if a table does not end with a hline (mine never do because I think
it is not pretty), for the sake of references you can assume there is
one.  So in the following table

#+begin_src org
| a | b |
|---+---|
| 1 | 2 |
| 3 | 4 |
#+end_src

a reference like =@I$1..@II$2= will now work.

*** A tags-todo search can now ignore timestamped items
    The variables =org-agenda-todo-ignore-with-date=,
    =org-agenda-todo-ignore-with-date=, and
    =org-agenda-todo-ignore-with-date= make it possible to exclude TODO
    entries which have this kind of planning info associated with
    them.  This is most useful for people who schedule everything, and
    who use the TODO list mainly to find things that are not yet
    scheduled.  Thomas Morgan pointed out that also the tags-todo search
    may serve exactly this purpose, and that it might be good to have a
    way to make these variables also apply to the tags-todo search.  I
    can see that, but could not convince myself to make this the
    default.  A new variable must be set to make this happen:
    =org-agenda-tags-todo-honor-ignore-options=.

*** =\par= can be used to force a paragraph break, also in footnotes

The LaTeX idiom =\par= will insert a paragraph break at that
location.  Normally you would simply leave an empty line to get such a
break, but this is useful for footnotes whose definitions may not
contain empty lines.

* Version 6.18
  :PROPERTIES:
  :CUSTOM_ID: v6.18
  :END:
** Incompatible changes

*** Short examples must have a space after the colon

    Short literal examples can be created by preceding lines with a
    colon.  Such lines must now have a space after the colon.  I believe
    this is already general practice, but now it must be like this.  The
    only exception are lines that are empty except for the colon.

** Details

*** Include files can now also process switches

    The example and src switches like =-n= can now also be added to
    include file statements:

: #+INCLUDE "~/.emacs" src emacs-lisp -n -r

    Thanks to Manish for pointing out that this was not yet supported.

*** Examples can be exported to HTML as text areas

    You can now specify a =-t= switch to an example or src block, to
    make it export to HTML as a text area.  To change the defaults for
    height (number of lines in the example) and width of this area (80),
    use the =-h= and =-w= switches.

    Thanks to Ulf Stegemann for driving this development.

*** LaTeX_CLASS can be given as a property

    When exporting a single subtree by selecting it as a region before
    export, the LaTeX class for the export will be taken from the
    =LaTeX_CLASS= property of the entry if present.

    Thanks to Robert Goldman for this request.

*** Better handling of inlined images in different backends

    Two new variables govern which kind of files can be inlined during
    export.  These are =org-export-html-inline-image-extensions= and
    =org-export-latex-inline-image-extensions=.  Remember that links are
    turned into an inline image if they are a pure link with no
    description.  HTML files can inline /.png/, /.jpg/, and /.gif/
    files, while LaTeX files, when processed with /pdflatex/, can inline
    /.png/, /.jpg/, and /.pdf/ files.  These also represent the default
    settings for the new variables.  Note that this means that pure
    links to /.pdf/ files will be inlined - to avoid this for a
    particular link, make sure that the link has a description part
    which is not equal to the link part.

*** Links by ID now continue to work in HTML exported files

    If you make links by ID, these links will now still work in HTML
    exported files, provided that you keep the relative path from link
    to target file the same.

    Thanks to Friedrich Delgado Friedrichs for pushing this over the
    line.

*** The relative timer can be paused

    The new command `C-c C-x ,' will pause the relative timer.  When the
    relative timer is running, its value will be shown in the mode
    line.  To get rid of this display, you need to really stop the timer
    with `C-u C-c C-x ,'.

    Thanks to Alan Davis for driving this change.

*** The attachment directory may now be chosen by the user

    Instead of using the automatic, unique directory related to the
    entry ID, you can also use a chosen directory for the attachments of
    an entry.  This directory is specified by the ATTACH_DIR
    property.  You can use `C-c C-a s' to set this property.

    Thanks to Jason Jackson for this proposal.

*** You can use a single attachment directory for a subtree

    By setting the property ATTACH_DIR_INHERIT, you can now tell Org
    that children of the entry should use the same directory for
    attachments, unless a child explicitly defines its own directory
    with the ATTACH_DIR property.  You can use the command `C-c C-a i'
    to set this property in an entry.

* Version 6.17
  :PROPERTIES:
  :CUSTOM_ID: v6.17
  :END:

** Overview

- Footnote support
- Line numbers and references in literal examples
- New hooks for export preprocessing
- Capture column view into a different file

** Details

*** Footnote support

Org mode now directly supports the creation of footnotes.  In contrast
to the /footnote.el/ package, Org mode's footnotes are designed for work
on a larger document, not only for one-off documents like emails.  The
basic syntax is similar to the one used by /footnote.el/, i.e. a
footnote is defined in a paragraph that is started by a footnote marker
in square brackets in column 0, no indentation allowed.  The footnote
reference is simply the marker in square brackets inside text.  For
example:

#+begin_src org
The Org homepage[fn:1] now looks a lot better than it used to.
...
[fn:1] The link is: https://orgmode.org
#+end_src

Org mode extends the number-based syntax to /named/ footnotes and
optional inline definition.  Using plain numbers as markers is supported
for backward compatibility, but not encouraged because of possible
conflicts with LaTeX syntax.  Here are the valid references:

- =[1]= ::  A plain numeric footnote marker.

- =[fn:name]= :: A named footnote reference, where `name' is a
     unique label word or, for simplicity of automatic creation,
     a number.

- =[fn:: This is the inline definition of this footnote]= :: A
     LaTeX-like anonymous footnote where the definition is given
     directly at the reference point.

- =[fn:name: a definition]= :: An inline definition of a footnote,
     which also specifies a name for the note.  Since Org allows
     multiple references to the same note, you can then use use
     =[fn:name]= to create additional references.

Footnote labels can be created automatically, or you create names
yourself.  This is handled by the variable =org-footnote-auto-label= and
its corresponding =#+STARTUP= keywords, see the docstring of that
variable for details.

The following command handles footnotes:

- C-c C-x f :: The footnote action command.  When the cursor is on a
               footnote reference, jump to the definition.  When it is
               at a definition, jump to the (first)
               reference.  Otherwise, create a new footnote.  Depending
               on the variable `org-footnote-define-inline' (with
               associated =#+STARTUP= options =fninline= and
               =nofninline=), the definitions will be placed right into
               the text as part of the reference, or separately into the
               location determined by the variable
               =org-footnote-section=.  When this command is called with
               a prefix argument, a menu of additional options is
               offered:
     - s :: Sort the footnote definitions by reference sequence.  During
            editing, Org makes no effort to sort footnote definitions
            into a particular sequence.  If you want them sorted, use
            this command, which will also move entries according to
            =org-footnote-section=.
     - n :: Normalize the footnotes by collecting all definitions
            (including inline definitions) into a special section, and
            then numbering them in sequence.  The references will then
            also be numbers.  This is meant to be the final step before
            finishing a document (e.g. sending off an email).  The
            exporters do this automatically, and so could something like
            `message-send-hook'.
     - d :: Delete the footnote at point, and all references to it.

- C-c C-c :: If the cursor is on a footnote reference, jump to the
             definition.  If it is a the definition, jump back to the
             reference.  When called with a prefix argument at either
             location, offer the same menu as `C-u C-c C-x f'.

- C-c C-o or mouse-1/2 :: Footnote labels are also links to the
     corresponding definition/reference, and you can use the usual
     commands to follow these links.

Org mode's footnote support is designed so that it should also work in
buffers that are not in Org mode, for example in email messages.  Just
bind =org-footnote-action= to a global key like =C-c f=.

The main trigger for this development came from a hook function written
by Paul Rivier, to implement named footnotes and to convert them to
numbered ones before export.  Thanks, Paul!

Thanks also to Scot Becker for a thoughtful post bringing this subject
back onto the discussion table, and to Matt Lundin for the idea of named
footnotes and his prompt testing of the new features.

*** Line numbers and references in literal examples

Literal examples introduced with =#+BEGIN_EXAMPLE= or =#+BEGIN_SRC= do
now allow optional line numbering in the example.  Furthermore, links to
specific code lines are supported, greatly increasing Org mode's utility
for writing tutorials and other similar documents.

Code references use special labels embedded directly into the source
code.  Such labels look like "(ref:name)" and must be unique within a
document.  Org mode links with "(name)" in the link part will be
correctly interpreted, both while working with an Org file (internal
links), and while exporting to the different backends.  Line numbering
and code references are supported for all three major backends, HTML,
LaTeX, and ASCII.  In the HTML backend, hovering the mouse over a link
to a source line will remote-highlight the referenced code line.

The options for the BEGIN lines are:

 - -n :: Number the lines in the example
 - +n :: Like -n, but continue numbering from where the previous
         example left off.
 - -r :: Remove the coderef cookies from the example, and replace
         links to this reference with line numbers.  This option
         takes only effect if either -n or +n are given as well.
         If -r is not given, coderefs simply use the label name.
 - -l "fmt" :: Define a local format for coderef labels, see the
      variable =org-coderef-label-format= for details.  Use this
      of the default syntax causes conflicts with the code in the
      code snippet you are using.

Here is an example:

#+begin_example -k
  ,#+begin_src emacs-lisp -n -r
  ,(defmacro org-unmodified (&rest body)                   (ref:def)
  ,  "Execute body without changing `buffer-modified-p'."
  ,  `(set-buffer-modified-p                              (ref:back)
  ,    (prog1 (buffer-modified-p) ,@body)))
  ,#+end_src
  ,
  ,[[(def)][Line (def)]] contains the macro name.  Later at line
  ,[[(back)]], backquoting is used.
#+end_example

When exported, this is translated to:

#+begin_src emacs-lisp -n -r
  (defmacro org-unmodified (&rest body)                   (ref:def)
    "Execute body without changing `buffer-modified-p'."
    `(set-buffer-modified-p                              (ref:back)
      (prog1 (buffer-modified-p) ,@body)))
#+end_src

[[(def)][Line (def)]] contains the macro name.  Later at line [[(back)]], backquoting
is used.

Thanks to Ilya Shlyakhter for proposing this feature set.  Thanks to
Sebastian Rose for the key Javascript element that made the remote
highlighting possible.

*** New hooks for export preprocessing

    The export preprocessor now runs more hooks, to allow better-timed
    tweaking by user functions:

- =org-export-preprocess-hook= :: Pretty much the first thing in the
  preprocessor.  But org-mode is already active in the preprocessing
  buffer.

- =org-export-preprocess-after-include-files-hook= :: This is run after
  the contents of included files have been inserted.

- =org-export-preprocess-after-tree-selection-hook= :: This is run after
  selection of trees to be exported has happened.  This selection
  includes tags-based selection, as well as removal of commented and
  archived trees.

- =org-export-preprocess-before-backend-specifics-hook= :: Hook run
  before backend-specific functions are called during preprocessing.

- =org-export-preprocess-final-hook= :: Hook for preprocessing an export
  buffer.  This is run as the last thing in the preprocessing buffer,
  just before returning the buffer string to the backend.

*** Capture column view into a different file

    The =:id= parameter for the dynamic block capturing column view can
    now truly be an ID that will also be found in a different
    file.  Also, it can be like =file:path/to/file=, to capture the
    global column view from a different file.

    Thanks to Francois Lagarde for his report that IDs outside the
    current file would not work.

* Version 6.16
  :PROPERTIES:
  :CUSTOM_ID: v6.16
  :END:

  Cleanup of many small bugs, and one new feature.

** Details

*** References to last table row with special names

    Fields in the last row of a table can now be referenced with $LR1,
    $LR2, etc.  These references can appear both on the left hand side
    and right hand side of a formula.

* Version 6.15f
  :PROPERTIES:
  :CUSTOM_ID: v6.15f
  :END:

  This version reverses the introduction of @0 as a reference to the
  last rwo in a table, because of a conflict with the use of @0 for the
  current row.

* Version 6.15
  :PROPERTIES:
  :CUSTOM_ID: v6.15
  :END:
** Overview

- All known LaTeX export issues fixed
- Captions and attributes for figures and tables.
- Better implementation for entry IDs
- Spreadsheet references to the last table line.
- Old syntax for link attributes abandoned

** Incompatible changes
*** Old syntax for link attributes abandoned

There used to be a syntax for setting link attributes for HTML export by
enclosing the attributes into double braces and adding them to the link
itself, like

: [[./resources/img/a.jpg{{alt="an image"}}]]

This syntax is not longer supported, use instead

: #+ATTR_HTML: alt="an image"
: [[./resources/img/a.jpg]]

** Details

*** All known LaTeX export issues fixed

All the remaining issues with the LaTeX exporter have hopefully been
addressed in this release.  In particular, this covers quoting of
special characters in tables and problems with exporting files where the
headline is in the first line, or with an active region.

*** Captions and attributes for figures and tables.

Tables, and Hyperlinks that represent inlined images, can now be
equipped with additional information that will be used during
export.  The information will be taken from the following special lines
in the buffer and apply to the first following table or link.

- #+CAPTION: :: The caption of the image or table.  This string should
                be processed according to the export backend, but this
                is not yet done.

- #+LABEL: :: A label to identify the figure/table for cross
              references.  For HTML export, this string will become the
              ID for the ~<div class="figure">~ element that
              encapsulates the image tag and the caption.  For LaTeX
              export, this string will be used as the argument of a
              ~\label{...}~ macro.  These labels will be available for
              internal links like ~[[label][Table] ]~.

- #+ATTR_HTML: :: Attributes for HTML export of image, to be added as
                  attributes into the ~<img...>~ tag.  This string will
                  not be processed, so it should have immediately the
                  right format.

- #+ATTR_LaTeX: :: Attributes for LaTeX export of images and tables.\\
                   For /images/, this string is directly inserted into
                   the optional argument of the
                   ~\includegraphics[...]{file}~ command, to specify
                   scaling, clipping and other options.  This string
                   will not be processed, so it should have immediately
                   the right format, like =width=5cm,angle=90=.\\ For
                   /tables/, this can currently contain the keyword
                   =longtable=, to request typesetting of the table
                   using the longtable package, which automatically
                   distributes the table over several pages if
                   needed.  Also, the attributes line may contain an
                   alignment string for the tabular environment, like
                   =longtable,align=l|lrl=

For LaTeX export, if either a caption or a label is given, the element
will be exported as a float, i.e. wrapped into a figure or table
environment.

*** Better implementation for entry IDs

Unique identifiers for entries can now be used more
efficiently.  Internally, a hash array has replaced the alist used so
far to keep track of the files in which an ID is defined.  This makes it
quite fast to find an entry by ID.

There is a new link type which looks like this:

#+begin_example
id:GLOBALLY-UNIQUE-IDENTIFIER
#+end_example

This link points to a specific entry.  When you move the entry to a
different file, for example if you move it to an archive file, the link
will continue to work.

The file /org-id.el/ contains an API that can be used to write code
using these identifiers, including creating IDs and finding them
wherever they are.

Org has its own method to create unique identifiers, but if the system
has /uuidgen/ command installed (Mac's and Linux systems generally do),
it will be used by default (a change compared to the earlier
implmentation, where you explicitdly had to opt for uuidgen).  You can
also select the method by hand, using the variable =org-id-method=.

If the ID system ever gets confused about where a certain ID is, it
initiates a global scan of all agenda files with associated archives,
all files previously known containing any IDs, and all currently visited
Org mode files to rebuild the hash.  You can also initiate this by hand:
=M-x org-id-update-id-locations=.  Running this command will also dump
into the =*Messages*= buffer information about any duplicate IDs.  These
should not exist, and Org will never /make/ the same ID twice, but if
you /copy/ an entry with its properties, duplicate IDs will inevitably
be produced.  Unfortunately, this is unavoidable in a plain text system
that allows you to edit the text in arbitrary ways, and a portion of
care on your side is needed to keep this system clean.

The hash is stored in the file =~/.emacs.d/.org-id-locations=.  This is
also a change from previous versions where the file was
=~/.org=id-locations=.  Therefore, you can remove this old file if you
have it.  I am not sure what will happen if the =.emacs.d= directory
does not exists in your setup, but in modern Emacsen, I believe it
should exist.  If you do not want to use IDs across files, you can avoid
the overhead with tracking IDs by customizing the variable
=org-id-track-globally=.  IDs can then still be used for links inside a
single file.

IDs will also be used when you create a new link to an Org mode
buffer.  If you use =org-store-link= (normally at =C-c l=) inside en
entry in an Org mode buffer, and ID property will be created if it does
not exist, and the stored link will be an =id:= link.  If you prefer the
much less secure linking to headline text, you can configure the
variable =org-link-to-org-use-id=.  The default setting for this
variable is =create-if-interactive=, meaning that an ID will be created
when you store a link interactively, but not if you happen to be in an
Org mode file while you create a remember note (which usually has a link
to the place where you were when starting remember).

*** Spreadsheet references to the last table line.

You may now use =@0= to reference the last dataline in a table in a
stable way.  This is useful in particular for automatically generated
tables like the ones using /org-collector.el/ by Eric Schulte.

* Version 6.14
  :PROPERTIES:
  :CUSTOM_ID: v6.14
  :END:
** Overview

   - New relative timer to support timed notes
   - Special faces can be set for individual tags
   - The agenda shows now all tags, including inherited ones.
   - Exclude some tags from inheritance.
   - More special values for time comparisons in property searches
   - Control for exporting meta data
   - Cut and Paste with hot links from w3m to Org
   - LOCATION can be inherited for iCalendar export
   - Relative row references crossing hlines now throw an error

** Incompatible Changes

*** Relative row references crossing hlines now throw an error

    Relative row references in tables look like this: "@-4" which means
    the forth row above this one.  These row references are not allowed
    to cross horizontal separator lines (hlines).  So far, when a row
    reference violates this policy, Org would silently choose the field
    just next to the hline.

    Tassilo Horn pointed out that this kind of hidden magic is actually
    confusing and may cause incorrect formulas, and I do
    agree.  Therefore, trying to cross a hline with a relative reference
    will now throw an error.

    If you need the old behavior, customize the variable
    =org-table-error-on-row-ref-crossing-hline=.

** Details

*** New relative timer to support timed notes

    Org now supports taking timed notes, useful for example while
    watching a video, or during a meeting which is also recorded.

    - =C-c C-x .= :: Insert a relative time into the buffer.  The first
      time you use this, the timer will be started.  When called with a
      prefix argument, the timer is reset to 0.

    - =C-c C-x -= :: Insert a description list item with the current
      relative time.  With a prefix argument, first reset the timer
      to 0.

    - =M-RET= :: Once the time list has been initiated, you can also use
      the normal item-creating command to insert the next timer item.

    - =C-c C-x 0= :: Reset the timer without inserting anything into the
      buffer.  By default, the timer is reset to 0.  When called with a
      =C-u= prefix, reset the timer to specific starting offset.  The
      user is prompted for the offset, with a default taken from a timer
      string at point, if any, So this can be used to restart taking
      notes after a break in the process.  When called with a double
      prefix argument =C-c C-u=, change all timer strings in the active
      region by a certain amount.  This can be used to fix timer strings
      if the timer was not started at exactly the right moment.

    Thanks to Alan Dove, Adam Spiers, and Alan Davis for contributions
    to this idea.

*** Special faces can be set for individual tags

    You may now use the variable =org-tag-faces= to define the face used
    for specific tags, much in the same way as you can do for TODO
    keywords.

    Thanks to Samuel Wales for this proposal.

*** The agenda shows now all tags, including inherited ones.

    This request has come up often, most recently it was formulated by
    Tassilo Horn.

    If you prefer the old behavior of only showing the local tags,
    customize the variable =org-agenda-show-inherited-tags=.

*** Exclude some tags from inheritance.

    So far, the only way to select tags for inheritance was to allow it
    for all tags, or to do a positive selection using one of the more
    complex settings for `org-use-tag-inheritance'.  It may actually be
    better to allow inheritance for all but a few tags, which was
    difficult to achieve with this methodology.

    A new option, `org-tags-exclude-from-inheritance', allows to
    specify an exclusion list for inherited tags.

*** More special values for time comparisons in property searches

    In addition to =<now>=, =<today>=, =<yesterday>=, and =<tomorrow>=,
    there are more special values accepted now in time comparisons in
    property searches: You may use strings like =<+3d>= or =<-2w>=, with
    units d, w, m, and y for day, week, month, and year, respectively

    Thanks to Linday Todd for this proposal.

*** Control for exporting meta data

    All the metadata in a headline, i.e. the TODO keyword, the priority
    cookie, and the tags, can now be excluded from export with
    appropriate options:

    | Variable                      | Publishing property | OPTIONS switch |
    |-------------------------------+---------------------+----------------|
    | org-export-with-todo-keywords | :todo-keywords      | todo:          |
    | org-export-with-tags          | :tags               | tags:          |
    | org-export-with-priority      | :priority           | pri:           |

*** Cut and Paste with hot links from w3m to Org

    You can now use the key =C-c C-x M-w= in a w3m buffer with HTML
    content to copy either the region or the entire file in a special
    way.  When you yank this text back into an Org mode buffer, all
    links from the w3m buffer will continue to work under Org mode.

    For this to work you need to load the new file /org-w3m.el./
    Please check your org-modules variable to make sure that this
    is turned on.

    Thanks for Richard Riley for the idea and to Andy Stewart for
    the implementation.

*** LOCATION can be inherited for iCalendar export

    The LOCATION property can now be inherited during iCalendar export
    if you configure =org-use-property-inheritance= like this:

    #+begin_src emacs-lisp
      (setq org-use-property-inheritance '("LOCATION"))
    #+end_src

* Version 6.13
  :PROPERTIES:
  :CUSTOM_ID: v6.13
  :END:

** Overview

   - Keybindings in Remember buffers can be configured
   - Support for ido completion
   - New face for date lines in agenda column view
   - Invisible targets become now anchors in headlines.
   - New contributed file /org-exp-blocks.el/
   - New contributed file /org-eval-light.el/
   - Link translation
   - BBDB links may use regular expressions.
   - Link abbreviations can use %h to insert a url-encoded target value
   - Improved XHTML compliance

** Details

*** Keybindings in Remember buffers can be configured

    The remember buffers created with Org's extensions are in
    Org mode, which is nice to prepare snippets that will
    actually be stored in Org mode files.  However, this makes it
    hard to configure key bindings without modifying the Org mode
    keymap.  There is now a minor mode active in these buffers,
    `org-remember-mode', and its keymap org-remember-mode-map can
    be used for key bindings.  By default, this map only contains
    the bindings for =C-c C-c= to store the note, and =C-c C-k=
    to abort it.  Use `org-remember-mode-hook' to define your own
    bindings like

    #+begin_src emacs-lisp
      (add-hook
       'org-remember-mode-hook
       (lambda ()
         (define-key org-remember-mode-map
           "\C-x\C-s" 'org-remember-finalize)))
    #+end_src

    If you wish, you can also use this to free the =C-c C-c=
    binding (by binding this key to nil in the minor mode map),
    so that you can use =C-c C-c= again to set tags.

    This modification is based on a request by Tim O'Callaghan.

*** Support for ido completion

    You can now get the completion interface from /ido.el/ for
    many of Org's internal completion commands by turning on the
    variable =org-completion-use-ido=. =ido-mode= must also be
    active before you can use this.

    This change is based upon a request by Samuel Wales.

*** New face for date lines in agenda column view

    When column view is active in the agenda, and when you have
    summarizing properties, the date lines become normal column
    lines and the separation between different days becomes
    harder to see.  If this bothers you, you can now customize
    the face =org-agenda-column-dateline=.

    This is based on a request by George Pearson.

*** Invisible targets become now anchors in headlines.

    These anchors can be used to jump to a directly with an HTML
    link, just like the =sec-xxx= IDs.  For example, the
    following will make a http link
    =//domain/path-to-my-file.html#dummy= work:

    #+begin_src org
      ,# <<dummy>>
      ,*** a headline
    #+end_src

    This is based on a request by Matt Lundin.

*** New contributed file /org-exp-blocks.el/

    This new file implements special export behavior of
    user-defined blocks.  The currently supported blocks are

    - comment :: Comment blocks with author-specific markup
    - ditaa ::  conversion of ASCII art into pretty png files
	 using Stathis Sideris' /ditaa.jar/ program
    - dot :: creation of graphs in the /dot/ language
    - R :: Sweave type exporting using the R program

    For more details and examples, see the file commentary in
    /org-exp-blocks.el/.

    Kudos to Eric Schulte for this new functionality, after
    /org-plot.el/ already his second major contribution.  Thanks
    to Stathis for this excellent program, and for allowing us to
    bundle it with Org mode.

*** New contributed file /org-eval-light.el/

    This module gives control over execution Emacs Lisp code
    blocks included in a file.

    Thanks to Eric Schulte also for this file.

*** Link translation

    You can now configure Org to understand many links created
    with the Emacs Planner package, so you can cut text from
    planner pages and paste them into Org mode files without
    having to re-write the links.  Among other things, this means
    that the command =org-open-at-point-global= which follows
    links not only in Org mode, but in arbitrary files like
    source code files etc, will work also with links created by
    planner. The following customization is needed to make all of
    this work

    #+begin_src emacs-lisp
      (setq org-link-translation-function
            'org-translate-link-from-planner)
    #+end_src

    I guess an inverse translator could be written and integrated into
    Planner.

*** BBDB links may use regular expressions.

    This did work all along, but only now I have documented it.

*** =yank-pop= works again after yanking an outline tree

    Samuel Wales had noticed that =org-yank= did mess up this
    functionality.  Now you can use =yank-pop= again, the only
    restriction is that the so-yanked text will not be pro/demoted or
    folded.

*** Link abbreviations can use %h to insert a url-encoded target value

    Thanks to Steve Purcell for a patch to this effect.

*** Improved XHTML compliance

    Thanks to Sebastian Rose for pushing this.

*** Many bug fixes again.

* Version 6.12
  :PROPERTIES:
  :CUSTOM_ID: v6.12
  :END:
** Overview

   - A region of entries can now be refiled with a single command
   - Fine-tuning the behavior of `org-yank'
   - Formulas for clocktables
   - Better implementation of footnotes for HTML export
   - More languages for HTML export.

** Details

*** A region of entries can now be refiled with a single command

    With =transient-make-mode= active (=zmacs-regions= under
    XEmacs), you can now select a region of entries and refile
    them all with a single =C-c C-w= command.

    Thanks to Samuel Wales for this useful proposal.

*** Fine-tuning the behavior of =org-yank=

    The behavior of Org's yanking command has been further fine-tuned in
    order to avoid some of the small annoyances this command caused.

    - Calling =org-yank= with a prefix arg will stop any special
      treatment and directly pass through to the normal =yank=
      command.  Therefore, you can now force a normal yank with =C-u
      C-y=.

    - Subtrees will only be folded after a yank if doing so will now
      swallow any non-white characters after the yanked text.  This is,
      I think a really important change to make the command work more
      sanely.

*** Formulas for clocktables

    You can now add formulas to a clock table, either by hand, or with a
    =:formula= parameter.  These formulas can be used to create
    additional columns with further analysis of the measured times.

    Thanks to Jurgen Defurne for triggering this addition.

*** Better implementation of footnotes for HTML export

    The footnote export in 6.11 really was not good enough.  Now it
    works fine.  If you have customized =footnote-section-tag=, make
    sure that your customization is matched by
    =footnote-section-tag-regexp=.

    Thanks to Sebastian Rose for pushing this change.

*** More languages for HTML export.

    More languages are supported during HTML export.  This is only
    relevant for the few special words Org inserts, like "Table of
    Contents", or "Footnotes".  Also the encoding issues with this
    feature seem to be solved now.

    Thanks to Sebastian Rose for pushing me to fix the encoding
    problems.

* Version 6.11
  :PROPERTIES:
  :CUSTOM_ID: v6.11
  :END:

** Overview

   - Yanking subtree with =C-y= now adjusts the tree level
   - State changes can now be shown in the log mode in the agenda
   - Footnote in HTML export are now collected at the end of the document
   - HTML export now validates again as XHTML
   - The clock can now be resumed after exiting and re-starting Emacs
   - Clock-related data can be saved and resumed across Emacs sessions
   - Following file links can now use C-u C-u to force use of an external app
   - Inserting absolute files names now abbreviates links with "~"
   - Links to attachment files
   - Completed repeated tasks listed briefly in agenda
   - Remove buffers created during publishing are removed

** Details

*** Yanking subtree with =C-y= now adjusts the tree level

    When yanking a cut/copied subtree or a series of trees, the normal
    yank key =C-y= now adjusts the level of the tree to make it fit into
    the current outline position, without losing its identity, and
    without swallowing other subtrees.

    This uses the command =org-past-subtree=.  An additional change in
    that command has been implemented: Normally, this command picks the
    right outline level from the surrounding *visible* headlines, and
    uses the smaller one.  So if the cursor is between a level 4 and a
    level 3 headline, the tree will be pasted as level 3.  If the cursor
    is actually *at* the beginning of a headline, the level of that
    headline will be used.  For example, lets say you have a tree like
    this:

    #+begin_src org
      ,* Level one
      ,** Level two
      ,(1)
      ,(2)* Level one again
    #+end_src

    with (1) and (2) indicating possible cursor positions for the
    insertion.  When at (1), the tree will be pasted as level 2.  When
    at (2), it will be pasted as level 1.

    If you do not want =C-y= to behave like this, configure the variable
    =org-yank-adjusted-subtrees=.

    Thanks to Samuel Wales for this idea and a partial implementation.

*** State changes can now be shown in the log mode in the agenda

    If you configure the variable =org-agenda-log-mode-items=, you can
    now request that all logged state changes be included in the agenda
    when log mode is active.  If you find this too much for normal
    applications, you can also temporarily request the inclusion of
    state changes by pressing =C-u l= in the agenda.

    This was a request by Hsiu-Khuern Tang.

    You can also press `C-u C-u l' to get *only* log items in the
    agenda, withour any timestamps/deadlines etc.

*** Footnote in HTML export are now collected at the end of the document

    Previously, footnotes would be left in the document where they are
    defined, now they are all collected and put into a special =<div>=
    at the end of the document.

    Thanks to Sebastian Rose for this request.

*** HTML export now validates again as XHTML.

    Thanks to Sebastian Rose for pushing this cleanup.

*** The clock can now be resumed after exiting and re-starting Emacs

    If the option =org-clock-in-resume= is =t=, and the first clock line
    in an entry is unclosed, clocking into that task resumes the clock
    from that time.

    Thanks to James TD Smith for a patch to this effect.

*** Clock-related data can be saved and resumed across Emacs sessions

    The data saved include the contents of =org-clock-history=, and the
    running clock, if there is one.

    To use this, you will need to add to your .emacs

    #+begin_src emacs-lisp
      (setq org-clock-persist t)
      (setq org-clock-in-resume t)
      (org-clock-persistence-insinuate)
    #+end_src

    Thanks to James TD Smith for a patch to this effect.

*** Following file links can now use C-u C-u to force use of an external app.

    So far you could only bypass your setup in `org-file-apps' and force
    opening a file link in Emacs by using a =C-u= prefix arg with =C-c
    C-o=.  Now you can call =C-u C-u C-c C-o= to force an external
    application.  Which external application depends on your system.  On
    Mac OS X and Windows, =open= is used.  On a GNU/Linux system, the
    mailcap settings are used.

    This was a proposal by Samuel Wales.

*** Inserting absolute files names now abbreviates links with "~".

    Inserting file links with =C-u C-c C-l= was buggy if the setting of
    `org-link-file-path-type' was `adaptive' (the default).  Absolute
    file paths were not abbreviated relative to the users home
    directory.  This bug has been fixed.

    Thanks to Matt Lundin for the report.

*** Links to attachment files

    Even though one of the purposes of entry attachments was to reduce
    the number of links in an entry, one might still want to have the
    occasional link to one of those files.  You can now use link
    abbreviations to set up a special link type that points to
    attachments in the current entry.  Note that such links will only
    work from within the same entry that has the attachment, because the
    directory path is entry specific.  Here is the setup you need:

    #+begin_src emacs-lisp
      (setq org-link-abbrev-alist '(("att" . org-attach-expand-link)))
    #+end_src

    After this, a link like this will work

    #+BEGIN_EXAMPLE
     [[att:some-attached-file.txt]]
    #+END_EXAMPLE

    This was a proposal by Lindsay Todd.

*** Completed repeated tasks listed briefly in agenda

    When a repeating task, listed in the daily/weekly agenda under
    today's date, is completed from the agenda, it is listed as DONE in
    the agenda until the next update happens.  After the next update,
    the task will have disappeared, of course, because the new date is
    no longer today.

*** Remove buffers created during publishing are removed

    Buffers that are created during publishing are now deleted when the
    publishing is over.  At least I hope it works like this.

* Version 6.10
  :PROPERTIES:
  :CUSTOM_ID: v6.10
  :END:

** Overview

   - Secondary agenda filtering is becoming a killer feature
   - Setting tags has now its own binding, =C-c C-q=
   - Todo state changes can trigger tag changes
   - C-RET will now always insert a new headline, never an item.
   - Customize org-mouse.el feature set to free up mouse events
   - New commands for export all the way to PDF (through LaTeX)
   - Some bug fixed for LaTeX export, more bugs remain.

** Details

*** Enhancements to secondary agenda filtering

    This is, I believe, becoming a killer feature.  It allows you
    to define fewer and more general custom agenda commands, and
    then to do the final narrowing to specific tasks you are
    looking for very quickly, much faster than calling a new
    agenda command.

    If you have not tries this yet, you should!

**** You can now refining the current filter by an additional criterion
      When filtering an existing agenda view with =/=, you can
      now narrow down the existing selection by an additional
      condition.  Do do this, use =\= instead of =/= to add the
      additional criterion.  You can also press =+= or =-= after
      =/= to add a positive or negative condition.  A condition
      can be a TAG, or an effort estimate limit, see below.

**** It is now possible to filter for effort estimates
     This means to filter the agenda for the value of the Effort
     property.  For this you should best set up global allowed
     values for effort estimates, with

     #+begin_src emacs-lisp
       (setq org-global-properties
             '(("Effort_ALL" . "0 0:10 0:30 1:00 2:00 3:00 4:00")))  
     #+end_src

     You may then select effort limits with single keys in the
     filter.  It works like this: After =/= or =\=, first select the
     operator which you want to use to compare effort estimates:

     : <   Select entries with effort smaller than or equal to the limit
     : >   Select entries with effort larger than or equal to the limit
     : =   Select entries with effort equal to the limit

     After that, you can press a single digit number which is used as an
     index to the allowed effort estimates.

     If you do not use digits to fast-select tags, you can even skip the
     operator, which will then default to
     `org-agenda-filter-effort-default-operator', which is by default
     =<=.

     Thanks to Manish for the great idea to include fast effort
     filtering into the agenda filtering process.

**** The mode line will show the active filter

     For example, if there is a filter in place that does select for
     HOME tags, against EMAIL tags, and for tasks with an estimated
     effort smaller than 30 minutes, the mode-line with show
     =+HOME-EMAIL+<0:30=

**** The filter now persists when the agenda view is refreshed

     All normal refresh commands, including those that move the weekly
     agenda from one week to the next, now keep the current filter in
     place.

     You need to press =/ /= to turn off the filter.  However, when you
     run a new agenda command, for example going from the weekly agenda
     to the TODO list, the filter will be switched off.

*** Setting tags has now its own binding, =C-c C-q=

    You can still use =C-c C-c= on a headline, but the new binding
    should be considered as the main binding for this command.  The
    reasons for this change are:

    - Using =C-c C-c= for tags is really out of line with other
      uses of =C-c C-c=.

    - I hate it in Remember buffers when I try to set tags and I
      cannot, because =C-c C-c= exits the buffer :-(

    - =C-c C-q= will also work when the cursor is somewhere down
      in the entry, it does not have to be on the headline.

*** Todo state changes can trigger tag changes

    The new option =org-todo-state-tags-triggers= can be used to define
    automatic changes to tags when a TODO state changes.  For example,
    the setting

    : (setq org-todo-state-tags-triggers
    :       '((done ("Today" . nil) ("NEXT" . nil))
    :         ("WAITING" ("Today" . t))))

    will make sure that any change to any of the DONE states will remove
    tags "Today" and "NEXT", while switching to the "WAITING" state will
    trigger the tag "Today" to be added.

    I use this mostly to get rid of TODAY and NEXT tags which I apply to
    select an entry for execution in the near future, which I often
    prefer to specific time scheduling.

*** C-RET will now always insert a new headline, never an item.

    The new headline is inserted after the current subtree.

    Thanks to Peter Jones for patches to fine-tune this behavior.

*** Customize org-mouse.el feature set

    There is a new variable =org-mouse-features= which gives you some
    control about what features of org-mouse you want to use.  Turning
    off some of the feature will free up the corresponding mouse events,
    or will avoid activating special regions for mouse clicks.  By
    default I have urned off the feature to use drag mouse events to
    move or promote/demote entries.  You can of course turn them back on
    if you wish.

    This variable may still change in the future, allowing more
    fine-grained control.

*** New commands for export to PDF

    This is using LaTeX export, and then processes it to PDF
    using pdflatex.

    : C-c C-e p     process to PDF.
    : C-c C-e d     process to PDF, and open the file.

*** LaTeX export
    - \usepackage{graphicx} is now part of the standard class
      definitions.
    - Several bugs fixed, but definitely not all of them :-(

*** New option `org-log-state-notes-insert-after-drawers'

    Set this to =t= if you want state change notes to be inserted after
    any initial drawers, i.e drawers the immediately follow the headline
    and the planning line (the one with DEADLINE/SCHEDULED/CLOSED
    information).

* Version 6.09
  :PROPERTIES:
  :CUSTOM_ID: v6.09
  :END:
** Incompatible
*** =org-file-apps= now uses regular expressions, see [[=org-file-apps= now uses regular repressions instead of extensions][below]]

** Details

*** =org-file-apps= now uses regular repressions instead of extensions

    Just like in =auto-mode-alist=, car's in the variable
    =org-file-apps= that are strings are now interpreted as regular
    expressions that are matched against a file name.  So instead of
    "txt", you should now write "\\.txt\\'" to make sure the matching is
    done correctly (even though "txt" will be recognized and still be
    interpreted as an extension).

    There is now a shortcut to get many file types visited by Emacs.  If
    org-file-apps contains `(auto-mode . emacs)', then any files that
    are matched by `auto-mode-alist' will be visited in emacs.

*** Changes to the attachment system

    - The default method to attach a file is now to copy it
      instead of moving it.
    - You can modify the default method using the variable
      `org-attach-method'.  I believe that most Unix people want
      to set it to `ln' to create hard links.
    - The keys =c=, =m=, and =l= specifically select =copy=,
      =move=, or =link=, respectively, as the attachment method
      for a file, overruling  `org-attach-method'.
    - To create a new attachment as an Emacs buffer, you have not
      now use =n= instead of =c=.
    - The file list is now always retrieved from the directory
      itself, not from the "Attachments" property.  We still
      keep this property by default, but you can turn it off, by
      customizing the variable =org-attach-file-list-property=.

* Version 6.08
  :PROPERTIES:
  :CUSTOM_ID: v6.08
  :END:

** Incompatible changes

   - Changes in the structure of IDs, see [[*The default structure of IDs has changed][here]] for details

   - C-c C-a has been redefined, see [[=C-c C-a= no longer calls `show-all'][here]] for details.

** Details

*** The default structure of IDs has changed

    IDs created by Org have changed a bit:
    - By default, there is no prefix on the ID.  There used to be
      an "Org" prefix, but I now think this is not necessary.
    - IDs use only lower-case letters, no upper-case letters
      anymore.  The reason for this is that IDs are now also used
      as directory names for org-attach, and some systems do not
      distinguish upper and lower case in the file system.
    - The ID string derived from the current time is now
      /reversed/ to become an ID.  This assures that the first
      two letters of the ID change fast, so hat it makes sense to
      split them off to create subdirectories to balance load.
    - You can now set the `org-id-method' to `uuidgen' on systems which
      support it.

*** =C-c C-a= no longer calls `show-all'

    The reason for this is that =C-c C-a= is now used for the attachment
    system.  On the rare occasions that this command is needed, use =M-x
    show-all=, or =C-u C-u C-u TAB=.

*** New attachment system

    You can now attach files to each node in the outline tree.  This
    works by creating special directories based on the ID of an entry,
    and storing files in these directories.  Org can keep track of
    changes to the attachments by automatically committing changes to
    git.  See the manual for more information.

    Thanks to John Wiegley who contributed this fantastic new concept
    and wrote org-attach.el to implement it.

*** New remember template escapes

    : %^{prop}p   to insert a property
    : %k          the heading of the item currently being clocked
    : %K          a link to the heading of the item currently being clocked

    Also, when you exit remember with =C-2 C-c C-c=, the item will be
    filed as a child of the item currently being clocked.  So the idea
    is, if you are working on something and think of a new task related
    to this or a new note to be added, you can use this to quickly add
    information to that task.

    Thanks to James TD Smith for a patch to this effect.

*** Clicking with mouse-2 on clock info in mode-line visits the clock.

    Thanks to James TD Smith for a patch to this effect.

*** New file in contrib: lisp/org-checklist.el

    This module deals with repeated tasks that have checkbox
    lists below them.

    Thanks to James TD Smith for this contribution.

*** New in-buffer setting #+STYLE

    It can be used to locally set the variable
    `org-export-html-style-extra'.  Several such lines are
    allowed-, they will all be concatenated.  For an example on
    how to use it, see the [[https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.php][publishing tutorial]].

* Version 6.07
  :PROPERTIES:
  :CUSTOM_ID: v6.07
  :END:

** Overview

   - Filtering existing agenda views with respect to a tag
   - Editing fixed-width regions with picture or artist mode
   - /org-plot.el/ is now part of Org
   - Tags can be used to select the export part of a document
   - Prefix interpretation when storing remember notes
   - Yanking inserts folded subtrees
   - Column view capture tables can have formulas, plotting info
   - In column view, date stamps can be changed with S-cursor keys
   - The note buffer for clocking out now mentions the task
   - Sorting entries alphabetically ignores TODO keyword and priority
   - Agenda views can sort entries by TODO state
   - New face =org-scheduled= for entries scheduled in the future.
   - Remember templates for gnus links can use the :to escape.
   - The file specification in a remember template may be a function
   - Categories in iCalendar export include local tags
   - It is possible to define filters for column view
   - Disabling integer increment during table Field copy
   - Capturing column view is on `C-c C-x i'
   - And tons of bugs fixed.

** Incompatible changes

*** Prefix interpretation when storing remember notes has changed

    The prefix argument to the `C-c C-c' command that finishes a
    remember process is now interpreted differently:

    : C-c C-c       Store the note to predefined file and headline
    : C-u C-c C-c   Like C-c C-c, but immediately visit the note
    :               in its new location.
    : C-1 C-c C-c   Select the storage location interactively
    : C-0 C-c C-c   Re-use the last used location

    This was requested by John Wiegley.

*** Capturing column view is now on `C-c C-x i'

    The reason for this change was that `C-c C-x r' is also used
    as a tty key replacement.

*** Categories in iCalendar export now include local tags

    The locally defined tags are now listed as categories when exporting
    to iCalendar format.  Org's traditional file/tree category is now
    the last category in this list.  Configure the variable
    =org-icalendar-categories= to modify or revert this behavior.

    This was a request by Charles Philip Chan.

** Details

*** Secondary filtering of agenda views.

    You can now easily and interactively filter an existing agenda view
    with respect to a tag.  This command is executed with the =/= key in
    the agenda.  You will be prompted for a tag selection key, and all
    entries that do not contain or inherit the corresponding tag will be
    hidden.  With a prefix argument, the opposite filter is applied:
    entries that do have the tag will be hidden.

    This operation only /hides/ lines in the agenda buffer, it does not
    remove them.  Changing the secondary filtering does not require a
    new search and is very fast.

    If you press TAB at the tag selection prompt, you will be switched
    to a completion interface to select a tag.  This is useful when you
    want to select a tag that does not have a direct access character.

    A double =/ /= will restore the original agenda view by unhiding any
    hidden lines.

    This functionality was John Wiegley's idea.  It is a simpler
    implementation of some of the query-editing features proposed and
    implemented some time ago by Christopher League (see the file
    contrib/lisp/org-interactive-query.el).

*** Editing fixed-width regions with picture or artist mode

    The command @<code>C-c '@</code> (that is =C-c= followed by a single
    quote) can now also be used to switch to a special editing mode for
    fixed-width sections.  The default mode is =artist-mode= which
    allows you to create ASCII drawings.

    It works like this: Enter the editing mode with @<code>C-c
    '@</code>.  An indirect buffer will be created and narrowed to the
    fixed-width region.  Edit the drawing, and press @<code>C-c
    '@</code> again to exit.

    Lines in a fixed-width region should be preceded by a colon followed
    by at least one space.  These will be removed during editing, and
    then added back when you exit the editing mode.

    Using the command in an empty line will create a new
    fixed-width region.

    This new feature arose from a discussion involving Scott Otterson,
    Sebastian Rose and Will Henney.

*** /org-plot.el/ is now part of Org.

    You can run it by simple calling org-plot/gnuplot.  Documentation is
    not yet included with Org, please refer to
    http://github.com/eschulte/org-plot/tree/master until we have moved
    the docs into Org or Worg.

    Thanks to Eric Schulte for this great contribution.

*** Tags can be used to select the export part of a document

    You may now use tags to select parts of a document for inclusion
    into the export, and to exclude other parts.  This behavior is
    governed by two new variables: =org-export-select-tags= and
    =org-export-exclude-tags=.  These default to =("export")= and
    =("noexport")=, but can be changed, even to include a list of
    several tags.

    Org first checks if any of the /select/ tags is present in the
    buffer.  If yes, all trees that do not carry one of these tags will
    be excluded.  If a selected tree is a subtree, the heading hierarchy
    above it will also be selected for export, but not the text below
    those headings.  If none of the select tags is found anywhere in the
    buffer, the whole buffer will be selected for export.  Finally, all
    subtrees that are marked by any of the /exclude/ tags will be
    removed from the export buffer.

    You may set these tags with in-buffer options =EXPORT_SELECT_TAGS=
    and =EXPORT_EXCLUDE_TAGS=.

    I love this feature.  Thanks to Richard G Riley for coming up with
    the idea.

*** Prefix interpretation when storing remember notes

    The prefix argument to the `C-c C-c' command that finishes a
    remember process is now interpreted differently:

    : C-c C-c       Store the note to predefined file and headline
    : C-u C-c C-c   Like C-c C-c, but immediately visit the note
    :               in its new location.
    : C-1 C-c C-c   Select the storage location interactively
    : C-0 C-c C-c   Re-use the last used location

    This was requested by John Wiegley.

*** Yanking inserts folded subtrees

    If the kill is a subtree or a sequence of subtrees, yanking them
    with =C-y= will leave all the subtrees in a folded state.  This
    basically means, that kill and yank are now much more useful in
    moving stuff around in your outline.  If you do not like this,
    customize the variable =org-yank-folded-subtrees=.

    Right now, I am only binding =C-y= to this new function, should I
    modify all bindings of yank?  Do we need to amend =yank-pop= as
    well?

    This feature was requested by John Wiegley.

*** Column view capture tables can have formulas, plotting info

    If you attach formulas and plotting instructions to a table
    capturing column view, these extra lines will now survive an update
    of the column view capture, and any formulas will be re-applied to
    the captured table.  This works by keeping any continuous block of
    comments before and after the actual table.

*** In column view, date stamps can be changed with S-cursor keys

    If a property value is a time stamp, S-left and S-right can now be
    used to shift this date around while in column view.

    This was a request by Chris Randle.

*** The note buffer for clocking out now mentions the task

    This was a request by Peter Frings.

*** Sorting entries alphabetically ignores TODO keyword and priority

    Numerical and alphanumerical sorting now skips any TODO keyword or
    priority cookie when constructing the comparison string.  This was a
    request by Wanrong Lin.

*** Agenda views can sort entries by TODO state

    You can now define a sorting strategy for agenda entries that does
    look at the TODO state of the entries.  Sorting by TODO entry does
    first separate the non-done from the done states.  Within each
    class, the entries are sorted not alphabetically, but in definition
    order.  So if you have a sequence of TODO entries defined, the
    entries will be sorted according to the position of the keyword in
    this sequence.

    This follows an idea and sample implementation by Christian
    Egli.

*** New face =org-scheduled= for entries scheduled in the future.

    This was a request by Richard G Riley.

*** Remember templates for gnus links can now use the :to escape.

    Thanks to Tommy Lindgren for a patch to this effect.

*** The file specification in a remember template may now be a function

    Thanks to Gregory Sullivan for a patch to this effect.

*** Categories in iCalendar export now include local tags

    The locally defined tags are now listed as categories when exporting
    to iCalendar format.  Org's traditional file/tree category is now
    the last category in this list.  Configure the variable
    =org-icalendar-categories= to modify or revert this behavior.

    This was a request by Charles Philip Chan.

*** It is now possible to define filters for column view

    The filter can modify the value that will be displayed in a column,
    for example it can cut out a part of a time stamp.  For more
    information, look at the variable
    =org-columns-modify-value-for-display-function=.

*** Disabling integer increment during table field copy

    Prefix arg 0 to S-RET does the trick.

    This was a request by Chris Randle.

* Version 6.06

** Overview

   - New, more CSS-like setup for HTML style information
   - Attributes in hyperlinks, for example alt and title for images
   - Simplified way to specify file links
   - Modified behavior of time stamps in iCalendar export
   - New way to compare times during a property search
   - New option `org-open-directory-means-index'
   - New parameters :prefix and :prefix1 for include files
   - New option :index-style for org-publish
   - New structure for the timestamp directory for org-publish.

** Incompatible changes

*** New structure for the timestamp directory for org-publish.

    The timestamp directory now uses SHA1 hashed versions of the
    path to each publishing file.  This should be a consistent
    and system-independent way to handle things.  The change
    means that your next publishing command will publish each and
    every file again, but just once, until new time stamps are in
    place.

** Details

*** New setup for HTML style information

    In order to create a more CSS-like setup of the HTML style
    information, the following changes have been made:
    - The default style has moved to a constant,
      =org-export-html-style-default= and should not be changed
      anymore.
    - The default of the variable =org-export-html-style= is now
      just the empty string.  This variable should receive
      settings that are Org-wide.  When using org-publish, this
      variable is associated with the =:style= property and can
      be used to establish project-wide settings.
    - There is a new variable =org-export-html-style-extra= that
      should be used for file-local settings.  Org-publish can, if
      necessary, access this variable with the =:style-extra=
      property.
    - When a file is published, the values of 
      - org-export-html-style-default
      - org-export-html-style
      - org-export-html-style-extra
      are all inserted into the HTML header, in the given
      sequence.

    This follows a proposal by Rustom Mody.

*** Attributes in hyperlinks

    You can now set attributes in hyperlinks that will be used when
    publishing to HTML.  For example, if you want to use the ALT and
    TITLE attributes of an inlined image, here is who to do this:

    : [[./resources/img/a.jpg{{alt="This is image A" title="Image with no action"}}]]

    Thanks to Charles Chen for this idea.

*** Simplified way to specify file links

    In a link, you can now leave out the "file:" prefix if you write an
    absolute file name like =/Users/dominik/.emacs= or =~/.emacs=, or if
    you write a relative file name by using =./= or =../= to start the
    file path.  You cannot write a plain file name, because plain text
    is interpreted as an internal link.

    So for example, a link to an image /A.jpg/ with a thumbnail
    /B.jpg/ can now be written like

    #+begin_src org
      ,[[./A.jpg][./B.jpg] ]
    #+end_src

*** Changes in iCalendar export

    Deadline and scheduling time stamps are now treated
    differently in iCalendar export.  The default behavior is now
    the following:

    - a DEADLINE that appears in an entry that is a TODO item is
      used as the item's DUE date.  Therefore, such a deadline
      will no longer show up in the calendar.

    - a DEADLINE that appears in an item that is *not* a TODO
      item is exported as an EVENT and will show up in the
      calendar.

    - a SCHEDULED timestamp in a TODO item will be used as the
      items DTSTART.  Therefore, such a timestamp will not show
      up in the calendar.

    - a SCHEDULED timestamp in an item that is not a TODO has no
      effect on iCalendar export at all.  It will be ignored.

    Of course this would not be Emacs if you could not configure exactly
    what you want.  Take a look at the variables
    =org-icalendar-use-deadlines= and =org-icalendar-use-scheduled= if
    you want to go back to the old behavior or even do something
    completely different.

    Thanks to Karen Cooke for triggering this change.

*** New way to compare times during a property search

    If the comparison value in a property search is a string that
    is enclosed in angular brackets, a time comparison will be
    done.  For example

    : +DEADLINE>="<2008-12-24 15:20>"

    looks for entries with a deadline on or after that time.
    Special allowed values are "<now>" (with time) and "<today>"
    (date only).

    This is based on a request by Manish.

*** New option `org-open-directory-means-index'

    When set, a link pointing to a directory will actually open
    the index.org file in that directory.  This is a good setting
    inside a publishing project.  When not set, you get a
    finder/explorer window for that directory, or dired,
    depending on system and setup.

    This follows a request by Richard Riley.

*** New parameters :prefix and :prefix1 for include files

    These parameters specify prefixes for each line of included
    text.  :prefix1 is only for the first line, :prefix for all
    other lines.

    This follows a proposal by Richard Riley.

*** New option :index-style for org-publish

    This option can be used to switch the style of the index
    produced by org-publish.  Can be `list' (index is just an
    itemized list of the titles of the files involved) or `tree'
    (the directory structure of the source files is reflected in
    the index).  The default is `tree'.

    Thanks to Manuel Hermenegildo for the patch.

*** In the Agenda, inclusion of archives can now be toggled
    - Pressing =v= will toggle inclusion of trees with the
      ARCHIVE tag, this includes obviously the archive sibling.
    - Pressing `C-u v'  will include trees with ARCHIVE tag, and
      will also include all archive files that are currently
      associated with your agenda files.

    This was triggered by a proposal by Manuel Hermenegildo.

* Version 6.05

If I were to name my releases, this one would be called "Adam".  Adam,
you definitely owe me a beer :-).  And I owe you one, too - thanks for
all the great ideas.

** Overview

   - Use cursor position in agenda for remember, scheduling and deadlines
   - New API for mapping a function over all or selected entries
   - Remember templates can be filed to beginning/end of a file
   - Visiting a filed remember buffer immediately
   - BBDB anniversaries are now links
   - Column view in the agenda now cleans the ITEM field
   - The format of section numbers in exported files is configurable
   - Direct, single key access to allowed values in column view
   - New hook to hack exported iCalendar files
   - Log mode in agenda now shows end time for CLOCK line

** Incompatible changes

*** `C-c C-x C-k' now calls `org-mark-entry-for-agenda-action'
    It used to call =org-cut-special=, but that is also at bound
    to the key =C-c C-x C-w=.

** Details

*** Making use of the cursor position in the agenda

    The date at the cursor in the agenda (and also in the
    calendar) can now be used to schedule entries, or to set the
    date in a remember template correctly.  It is also designed
    to make it easier to move an entry to a date picked in the
    agenda.  Thanks to Thomas Baumann for starting the thread
    that led to this development.

**** Calling remember with the cursor date in the agenda

     If you want to use the date at the agenda cursor in a
     remember template, start remember from the agenda with the
     keys =k r=.  While the template is being filled in, the
     default date for all time stamps, and also for all
     interactive escapes like =%^t= is now the date at the cursor
     in the agenda.  The exact same command can also be used from
     the calendar if you prefer that.

**** Picking a date for scheduling/deadline in the agenda

     You may now pick the date for scheduling an item or for
     setting a deadline in the agenda, where you have the best
     overview over free time slots.  This is a two step process.
     
     1. First you pick the entry that should be acted upon.  In
        the agenda, you use the keys =k m=.  In an org-mode file,
        this is on =C-c C-x C-k=.

     2. Then you find the agenda date you want to apply.  When the
        cursor is anywhere in the block belonging to that date,
        press =k s= to schedule, or =k d= to put a deadline.  The
        agenda is not updated immediately, press =r= if you want
        it to show the affected entry in the right place.

*** New API for mapping a function over all or selected entries

    Org has sophisticated mapping capabilities to find all
    entries satisfying certain criteria.  Internally, this
    functionality is used to produce agenda views, but there is
    also an API that can be used to execute arbitrary functions
    for each or selected entries.  The main entry point for this
    API is:

     #+begin_example
     -- Function: org-map-entries func &optional match scope &rest skip
          Call FUNC at each headline selected by MATCH in SCOPE.
     
          FUNC is a function or a lisp form.  The function will be
          called without arguments, with the cursor positioned at
          the beginning of the headline.  The return values of all
          calls to the function will be collected and returned as
          a list.
     
          MATCH is a tags/property/todo match as it is used in the
          agenda tags view.  Only headlines that are matched by
          this query will be considered during the iteration.
          When MATCH is nil or t, all headlines will be visited by
          the iteration.
     
          SCOPE determines the scope of this command, it can
          specify a file, all agenda files, the current tree and
          much more.
      
          The remaining args are treated as settings for the
          skipping facilities of the scanner.
     #+end_example
     
The function given to that mapping routine can really do anything you
like.  Here is a simple example that will turn all entries in the
current file with a tag =TOMORROW= into TODO entries with the keyword
=UPCOMING=.  Entries in comment trees and in archive trees will be
ignored.

#+begin_src emacs-lisp
  (org-map-entries
     '(org-todo "UPCOMING")
     "+TOMORROW" 'file 'archive 'comment)
#+end_src

The following example counts the number of entries with TODO keyword
=WAITING=, in all agenda files.

#+begin_src emacs-lisp
(length (org-map-entries t "/+WAITING" nil 'agenda))
#+end_src

*** Changes in Remember templates

**** Remember templates can now use the cursor date in the agenda
     Use =k r= to start remember from the agenda, with enforcing the
     cursor date as default for any time stamps created by the template.

**** Filing remember templates to the beginning or end of a file
     You may now set the heading part of a remember template definition
     to `top' or `bottom'.  The template will then be filed as a level 1
     entry to the beginning or end of the target file,
     respectively.  Thanks to Adam Spiers for this proposal.

**** You can jump to the location of a note immediately after filing it
     Just include the =%&= escape anywhere in the template.  An
     interesting combination now is to use =%!%&=, which will
     immediately file and visit the note, which is equivalent to
     generating the note directly in the target location.  Thanks to
     Adam Spiers for this proposal.

*** BBDB anniversaries are now links.

    If you are using =%%(bbdb-anniversaries)= to list anniversaries in
    the agenda, you can now directly access the entry that triggered a
    listed anniversary from the agenda.  Just click the anniversary - it
    is a link now.  Thanks to Thomas Baumann for a patch to this effect.

*** Column view in the agenda now cleans the ITEM field

    See the new variable
    =org-agenda-columns-remove-prefix-from-item=.  Thanks to Adam Spiers
    for this proposal.

*** The format of section number in exported files is configurable

    See the new variable `org-export-section-number-format'.  Thanks to
    Adam Spiers for this proposal.

*** Direct access to allowed values in column view

    In column view, if you press a key 1-9 or 0, the corresponding
    values from the list of allowed values for that field at point will
    be directly selected.  Thanks to Levin Du for this proposal and a
    patch to this effect.

*** New hook to hack exported iCalendar files

    The new hook `org-before-save-iCalendar-file-hook' runs just before
    the buffer with a created iCalendar export is saved.  This is what I
    settled for after a long discussion with Adam Spiers about doing
    some special filtering automatically.

*** Log mode in agenda now shows end time for CLOCK lines

    When turning on log mode in the agenda with =l=, clock lines
    will now also list the end time, not only the starting time.
    Thanks to Tian Qiu for bringing this up again.

*** Fixes and additions for org-publish

    - The :include and :index-title properties in org-publish
      work now as advertized
    - the #+TITLE of a page will be used in the index
    - new :completion-function property can define a hook to be
      run after publishing a file.

    Thanks to Manuel Hermenegildo for a patch to this effect.

* Version 6.04

** Overview

- Statistics cookies [/] and [%] for TODO entries
- Editing source code example in the proper mode
- iCalendar now defines proper UIDs for entries
- New properties for customizing subtree export

** Incompatible changes
  
- The default of the variable `org-tags-match-list-sublevels' is
  now `t'.  The main reason for this is that it is easier to
  explain in the manual and will lead to fewer surprises.

- The former CONTRIB directory is now called "contrib".  This was
  already the case in the git distribution, but the tar and zip
  archives still did this wrong.

** Details
 
*** Statistics for TODO entries

The [/] and [%] cookies have already provided statistics for
checkboxes.  Now they do the same also for TODO entries.  If a headline
contains either cookie, changing the TODO state of any direct child will
trigger an update of this cookie.  Children that are neither TODO nor
DONE are ignored.

There have already been requests to automatically switch the parent
headline to DONE when all children are done.  I am not making this a
default feature, because one needs to make many decisions about which
keyword to use, etc.  Instead of a complex customization variable, I am
providing a hook that can be used.  This hook will be called each time a
TODO statistics cookie is updated, with the cursor in the corresponding
line.  Each function in the hook will receive two arguments, the number
of done entries, and the number of not-done entries, and you can use the
hook to change the state of the headline.  Here is an example
implementation:

#+begin_src emacs-lisp
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all sub-entries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+end_src

*** Editing source code example in the proper mode

If you are writing a document with source code examples, you can include
these examples into a =#+BEGIN_SRC lang ... #+END_SRC= or (with the
org-mtags module loaded) a =<src...= structure.  =lang= stands for the
Emacs mode used for editing the language, this could be =emacs-lisp= for
Emacs Lisp mode examples, or =org= for Org mode examples.  You can now
use the key "C-c '" (that is C-c followed by the single quote) to edit
the example in its native mode.  This works by creating an indirect
buffer, narrowing it to the example and setting the appropriate
mode.  You need to exit editing by pressing "C-c '" again.  This is
important, because lines that have syntactic meaning in Org will be
quoted by calling this command.

"C-c '" also edits include files, the setupfile in a =#+setufile= line,
and all those little foreign snippets like:

#+begin_src org
,#+HTML: this code can be edited in html-mode

,#+BEGIN_HTML
,Same here
,#+BEGIN_HTML

,#+LaTeX: this code can be edited in latex-mode

,#+BEGIN_LaTeX
,Same here
,#+BEGIN_LaTeX

,#+BEGIN_SRC fortran
,Here we can edit in fortran-mode
,#+END_SRC
#+end_src

*** iCalendar now defines proper UIDs for entries

This is necessary for synchronization services.  The UIDs are created
using the the org-id.el module which is now part of the Org core.  If
you set the variable

: (setq org-icalendar-store-UID t)

then all created UIDs will be stored in the entry as an =:ID:=
property.  This is off by default because it creates lots of property
drawers even if you only play with iCalendar export.  But if you plan to
use synchronization, you really need to turn this on.

Diary sexp entries do not yet receive proper persistent UIDs,
because they are transformed to iCalendar format by icalendar.el
which creates fresh UIDs each time, based on the current time.

An interesting aspect of Org is that a single outline node can give rise
to multiple iCalendar entries (as a timestamp, a deadline, a scheduled
item, and as a TODO item). Therefore, Org adds prefixes "TS-", "DL-"
"CS-", and "TD-" to the UID during iCalendar export, depending on what
triggered the inclusion of the entry.  In this way the UID remains
unique, but a synchronization program can still figure out from which
entry all the different instances originate.

*** New properties for customizing subtree export.

When exporting a subtree by selecting it before calling the export
command, you can now use the properties =EXPORT_TITLE=, =EXPORT_TEXT=,
and =EXPORT_OPTIONS= to overrule the global =#+TITLE=, =#+TEXT=, and
=#+OPTIONS= settings.  You can also set an export file name with
=EXPORT_FILE_NAME= that will overrule the file name derived from the
buffer's file name.  As far as the options are concerned, the global
=#+OPTIONS= will still be read, and only the options you give in the
property will be overwritten.  For example:

#+begin_src org
,#+OPTIONS: skip:nil
,* Computer Tricks
,  :PROPERTIES:
,  :EXPORT_FILE_NAME: ct.html
,  :EXPORT_TITLE: Steve's collected computer tricks
,  :EXPORT_OPTIONS: h:2 toc:nil
,  :END:
#+end_src

*** New way to define tags for an entire file.

    Tags that are defined in a line like
    : #+FILETAGS: work urgent
    are inherited by all entries in the file.

    Thanks to Manuel Hermenegildo for this proposal.

* Version 6.03

** Overview

   - Description lists are now supported natively
   - Block quotes for export
   - Fontified code examples in HTML export
   - Include files for export
   - Text before the first headline is now exported by default
   - In-buffer options may now be collected in an external file
   - The in-buffer settings keywords may now be lower case
   - Completion of structure elements
   - Startup visibility can now be influenced by properties
   - Clock task history, moving entries with the running clock
   - BBDB anniversaries much faster
   - New contrib files: org-eval.el and org-mtags.el

** Incompatible changes

- The text before the first headline is now exported by default

  Previously, the default was to not include text in an org-mode
  buffer before the first headline.  From now on, the default it to
  include it.  If you like the old default better, customize the
  variable =org-export-skip-text-before-1st-heading= or set the
  value on a per-file basis with

#+begin_src org
#+OPTIONS: skip:t
#+end_src

** Details

*** Description lists are now supported natively

    A plain list will be exported as a description list if the first
    item in the list has a /term/ and the /description/, separated by
    " :: ".  For example

    : Emacs software by Carsten Dominik
    : - RefTeX    :: Support for LaTeX Labels, References, Citations
    : - CDLaTeX   :: more LaTeX functionality for Emacs
    : - TeXmathp  :: checking LaTeX buffers for Math mode.
    : - ORG       :: An Emacs mode for notes and projet planning.
    : - CONSTANTS :: An Emacs package for inserting the definition of
    :                natural constants and units into a buffer.
    : - IDLWAVE   :: The Emacs modes for editing and
    :                running IDL and WAVE CL files.

    will be rendered as

    Emacs software by Carsten Dominik
     - RefTeX    :: Support for LaTeX Labels, References, Citations
     - CDLaTeX   :: more LaTeX functionality for Emacs
     - TeXmathp  :: checking LaTeX buffers for Math mode.
     - ORG       :: An Emacs mode for notes and projet planning.
     - CONSTANTS :: An Emacs package for inserting the definition of
                    natural constants and units into a buffer.
     - IDLWAVE   :: The Emacs modes for editing and
                    running IDL and WAVE CL files.

    This works now in the HTML exporter, we still need to supoort
    it with the LaTeX and ASCII exporters.

*** Block quotes for export

    For quoting an entire paragraph as a citation, use

    #+begin_src org
      ,#+BEGIN_QUOTE:
      ,Everything should be made as simple as possible,
      ,but not any simpler -- Albert Einstein
      ,#+BEGIN_QUOTE:
    #+end_src

    which will render as

    #+BEGIN_QUOTE:
    Everything should be made as simple as possible, but not any
    simpler -- Albert Einstein
    #+END_QUOTE:

*** Fontified code examples in HTML export

    You can now get code examples fontified like they would be fontified
    in an Emacs Buffer, and export the result to HTML.  To do so, wrap
    the code examples into the following structure:

    #+begin_src org
      ,#+BEGIN_SRC emacs-lisp
      ,  (defun org-xor (a b)
      ,    "Exclusive or."
      ,    (if a (not b) b))
      ,#+END_SRC
    #+end_src

    In the export, this will then look like this (if you are now looking
    at the ASCII export and do not see anything interesting, go and
    check out the HTML version at https://orgmode.org/Changes.html).

    #+BEGIN_SRC emacs-lisp
      (defun org-xor (a b)
        "Exclusive or."
        (if a (not b) b))
    #+END_SRC

    The string after the =BEGIN_SRC= is the name of the major emacs mode
    that should be used to fontify the code example, without the "-mode"
    at the end of the mode name.  For example, if you are writing an Org
    tutorial with Org examples included, you would use "org" as the
    language identifier - in fact, I have used just that in the example
    above.

    Currently this works only for HTML export, and requires the
    /htmlize.el/ package, version 1.34 or later.  For other backends,
    such structures are simply exported as EXAMPLE.

*** Include files for export

    A line like

    : #+INCLUDE "file" markup lang

    will lead to the inclusion of the contents of FILE at the moment of
    publishing.  FILE should be surrounded by double quotes, this is
    obligatory if it contains space characters.  The parameters MARKUP
    and LANG are optional.  MARKUP can be "example", "quote", or
    "src".  If it is "src", LANG should be the name of the Emacs mode to
    be used for fontifying the code.  For example:

    : Here is my /.emacs/ file:
    : #+INCLUDE "~/.emacs" src emacs-lisp

*** The text before the first headline is now exported by default

    Previously, the default was to not include text in an org-mode
    buffer before the first headline.  From now on, the default it to
    include it.  If you like the old default better, customize the
    variable =org-export-skip-text-before-1st-heading= or set the value
    on a per-file basis with

    : #+OPTIONS: skip:t


*** In-buffer options may now be collected in an external file

    If you would like to share the Org setup between a number of files,
    you can now store in-buffer setup in a file and simply point to that
    file from each file that should read it.  If you write in a buffer

    : #+SETUPFILE: "path/to/setup.org"

    then this file will be scanned for in-buffer options like
    =#+STARTUP=, =#+TITLE=, or =#+OPTIONS=.

*** The in-buffer settings keywords may now be upper or lower case
    
    From now on, it makes no difference is you write =#+STARTUP= or
    =#+startup=, to make these lines less imposing.  Similarly for all
    other in-buffer keywords.

*** Completion of structure elements

    As a new experimental feature, Org now supports completion of
    structural elements like =#+BEGIN_EXAMPLE= in a special way.  It
    work by typing, for example "<e" and then pressing TAB, on an
    otherwise empty line.  "<e" will expand into a complete EXAMPLE
    template, with the cursor positioned in the middle.  Currently
    supported templates are:

    : <s   #+begin_src
    : <e   #+begin_example
    : <q   #+begin_quote
    : <v   #+begin_verse
    : <l   #+begin_latex
    : <L   #+latex:
    : <h   #+begin_html
    : <H   #+html:
    : <a   #+begin_ascii
    : <i   #+include

    This is an experimental feature, please comment!  See also
    below under /org-mtags.el/.

*** Startup visibility can now be influenced by properties

    When Emacs opens an Org mode buffer, the outline visibility is set
    to a startup value that is taken from the variable
    =org-startup-folded=, or from a =#+STARTUP= setting in the
    buffer.  After this has happened, the buffer will now also be
    scanned for entries with a =VISIBILITY= property.  Wherever such a
    property is found, the corresponding subtree will get its visibility
    adjusted.  Allowed values for the property are:

    - folded   :: Fold the subtree
    - children :: Show the text after the headline, and the
      headlines of all direct children
    - content :: Show all headlines in the tree, but no text below any
      headline
    - all :: Show the entire subtree

    For example, I am using this for the huge /Changes.org/ file that is
    the source for the list of visible changes you are reading right
    now.  The top-most entry in this file always describes the changes
    in my current working version.  The start of this section currently
    looks like this:

    #+begin_src org
      ,* Version 6.03
      ,  :PROPERTIES:
      ,    :VISIBILITY: content
      ,  :END:
      ,** Overview
    #+end_src

    This was a proposal by Ben Alexander.

    The command =C-u C-u TAB= will switch back to the startup visibility
    of the buffer.

*** Clock task history, and moving entries with the running clock

    Org now remembers the last 5 tasks that you clocked into, to make it
    easier to clock back into a task after interrupting it for another
    task.

    - =C-u C-u C-c C-x C-i= (or =C-u C-u I= from the agenda) will
      clock into that task and mark it as current default task.
    - =C-u C-c C-x C-i= (or =C-u I= from the agenda) will offer a
      list of recently clocked tasks, including the default task,
      for selection. =d= selects the default task, =i= selects
      the task that was interrupted by the task that is currently
      being clocked. =1=,... selects a recent task.  When you
      select a task, you will be clocked into it.
    - You can use =C-u C-c C-x C-j= to jump to any of these
      tasks.

    When moving an entry using structure editing commands, archiving
    commands, or the special subtree cut-and-paste commands =C-c C-x
    C-w= and =C-c C-x C-y=, the running clock marker and all clock
    history markers will be moved with the subtree.  Now you can start a
    clock in a remember buffer and keep the clock running while filing
    the note away.  See also the variable
    `org-remember-clock-out-on-exit'.

*** BBDB anniversaries much faster

    =bbdb-anniversaries= is now much faster, thanks to a new approach
    using a hash for birthdays.  Thanks to Thomas Baumann for a patch to
    this effect.

*** New files in the contrib directory

    Do people think any of these should become core?

    - org-eval.el :: This new module allows to include the result of the
                     evaluation of Lisp code (and other scripting
                     languages) into the buffer, similar to the =<lisp>=
                     tag of [[http://mwolson.org/static/doc/emacs-wiki.html#Lisp-Tricks][Emacs Wiki]] and [[http://mwolson.org/static/doc/muse/Embedded-Lisp.html#Embedded-Lisp][Muse]].
    - org-mtags.el :: This new modules allows you to use Muse-like tags
                      for some structure definitions in Org.  For
                      example, instead of
	 : #+BEGIN_EXAMPLE
	 : ...
	 : #+END_EXAMPLE

	 you can write

         : <example>
	 : ...
	 : </example>

	 In fact, I myself find these easier to type and to look at.
         Also, it will allow you to more easily move text and files
         back and forth between Org and Muse.  For a list of supported
         structure elements, see the commentary in the org-mtags.el
         file.

	 If you load this module and use the "<i" etc completion
         described above, the Muse form will automatically be
         inserted.

*** Bug fixes
 
   Many bug fixes again.  Will this ever stop?

* Version 6.02

** Overview

   - Column view (mostly) works now in XEmacs
   - Summaries for columns in the agenda
   - The special property Effort can be used for effort estimates
   - New operators for property searches
   - Search commands can now include archive files.
   - Clock tables can include the archive files
   - Orgtbl radio tables generalized.

** Details

*** Column view works now in XEmacs

    I had already given up on this, but Greg Chernev (who implemented
    noutline.el for XEmacs and in this way kept Org alive on XEmacs) has
    done it again and provided the patches to make column view work
    under XEmacs.  There are still some problems, but the basics work
    and we will iron out the remaining issues, hopefully soon.

*** Summaries for columns in the agenda

    If any of the columns has a summary type defined, turning on column
    view in the agenda will show summaries for these columns.  Org will
    first visit all relevant agenda files and make sure that the
    computations of this property are up to date.  This is also true for
    the special =CLOCKSUM= property.  Org will then sum the values
    displayed in the agenda.  In the daily/weekly agenda, the sums will
    cover a single day, in all other views they cover the entire
    block.  It is vital to realize that the agenda may show the same
    entry multiple times (for example as scheduled and as a deadline),
    and it may show two entries from the same hierarchy (for example a
    /parent/ and it's /child/).  In these cases, the summation in the
    agenda will lead to incorrect results because some values will count
    double.

*** The special property Effort can be used for effort estimates

    If you want to plan your work in a very detailed way, or if
    you need to produce offers with quotations of the estimated
    work effort, you may want to assign effort estimates to
    entries.  If you are also clocking your work, you may later
    want to compare the planned effort with the actual working
    time.  Effort estimates can now be stored in a special
    property =Effort=, displayed side-to-side with clock sums,
    and also be summed over a day, in order to show the planned
    work load of a day.  See the manual for more details.

*** New operators for property searches

    Property searches can now choose a number of different operators for
    comparing values.  These operators are `=', `<>', `<', `<=', `>',
    and `>='.

    When the search term uses the operator with plain number like
    =+Effort>=2.7=, then the property value is converted to a number and
    a numerical comparison takes place.

    When the search term uses a string on the right hand side of the
    operator, a string comparison is done: =+PRIORITY<"C".=

    Finally, if the right hand side is enclosed in curly braces, a
    regexp match is done: =aaa={regexp}=.  In this case you should use
    only the `=' or `<>' operators, meaning "does match" or "does not
    match", respectively.

    This was a triggered with a request by Dan Davison.

*** Search commands can now include archive files.

    If the value of the customization variable
    =org-agenda-text-search-extra-files= contains the symbol
    =agenda-archives= as the first element in the list, all archive
    files of all agenda files will be added to the list of files to
    search.  This is relevant for the search view =C-c a s=, as well as
    for the agenda files multi-occur command =C-c a /=.

*** Clock tables can include the archive files

    There are new values for the =:scope= parameter of a clock
    table.  This can now be =file-with-archives= and
    =agenda-with-archives=, in order to collect information not only
    from the current file or all agenda files, but also from all archive
    files that are currently used by these files.

*** Orgtbl radio tables generalized.

    The options available for radio tables using orgtbl-mode have been
    expanded.  You may use several reception points and formats for the
    same table, you may have special formatting in the last line of the
    table, and many table parameters may be functions, so that more
    general transformations are possible.  Jason Riedy provided a patch
    for this, and he will hopefully come up with some examples.  Thanks!

* Version 6.01

This is a new major release, mostly because of structural changes
in Org.  However, since this took a while, there is also a long
list of small improvements and some new significant features.

** Overview

   - The Org distribution has a new structure
   - New system for selecting modules to load
   - New archiving mechanism: The Archive Sibling
   - Support for Sebastian Rose's JavaScript org-info.js.
   - Internal links work now better in HTML export
   - Export commands can be done in the background
   - Flexible setting of the time block shown by the clock table
   - Clock table can be included in the agenda
   - Support for ISO week dates (ISO 6801)
   - Tag inheritance can be limited to a subset of all tags
   - Entries can be sorted by TODO keyword
   - And some more small fixes and improvements

** Incompatible changes

*** The Org distribution has a new structure

    In the distribution files as well as in the GIT repository, the lisp
    files are now located in a subdirectory "lisp", and the
    documentation files are located in a subdirectory "doc".  If you are
    running Org directly from the unpacked distribution archive (zip or
    tar file, or GIT repository), you need to modify your settings for
    load-path accordingly.

** Details

*** The Org distribution has a new structure

    In the distribution files as well as in the GIT repository, the lisp
    files are now located in a subdirectory "lisp", and the
    documentation files are located in a subdirectory "doc".  If you are
    running Org directly from the unpacked distribution archive (zip or
    tar file, or GIT repository), you need to modify your settings for
    load-path accordingly.

*** Loading modules

    Org mode has now a system for loading modules by simply
    configuring an option that lists all the modules you want to
    use.  Customize the variable `org-modules'.  That variable
    lists both modules that are part of the Org mode core (and in
    this way part of Emacs), and modules that are contributed
    packages.  Contributed modules will only be available when
    you have installed them properly (most likely by downloading
    the distribution and adding /path/to/orgdir/contrib/lisp to
    your load path).

*** New archiving mechanism: The Archive Sibling

    There is a new method to archive entries in the current file:
    By moving it to a sibling called the /Archive Sibling/.  That
    sibling has the heading "Archive" and also carries the
    ARCHIVE tag.  This can be a great way to do archiving inside
    a project, to get parts of the project out of the way and to
    wait with true archiving (moving to another file) until the
    entire project is done.  Archiving to a sibling keeps much of
    the context, for example inherited tags and approximate tree
    position in tact.

    The key binding for the is "C-c C-x A", and from the agenda
    buffer you can simply use "A".

    Thanks to Ilya Shlyakhter for this rather clever idea.

*** Support for Sebastian Rose's JavaScript org-info.js.

    This fascinating program allows a completely new viewing
    experience for web pages created from Org files.  The same
    document can be viewed in different ways, and switching
    between the views as well as navigation uses single-key
    commands.

    One of the view types is an /Info-like/ interface where you
    can jump through the sections of the document with the `n'
    and `p' keys (and others).  There is also a /folding/
    interface where you can fold the document much like you can
    fold it in org-mode in Emacs, and cycle through the
    visibility both locally and globally.

    To set this up, all you need to do is to make sure that
    org-infojs.el gets loaded (customize the variable org-modules
    to check).  Then add this line to the buffer:

    : #+INFOJS_OPT: view:info

    In that line, you can configure the initial view and other
    settings.  Available views are =info= for the info-like
    interface, and =overview=, =content=, and =showall= for the
    folding interface.  See the manual for more details.  The
    JavaScript program is served from
    https://orgmode.org/org-info.js, and your exported HTML files
    will automatically get it from there.  However, you may want
    to be independent of the existence and stability of
    orgmode.org and install a copy locally.  Then you need to
    change the path from which the script is loaded, either by
    using something like

    : #+INFOJS_OPT: view:info path:../scripts/org-info.js

    or by configuring the variable =org-infojs-options=.

    For details see the documentation provided by Sebastian Rose
    together with org-info.js.

*** Export improvements

    - The export of internal links to HTML now works a lot
      better.  Most internal links that work while editing an Org
      file inside Emacs will now also work the the corresponding
      HTML file.

    - You can run many of the export commands in the background
      by using `C-c C-u C-c C-e' in order to start the process.
      RIght now this will only work if "emacs" is the right
      command to get to your Emacs executable - I hope to make
      this less system dependent in the future.

    Both these are based on requests by Ilya Shlyakhter.

*** Improvements to clocktable

    - The clocktable is now much more flexible and user friendly
      when trying to specify the time block that should be
      considered when constructing the table.

      The =:block= parameter to the table can now look like any
      of these:
      
      | :block       | meaning               |
      |--------------+-----------------------|
      | 2008         | The entire year 2008  |
      | 2008-04      | The month April 2008  |
      | 2008-04-02   | The day April 2, 2008 |
      | 2008-W14     | ISO-Week 14 in 2008   |
      | today        | Today                 |
      | today-5      | The day five days ago |
      | thisweek     | The current week      |
      | thisweek-2   | Two weeks ago         |
      | thismonth    | The current month     |
      | thismonth-12 | Same month, last year |
      | lastmonth    | Same as thismonth-1   |


      What is more, you can now use the =S-left= and =S-right=
      keys to shift the time block around.  The cursor needs to
      be in the =#+BEGIN: clocktable= line for this to work.  If
      the current block is =today=, =S-left= with switch to
      yesterday.  If the current block is =2008-W14=, =S-right=
      will switch to the following week.

    - When the clocktable is collecting from several files, the
      total time for each file will now also be listed.  This was
      a request from Bernt Hansen.

    - If you turn on the new clock report mode with the "R" key in
      the agenda, a clock table will be attached to the agenda,
      showing the clock report for the file scope and time
      interval of the agenda view.  To turn this on permanently,
      configure the variable
      =org-agenda-start-with-clock report-mode=.  To modify the
      properties of the table, in particular the =:maxlevel=
      depth, configure =org-agenda-clockreport-parameter-plist=.

*** Support for ISO week dates (ISO 6801)

    The agenda now shows the ISO week for the displayed dates, in
    the form =W08= for week 8.

    The keys =d=, =w=, =m=, and =y= in the agenda view now accept
    prefix arguments.  Remember that in the agenda, you can
    directly type a prefix argument by typing a number, no need
    to press =C-u= first.  The prefix argument may be used to
    jump directly to a specific day of the year, ISO week, month,
    or year, respectively.  For example, =32 d= jumps to February
    1st, =9 w= to ISO week number 9.  When setting day, week, or
    month view, a year may be encoded in the prefix argument as
    well.  For example, =200712 w= will jump to week 12 in the
    year 2007.  If such a year specification has only one or two
    digits, it will be mapped to the interval 1938-2037.

    When entering a date at the date prompt, you may now also
    specify an ISO week.  For example

    : w4              Monday of week 4
    : fri w4          Friday of week 4
    : w4-5            Same as above
    : 2012 w4 fri     Friday of week 4 in 2012.
    : 2012-W04-5      Same as above

    So far I have not implemented the effect of
    `org-read-date-prefer-future' on this functionality, because
    it seemed too magic for me.  I'd appreciate comments on this
    issue:  Should `org-read-date-prefer-future' also push dates
    into the next year if the week you are entering has already
    passed in the current year?  For consistency I guess this
    should be the case, but I cannot quite wrap my head around
    it.

    I hope but am not entirely convinced that this will behave
    sanely also during the first/last week of a year.  Please
    test extensively and report back.

    This was a request by Thomas Baumann.

*** Improvements in Search View
    
    - Calling search view with a C-u prefix will make it match
      only in TODO entries.

    - The single quote is no longer considered a word character
      during search, so that searching for the word "Nasim" will
      also match in "Nasim's".


*** Misc
    
    - Inheritance of tags can now be limited to a subset of all
      tags, using the variable =org-use-tag-inheritance=.  This
      variable may now be a regular expression or a list to
      select the inherited tags.  Thanks to Michael Ekstrand for
      this excellent proposal.
      
      The regexp option is also implemented for
      =org-use-property-inheritance=, so that you can now select
      properties for inheritance my name.

    - The INHERIT flag to the function =org-entry-get= can be set
      to the symbol =selective=.  If this is the case, then the
      value of the property will be retrieved using inheritance
      if and only if the setting in
      =org-use-property-inheritance= selects the property for
      inheritance.

    - There are now special faces for the date lines in the
      agenda/timeline buffers, and another special face for days
      that fall on a weekend: =org-agenda-date= and
      =org-agenda-date-weekend=.  Both these faces are initially
      similar to the =org-agenda-structure= face, but you can
      customize them freely.

    - When an entry already has a scheduling or deadline time
      stamp, calling `C-c C-s' or `C-c C-d', respectively, will
      now use that old date as the default, and you can can use
      the "++4d" syntax to invoke shifts relative to that default
      date.  Simply pressing RET at the prompt will keep the
      default date, not switch to today.
      
      This was an omission in the earlier implementation, spotted
      by Wanrong Lin.  Thanks!
      
    - File names in remember templates can be relative, if they
      are, they will be interpreted relative to =org-directory=.

    - The handling of the clipboard when inserting into remember
      templates is now much better, and gives more control on what
      should be inserted with new %-escapes:
      
      - =%c= - Now always insert the head of the kill ring, never
        the X clipboard.

      - =%x= - Insert the content of the X clipboard. This is the
	first non-empty value from the PRIMARY, SECONDARY and
	CLIPBOARD X clipboards. 
	
      - =%^C= - This allows the user to choose between any of the
	clipboard values available, the kill ring head, and the
	initial region if set.  
	
      - =%^L= - Like =%^C=, but this inserts an org link using the
	selected value.
	
      Thanks to James TD Smith for this patch.
	
    - Table export to an internal file can now use a format
      specification, similar to the formats that are used by
      orgtbl radio tables.  The default format is in the variable
      =org-table-export-default-format=.  You can use properties
      =TABLE_EXPORT_FILE= and =TABLE_EXPORT_FORMAT= to specify the
      file name to which the export should go, and a local
      format.  For example:
     
      : :PROPERTIES:
      : :TABLE_EXPORT_FILE: ~/xx.txt
      : :TABLE_EXPORT_FORMAT: orgtbl-to-generic :splice t :sep "\t"
      : :END:

      Thanks to James TD Smith for this patch.

    - Entries can be sorted by TODO keyword, and the order is given
      by the definition sequence of the TODO keywords in the
      variable =org-todo-keywords=, or in the =#+TODO= line.  Use
      the "o" key when sorting with =C-c ^=.
      
      Thanks to James TD Smith for this patch.

* Version 5.23

** Overview

   - New keyword search agenda view
   - Many new extensions available in the CONTRIB directory
   - New remember template option: pre-selection contexts
   - Modifying list/headline status of a line
   - Granularity while editing time stamps
   - New repeaters mechanisms
   - New parameters for dynamic blocks ad the clock table
   - Limiting iCalendar export to fewer entries
   - =M-RET= splits lines again
   - New hooks

** Incompatible changes

   - The variable `org-time-stamp-rounding-minutes' is now a list
     of two values - if you have configured this variable before,
     please do it again.

** Details

*** New keyword search agenda view

    `C-c a s' now invokes a special agenda view that can be used
    to search notes by keyword and regular expressions.  In
    particular, it does not require a single regular expression
    or string to search for, but it can search for a number
    keywords or regexps that can occur in arbitrary sequence in
    the entry.  The search knows the boundaries of an entry, can
    use simple Boolean logic and is reasonably fast.  For
    example, the search string

    : +computer +wifi -ethernet -{8\.11[bg]}

    will search for note entries that contain the keywords
    =computer= and =wifi=, but not the keyword =ethernet=, and
    which are also not matched by the regular expression
    "8\.11[bg]", meaning to exclude both 8.11b and 8.11g.  If the
    first character of the search string is an asterisk, the
    search will only look at headlines - otherwise it will look
    at the headine and the text below it, up to the next
    (possibly sub-) heading.

    The command searches all agenda files, and in addition the
    files listed in =org-agenda-text-search-extra-files=.
    
    I find it very useful to define a custom command to do such
    a search only in a limited number of files (my notes files),
    like this:

    : ("N" "Search notes" search ""
    :   ((org-agenda-files '("~/org/notes.org" "~/org/computer.org"))
    :    (org-agenda-text-search-extra-files nil)))

*** Many new extensions available in the CONTRIB directory

    - Phil Jackson's /org-irc.el/ is now part of the Org mode
      core, which means it will become part of Emacs soon.

    - The new development model already starts to pay off, a
      number of interesting extensions are now part of the
      distribution.  Check the file CONTRIB/README for a list.

    - There is a new variable `org-default-extensions'.
      Configuring this variable makes it *very* easy to load
      these default extensions - eventually this will be expanded
      to cover contributed extensions as well.

*** New remember template option: pre-selection contexts

    - Remember template definitions now allow six elements.  The
      last element defines the contexts in which the template
      should be offered.  It can be a list of major modes, a
      function, =t= or =nil=.  If it is a list of major-mode, the
      template will be available only when =org-remember= is
      called from a buffer in one of these modes.  If it is a
      function, the template will be offered only if the function
      returns `t' when called in the current buffer.  A value of
      =t= or =nil= for this element means select this template in
      any context.

      One possible application for this would be to have several
      templates all using the same selection letter, and choosing
      the right one based on context.  For example, think of
      tasks describing a bug in a source code file.  With the
      following configuration we make sure that the bug reports
      are filed into the appropriate sections of the target file.

      #+begin_src emacs-lisp
        (setq org-remember-templates
         '(("Elisp" ?b "* %a\n\n%i%?" "~/bugs.org" "Elisp bugs" (emacs-lisp-mode))
           ("C Bugs" ?b "* %a\n\n%i%?" "~/bugs.org" "C bugs" (cc-mode))))
      #+end_src

      See (info "(org)Remember templates") for details.

*** Modifying list/headline status of a line

    - `C-c -' has now more functions:
      + In a table, add a hline as before
      + In an item list, cycle bullet type as before
      + In a normal line, turn it into an item
      + In a headline, turn it into an item
      + If there is an active region, turn each line into an item.
        But if the first region line is already an item, remove
        item markers from all lines.

      Based on proposals by Bastien.

    - `C-c *' has now more functions
      + in a table, recompute, as before
      + in a normal line, convert it to a sub heading.
      + at an item, convert it into a subheading
      + if there is an active region, convert all lines in the
        region to headlines.  However, if the first lie already is
        a heading, remove the stars from all lines int he region.

     Based on proposals by Bastien.
 
*** Changes related to time stamps

    - The value variable =org-time-stamp-rounding-minutes= is now a list
      of two values.  The first applies when creating a new time
      stamp.  The second applies when modifying a timestamp with
      S-up/down.  The default for this new task is 5 minutes, but 15 may
      also be a very good value for many people.  If S-up/down is used
      on a time stamp where the minute part is not compatible with this
      granularity it will be made so.  You can bypass this by using a
      prefix argument to exactly specify the number of minutes to shift.

      This was a proposal by Adam Spiers.

    - New repeaters that shift a date relative to today, or that make
      sure that the next date is in the future.  For example:

      : ** TODO Call Father
      :    DEADLINE: <2008-02-10 Sun ++1w>
      :    Marking this DONE will shift the date by at least one week,
      :    but also by as many weeks as it takes to get this date into
      :    the future.  However, it stays on a Sunday, even if you called
      :    and marked it done on Saturday.
      : ** TODO Check the batteries in the smoke detectors
      :    DEADLINE: <2005-11-01 Tue .+1m>
      :    Marking this DONE will shift the date to one month after
      :    today.

      Proposed by Wanrong Lin and Rainer Stengle.

*** New parameters for dynamic blocks ad the clock table

    - There is a new =:link= parameter for the clocktable.  When set,
      the headlines listed in the table will be links to the original
      headlines.

    - There is a new =:content= parameter that is passed to the writer
      function of the dynamic block.  Use this parameter to pass the
      previous content of the block to the writer function, in case you
      want to make the outcome dependent on the previous content.

*** Limiting iCalendar export to fewer entries

    - New way to limit iCalendar export to the entries captured in
      an agenda view.  This is done by "writing" the agenda view
      using `C-x C-w' to a file with extension .ics.

      This was a request by Kyle Sexton.

*** Misc

   - Due to a popular revolt shortly after the 5.22 release, =M-RET= can
     again be used to split a line so that the rest of the line becomes
     the new heading.  However, if you do this in a heading containing
     tags, the tags will stay in the old line.

     Customize the variable =org-M-RET-may-split-line= if you don't want
     this command to split a line in the middle.  The same variable also
     influences line splitting in items and in tables.

   - There are three new hooks:

     =org-follow-link-hook=: runs after following a link
     =org-publish-before-export-hook=: runs before export
     =org-publish-after-export-hook=: runs after export
     
* Version 5.22

** Incompatible changes

   - The variable `org-log-done' is now less complex.
   - The in-buffer settings for logging have changed.  Some
     options no longer exists, some new ones have been added.

** Details

*** Changes to logging progress

    There is now more control over which state changes are being logged
    in what way.  Please read carefully the corresponding sections in
    the manual.  Basically:

    - The variable `org-log-done' has been simplified, it no
      longer influences logging state changes and clocking out.
    - There is a new variable for triggering note-taking when
      clocking out an item: `org-log-note-clock-out'.
    - Logging of state changes now has to be configured on a
      pre-keyword basis, either in `org-todo-keywords' or in the
      #+TODO in-buffer setting.
    - These per-keyword settings allow more control.  For example

      : WAIT(w@)    Record a note when entering this state.
      : WAIT(w!)    Record a timestamp when entering this state.
      : WAIT(w@/!)  Recore a note when entering and timestamp
      :             when leaving this state.  This is great for
      :             getting a record when switching *back* from
      :              WAIT to TODO.
      : WAIT(/!)    Record a timestamp when leaving this state.
      :             Here we not even define a fast access
      :             character, but just the logging stuff.

    This was triggered by requests from Wanrong Lin and Bernt Hansen.

*** Other

   - M-RET no longer brakes a line in the middle, it will make a new
     line after the current or (if cursor is at the beginning of the
     line) before the current line.

   - RET, when executed in a headline after the main text and before the
     tags will leave the tags in the current line and create a new line
     below the current one.

* Version 5.21

  Bug fixes, in particular the long-hunted bug about wrong window
  positions after pressing SPACE in the agenda.  Hopefully this is
  really fixed.

* Version 5.20

** Overview

*** Remember/Refile/Goto

    - The use of prefix arguments for the commands `org-remember'
      and `org-refile' has been normalized.

    - The clock can now safely be used in a remember buffer.
      
    - The variable `org-remember-use-refile-when-interactive'
      introduced only in 5.19 is already obsolete.  Please use
      `org-remember-interactive-interface' instead.

    - It is no longer necessary to update the refiling targets.

    - Automatic isearch in `org-goto'.

    - Outline-path-completion as alternative org-goto interface.

*** Misc

    - Checkboxes now work hierarchically.

    - `C-k' can now behave specially in headlines.

    - Repeater for tasks in plain timestamps.

    - All clock intervals of an item show in agenda/timeline.
      
    - New parameter =:step= for clocktable, to get daily reports.

    - Never loose a repeaded scheduled item from the agenda.

    - Archiving a subtree now stores the outline path in a property.

    - Links to messages in Apple Mail.

    - Bug fixes.

** Incompatible Changes
   
   - The variable `org-remember-use-refile-when-interactive'
     introduced only in 5.19 is already obsolete.  Please use
     `org-remember-interactive-interface' instead.

** Details

*** Remember/Refile/Goto

    - The use of prefix arguments for the commands `org-remember'
      and `org-refile' has been normalized:

      + when called without prefix argument, the command does its
        normal job, starting a remember note or refiling a tree.

      + when called with a single C-u prefix, these commands can be
        used to select a target location and to jump there.  In
        the case of `org-remember', you will be prompted for a
        template and then Emacs jumps to the default target
        location or this template.  In the case of `org-refile',
        you select a location from the refile target list and jump
        there.

      + when called with two prefixes (`C-u C-u'), the command
        jumps to the location last used for storing a note or a
        moved tree.

    - When the clock is running inside an remember buffer, storing
      the remember buffer with `C-c C-c' will automatically clock
      out.  This was inspired by a request by Rainer Stengle. 
      
    - The variable `org-remember-use-refile-when-interactive'
      introduced only in 5.19 is already obsolete.  Please use
      `org-remember-interactive-interface' instead.  This new
      variable does select the interface that is used to select
      the target for a remember note in an interactive way.
      Possible values are:

      + `outline': Use an outline of the document to select a
        location.  
      + `outline-path-completion': Use completion of an outline
        path to select a location.
      + `refile': Offer the `org-refile-targets' as possible
        targets.

    - It is no longer necessary to update the refiling targets -
      they are always current.

    - In `org-goto', typing characters now automatically starts
      isearch from the beginning of the buffer.  The isearch is
      special also because it only matches in headline.  This
      goes some way toward saving org-goto from being removed
      from Org mode.  Thanks to Piotr Zielinski for the code, and
      sorry that it took me so long to put it in.  If you prefer
      to use single letters n,p,f,b,u,q for navigation as before,
      configure the variable `org-goto-auto-isearch'.

    - Outline-path-completion is now available as an alternative
      interface in the command `org-goto'.  Please select the
      default interface you'd like to use with the new variable
      `org-goto-interface'.  You can then select the alternative
      interface with a prefix argument to `C-c C-j' (org-goto).  I
      am considering to make outline-path-completion the default
      interface.  Comments?


*** Misc

    - Checkboxes now work hierarchically.  When a plain-list item
      with a checkbox has children with checkboxes, the status of
      the item's checkbox is calculated from the children, each
      time a checkbox is toggled with C-c C-c.  Thanks to Miguel
      A. Figueroa-Villanueva for a patch to this effect.

    - There is a new variable `org-special-ctrl-k'.  When set,
      `C-k' will behave specially in headlines:

      + When the cursor is at the beginning of a headline, kill
        the entire line and possible the folded subtree below the
        line.
      + When in the middle of the headline text, kill the
        headline up to the tags.
      + When after the headline text, kill the tags.

      This is following a proposal by Piotr Zielinski.

    - You can now also have a plain (as opposed to deadline or
      scheduled) repeater timestamp in a task.  Switching the task
      to DONE will now also shift a plain time stamp.  This was a
      request by Austin Frank.

    - If an entry is clocked multiple times, it will now show up
      several times in the agenda and timeline buffers, when
      log-mode is on.  This was a proposal by Jurgen Defurne.
      
    - The clock table accepts a new parameter =:step=.  This
      parameter can be `day' or `week' and will result in separate
      tables for each day or week in the requested time interval.
      This was triggered by a proposal by Sacha Chua in her [[http://sachachua.com/blog/2007/12/clocking-time-with-emacs-org/][blog]].

    - A time-stamp with a repeater now no longer refers to the
      date *closest* to the current day.  Instead, it means either
      today or the most recent match.  This change makes sure that
      overdue scheduled or deadline items never disappear from the
      agenda.  With the previous convention, an overdue scheduled
      item would disappear.  For example, a weekly item scheduled
      for Sunday would appear as overdue until Wednesday, and the
      suddenly disappear until next Sunday.  Now the item will
      show up as "Sched 7x" on Saturday.  From Sunday on it will
      be in the list as "Scheduled", i.e. old sins will be
      forgiven.  This follows a request by Warong, Dennis and
      Bernt.

    - Archiving a subtree now creates an additional property,
      =ARCHIVE_OLPATH=.  This property contains the "path" in the
      outline tree to the archived entry, as it was in the
      original file.  For example, archiving =Fix the door= in the
      following hierarchy
      
      : * Tasks
      : ** HOME
      : *** Garage
      : **** Fix the door
      
      will file is with the following property
      
      : :ARCHIVE_PATH: Task/HOME/Garage
      
      Note that you can configure (i.e. limit) the information
      that gets stored upon archiving with the variable
      `org-archive-save-context-info'.

    - New file `org-mac-message.el' by John Wiegley to create
      links for messages in Apple Mail, and to follow these
      links.

    - Bug fixes.

* Version 5.19

** Overview

   - Column view can list the clocked times of a subtree.

   - Storing remember notes can use the `org-refile' interface.

   - Storing remember notes no longer produced empty lines.

   - Moving subtrees now folds all siblings of the subtree.

   - New variable `org-agenda-todo-keyword-format'.

   - Hack to allow brackets in link descriptions.

   - Clocking into an entry can enforce a specific TODO state.

   - EXPORT_FILE_NAME may be an absolute file name with "~".

   - Bug fixes, lots of them.

** Details

   - A new special column definition lists the sum of all CLOCK
     entries in a subtree.  For example

     : #+COLUMNS: %20ITEM %10Time_Estimate{:} %CLOCKSUM

     will allow you to compare estimated times (as given in the
     Time_Estimate property) with the clocked times.  This was a
     request by Bernt Hansen.

   - Storing remember notes can now use the `org-refile'
     interface instead of the `org-goto' interface (see the
     variable `org-remember-use-refile-when-interactive').
     Nothing will change if the note is stored immediately after
     pressing `C-c C-c' in the =*Remember*= buffer.  But if you
     have chosen (e.g. by pressing `C-u C-c C-c') to
     interactively select the filing location (file and
     headline), the refile interface will be used instead.  I am
     excited about this change, because the `org-goto' interface
     is basically a failure, at least for this application.  Note
     that in any case the refile interface has to be configured
     first by customizing `org-refile-targets'.

   - Notes inserted with remember now remove any whitespace
     before and after the note before being pasted, so that there
     will be no empty lines inserted together with the note.  We
     could invent special syntax in remember templates to allow
     creating empty lines before a note - is there anyone who'd
     want this?

   - Moving subtrees now folds all siblings of the subtree.  This
     is the only reasonably simple way I could find to avoid the
     reported inconsistencies in the folding state of the outline
     tree after moving entries.  There are reasons to like this
     new behavior, because it easily visualizes where the tree is
     located after the move.  Still, not everyone might be happy
     with this.  Massive complaining would be needed to make me
     fix this.

   - New variable `org-agenda-todo-keyword-format' to specify the
     width of the TODO keyword field in the agenda display.  Use
     it to get things to line up better.  This was a proposal by
     Rainer Stengele.

   - If a link description inserted with `C-c C-l' contains
     brackets, the brackets will now be converted into curly
     braces.  This looks similar enough.  Supporting brackets in
     link descriptions is, for technical reasons too long to
     explain here, complex.

   - The new option `org-clock-in-switch-to-state' can be set to
     a TODO state that will be enforced when the clock is started
     on an entry.  This follows an idea by Sacha Chua.

   - The EXPORT_FILE_NAME property may now also be an absolute
     file name, and it may contain abbreviations like "~" for the
     users home directory.  This was requested by Adam Spiers.

   - Bug fixes, lots of them.

* Version 5.18

  Minor fixes.

* Version 5.17

** Details

*** Whitespace

    - When cutting, pasting, or moving subtrees and items, the
      empty lines *before* the subtree/item now belong to the
      part and will be moved with it.  There is one exception to
      this rule: If the first child is moved down (or,
      equivalently, the second is moved up), the amount of empty
      lines *above* the first child to be moved along with it is
      limited by the number of empty lines *below* it.  This
      sounds complicated, but it allows to have extra empty space
      before the first child and still have good behavior of the
      subtree motion commands.

    - Plain lists items work the same.

    I believe we have finally nailed this one.  Thanks to Daniel
    Pittman for bring this up again and to Eric Schulte for
    pointing out that it is the empty lines *before* an entry
    that really count.

    This change was non-trivial, please give it a good test and
    let me know about any problems.

*** Remember

    - The new command `org-remember-goto-last-stored' will jump
      to the location of the remember note stored most recently.
      If you have `org-remember' on a key like `C-c r', then you
      can go to the location with a double prefix arg: `C-u C-u
      C-c r'.  This was a proposal by Rainer Stengele.

    - Template items that are being prompted for can now specify
      a default value and a completion table.  Furthermore,
      previous inputs at a specific prompt are captured in a
      history variable.  For example:

      : %^{Author|Roald Dahl|Thomas Mann|Larry Niven}

      will prompt for an author name.  Pressing RET without
      typing anything will select "Roald Dahl".  Completion will
      give you any of the three names.  And a history will be
      kept, so you can use the arrow keys to get to previous
      input.  The history is tied to the prompt.  By using the
      same prompt in different templates, you can build a history
      across templates.  The ideas for this came from proposals
      by Bastien and Adam.

    - When a remember template contains the string `%!', the note
      will be stored immediately after all template parts have
      been filled in, so you don't even have to press `C-c
      C-c'. The was a proposal by Adam Spiers.

*** Refile

    - `org-refile-targets' has a new parameter to specify a
      maximum level for target selection.  Thanks to Wanrong Lin
      for this proposal.

    - When the new option `org-refile-use-outline-path' is set,
      refile targets will be presented like a file path to the
      completion interface: "level 1/level 2/level 3".  This
      may be the fastest interface yet to get to a certain
      outline entry.  Do we need to use this interface in other
      places?  Thanks to Jose Ruiz for this proposal.

* Version 5.16

** Details

*** Restriction lock on agenda scope

    You can now permanently lock the agenda construction to a
    certain scope, like a file or a subtree.  So instead of
    pressing "<" for each command in the agenda dispatcher, you
    only once select a restriction scope.  All subsequent agenda
    commands will than respect this restriction.  For example,
    you can use this at work, to limit agendas to your work file
    or tree, and at home to limit to the home file or tree.  Or
    you can use it during the day in order to focus in on certain
    projects.

    You select a scope with the command `C-c C-x <', which
    restricts to the current subtree.  When called with a `C-u'
    prefix, the restriction is to the current file.  You can also
    make restrictions from the speedbar frame, see below.

    When making a new restriction and an agenda window is
    currently visible, it will immediately be updated to reflect
    the new scope.  If you like you can display an agenda view
    and then watch it change in various scopes.

    To get rid of the restriction, use the command "C-c C-x >".
    Or press ">" in the agenda dispatcher.  Also, and use of "<"
    in the dispatcher will disable the restriction lock and
    select a new restriction.

    Thanks to Rick Moynihan for triggering this development. 

*** Imenu and Speedbar support

    - Org mode now supports Imenu.  For example, with the setting

      : (add-hook 'org-mode-hook 
      :    (lambda () 'imenu-add-to-menubar "Imenu"))

      a menu will be created in each Org mode buffer that
      provides access to all level 1 and level 2 headings.  The
      depth of the menu can be set with the variable
      `org-imenu-depth'.

    - org-mode now supports Speedbar.  This means that you can
      drill into the first and second level headlines of an
      Org mode file right from the speedbar frame.

    - You can set a restriction lock for the Org mode agenda to a
      file or a subtree directly from the speedbar frame.  Just
      press "<" with the cursor on an Org mode file or subtree to
      set the lock and immediately update the agenda if it is
      visible.  Use ">" to get rid of the lock again.

* Version 5.15

** Details

   - There are new special properties TIMESTAMP and TIMESTAMP_IA.
     These can be used to access the first keyword-less active
     and inactive timestamp in an entry, respectively.

   - New variable `org-clock-heading-function'.  It can be set to
     a function that creates the string shown in the mode line
     when a clock is running.  Thanks to Tom Weissmann for this
     idea.

   - Bug fixes.

* Version 5.14

** Overview

   + Remember and related stuff
     - New command `org-refile' to quickly move a note.
     - Easy way to jump to the target location of remember template.
     - New %-escapes in remember templates: %c %(...) and %[...]
     - `org-remember-insinuate' simplifies remember setup

   + Emphasis and Font-lock stuff
     - Stacked emphasis is no longer allowed.
     - You may finally emphasize a single character like ~*a*~.
     - Font-lock now can hide the emphasis markers
     - Text in the "=" emphasis is exported verbatim
     - There is a new emphasis marker "~" for verbatim text
     - Constructs treated specially by the exporters can be highlighted

   + Properties and Column view
     - More control over which properties use inheritance
     - CATEGORY="work" can now be used in a tags/property search
     - the {+} summary type can specify a printf-style output format
     - New currency summary type {$}

   + The date/time prompt
     - While entering data, watch live the current interpretation.
     - The date prompt now prefers to select the future
     - Easier modification of time in an existing time stamp.

   + Export
     - You can now export some special strings in HTML, like "..."
     - #+EMAIL: may contain several email addresses

   + Agenda
     - In the agenda, a few keys have changed: `g', `G', and `e'.

   + Miscellaneous
     - Class-dependent sectioning structures in LaTeX export.
     - Radio-lists modeled after the radio tables.
     - The default for `org-ellipsis' is back to nil
     - Support for pabbrev-mode
     - New variable `org-show-entry-below'.

** Incompatible changes

   - If you have customized the variable `org-emphasis-alist' or
     org-export-emphasis-alist', you need to do it again by first
     canceling your customization and then adding it again.

   - I know that some people have defined their own private helper
     functions to select a specific remember template, without being
     prompted, like this:

     : (defun my-remember-template-n ()
     :    (interactive)
     :    (org-remember ?n))

     You need to modify this.  The character selecting the template
     must now be the /second/ argument to `org-remember':

     : (defun my-remember-template-n ()
     :    (interactive)
     :    (org-remember nil ?n))

   - `C-c C-w' now refiles an entry.  To get a sparse tree of
     deadlines, use `C-c / d' instead.

** Details

*** Remember and related stuff

    - New command `org-refile' to quickly move a note to a
      different place.  It is bound to `C-c C-w'.  The foremost
      application might be to put a note or task captured with
      `remember' into the proper list or project.  The command
      offers a list of possible refiling targets for completion.
      These are headings under which the entry will be inserted
      as a subitem.  By default, this will offer all top-level
      headings in the current buffer, but you can configure the
      variable `org-refile-targets' to get more complex
      definitions.  For example:

      : (setq org-refile-targets '((nil . (:level . 2))))

      selects all level 2 headlines in the current buffer as
      targets.  And

      : (setq org-refile-targets
      :      '((org-agenda-files . (:tag . "refile"))))

      searches all agenda files and selects headlines that are
      explicitly marked with the tag :refile: .  Note that the
      list of targets is built upon first use only, to rebuilt
      it, call the command `C-c C-w' with a double prefix
      argument.

      This is based on an idea and example implementation by Max
      Mikhanosha.  Many thanks Max.

    - You can now use a C-u prefix on `org-remember' to jump to
      the location where a specific templates stores its notes.
      For example, if you have `org-remember' bound to `C-c r',
      then `C-u C-c r n' will get you to the file and headline
      given in the template associated with the letter "n".

      This was proposed by someone, but I have lost track who.
      Sorry, and thanks anyway.

    - New %-escapes in remember templates:

      : %c     insert the current clipboard, like C-y would do
      : %(..)  evaluate Lisp expression and insert the result
      : %[..]  include file

      Thanks to Adam Spiers and Tim O'Callaghan.

    - New function `org-remember-insinuate' that makes is easier
      to set Org mode specific values for remember variables.
      Thanks to Michael Olson for this proposal.  It is
      equivalent to:

      : (require 'remember)
      : (setq remember-annotation-functions '(org-remember-annotation))
      : (setq remember-handler-functions '(org-remember-handler))
      : (add-hook 'remember-mode-hook 'org-remember-apply-template))

      You might still want to set `org-default-notes-file' to
      provide a default for templates without a file, and
      `org-directory' to show where to find other org files.

*** Emphasis and Font-lock stuff

    - Stacked emphasis like ~*/bold italic/*~ is no longer allowed.

    - You may finally emphasize a single character like ~*a*~.

    - Font-lock now can hide the emphasis markers, just like Muse
      does.  Configure the variable `org-hide-emphasis-markers'
      if you want this.  Showing the characters continues to be
      the default in Org mode.

    - Text in the "=" emphasis is now exported verbatim, i.e. no
      further parsing and interpretation of this text takes place.  So
      you can write ~=quoted *xxx* a_x = b=~.  This and the following
      point implement a request by Daniel Clemente.

    - There is a new emphasis marker "~" which marks text to be
      exported verbatim, without special formatting.  Inside an
      org-mode file, this text is highlighted with the org-verbatim
      face.  I am not happy with the face yet (currently is is like
      org-code, but underlined), please suggest a better one.

    - Whether an emphasis environment is verbatim or not is now an
      extra flag in the variable `org-emphasis-alist'.  If you have
      configured this variable, do it again by first canceling your
      customization to revert to the default, and then adding it
      again.

    - New variable `org-highlight-latex-fragments-and-specials'.
      When turned on, Org mode will highlight all strings that
      are treated in a special way by the exporters.  This is
      great for export-oriented writing, but maybe a bit noisy
      for note taking, so this feature is off by default.

*** Properties and Column view

    - `org-use-property-inheritance' may now also be a list of
      property names that should be treated with inheritance
      during searches.

    - CATEGORY="work" can now be used in a tags/property search,
      even if the category is not specified as a property in the
      entry, but rather is inherited or derived from #+CATEGORY.
      Thanks to Adam, Tim, and Bastien for an interesting
      discussion around this issue.

    - Summary type improvements in column view.
      * The ={+}= summary type can specify a printf-style output format
        for computed values like this: ={+;%5.2f}= This was triggered by
        a report by Levin.
      * New currency summary type ={$}=, which so far is just a
        shorthand for ={+;%.2f}=.  Do we need to have a currency symbol
        in front of each value.  Scott Jaderholm asked for this, but I
        am not sure if this is already what he meant.

*** The date/time prompt

    There have been several small but *very* useful additions to
    the date prompt.

    - While entering data at the date prompt, the current interpretation
      of your input is shown next to your input in the minibuffer.  I
      find this great to understand how the input works.  If you find
      the extra stuff in the minibuffer annoying, turn it off with
      `org-read-date-display-live'.

    - The date prompt now prefers to select the future.  If you enter a
      date without a month, and the day number is before today (for
      example, on the 16th of the month you enter "9"), Org mode will
      assume next month.  Similarly, if you enter a month and no year,
      next year will be assumed if the entered month is before the
      current, for example if you enter "May" in September.  Thanks to
      John Rakestraw for this great suggestion.  If you find it
      confusing, turn it off with `org-read-date-prefer-future'.

    - When modifying an existing date using `C-c .' at the stamp, the
      time or time range in the stamp are now offered as default input
      at the prompt.  This goes a long way to simplifying the
      modification of an existing date.  Thanks to Adam Spiers for this
      proposal.

*** Export (all implemented by Bastien...)

    - You can now export special strings in HTML.  Here is the
      list of newly performed conversions:

      | Org | Description                        | HTML     |
      |-----+------------------------------------+----------|
      | ~\\~  | double backslash followed by minus | &shy;    |
      | ~--~  | two dashes (minuses)               | &ndash;  |
      | ~---~ | three dashes (minuses)             | &mdash;  |
      | ~...~ | three dots                         | &hellip; |

      You can turn this globally on or off with
      `org-export-with-special-strings' or locally with "-:t" or "-:nil"
      in the #+OPTIONS line.  Thanks to Adam Spiers for starting the
      discussion, and thanks to Daniel Clemente and William Henney for
      relevant inputs.

    - Comma-separated emails in =#+EMAIL=: are correctly
      exported.  Thanks to Raman for pointing out this omission.

*** Agenda

    - In the agenda, a few keys have changed
      : g  does now the same a "r", refresh current display,
      :    because "g" is the Emacs standard for "refresh"
      : G  toggle the time grid, used to be "g"
      : e  Execute another agenda command, pretty much the same as
      :    `C-c a', but shorter and keep the same agenda window.

*** Miscellaneous (much of it from Bastien)

    - You can now select the sectioning structure of your LaTeX export
      by setting it either globally (`org-export-latex-default-class')
      or locally in each Org file (with #+LaTeX_CLASS: myclass).  You
      can also customize the list of available classes and their
      sectioning structures through the new `org-export-latex-classes'
      option.  Thanks to Daniel for discussions and suggestion on this
      issue.

    - You can send and receive radio lists in HTML, LaTeX or TeXInfo,
      just as you send and receive radio tables.  Check the
      documentation for details and examples.

    - The default for `org-ellipsis' is back to nil, some people
      seem to have had problems with the face as a default.

    - Support for pabbrev-mode, needs pabbrev version 1.1.  Thanks to
      Phillip Lord for adapting his package to make this possible.

    - New variable `org-show-entry-below' to force context-showing
      commands to expose the body of a headline that is being
      shown.  Thanks to Harald Weis for pointing out this omission.

* Version 5.13i

** Details

   - On the date/time prompt, you can now also answer with something
     like +2tue to pick the second tuesday from today.  This was a
     proposal by Sacha Chua.

   - When interpopating into Lisp formulas in the spreadsheet, the
     values of constants and properties are no longer enclosed into
     parenthesis.  When interpolating for calc, this still happens in
     order to allow expressions in constants.  This problem was reported
     by Eddward DeVilla.

   - When a directory is listed in `org-agenda-files', all files with
     extension matched by the new variable `org-agenda-file-regexp' in
     that directory will be agenda files.

   - Bug fixes.

* Version 5.13

** Overview

   - Bug fixes and improvements in column view
     + All known bugs fixed.
     + A Column view can be captured into a dynamic block.
     + The ITEM column is formatted core compactly.
     + Also ITEM can be edited with `e'

   - The agenda dispatcher
     + `<' cycles through restriction states.
     + Multi-character access codes to commands (= sub-keymaps).

   - Sorting improvements
     + User-defined sorting keys.
     + Sorting by properties.
     + Sorting of plain lists.

   - HTML <div> structure

   - Other stuff
     + New variables, several of them.
     + Drawers can be set on a per-file basis.
     + Better control over priority fontification in agenda.
     + M-up and M-down now move the current line up and down.
     + Abort remember template selection with C-g.

** Details

*** Bug fixes and improvements in column view

    - All the bugs described by Scott Jaderholm have been fixed
      (at least I hope so...).

    - You can now capture a column view into a dynamic block, for
      exporting or printing it.  The column view can be

      + global, i.e. for the entire file
      + local, i.e. for the subtree where the dynamic block is
      + from an entry with a specific :ID: property.

      You can identify the entry whose column view you want to
      capture by assigning an :ID: property, and use that property
      in the dynamic block definition.  For example:

      : * Planning
      :   :PROPERTIES:
      :     :ID: planning-overview
      :   :END:
      :
      : [...]
      :
      : * The column view
      : #+BEGIN: columnview :hlines 1 :id "planning-overview"
      :
      : #+END:

      Use `C-c C-x r' to insert such a dynamic block, and you will
      be prompted for the ID.

    - When the current column format displays TODO keyword,
      priority or tags, these parts are stripped from the content
      of the ITEM column, making for more compact and readable
      entries.  When any of these "properties" are not listed in
      the current column format, they are instead retained in the
      ITEM column.

    - You can now also edit the ITEM column with `e'.

*** The agenda dispatcher

    - Instead of pressing `1' to restrict an agenda command to
      the current buffer, or `0' to restrict it to the current
      subtree or region, you can now also press `<' once or
      twice, respectively.  This frees up `1' and `0' for user
      commands, a request by Bastien.  In fact, "<" cycles
      through different restriction states.  "1" and "0" are
      still available for backward compatibility, until you bind
      them to custom commands.

    - The access code to custom agenda commands can now contain
      several characters, effectively allowing to bundle several
      similar commands into a sub-keymap.  This follows an
      excellent proposal by Adam Spiers.  For example:

      : (setq org-agenda-custom-commands
      :   '(("h" . "HOME + Name tag searches") ; describe prefix "h"
      :     ("hl" tags "+HOME+Lisa")
      :     ("hp" tags "+HOME+Peter")
      :     ("hk" tags "+HOME+Kim")))

    - The user function option in org-agenda-custom-commands may
      now also be a lambda expression, following a request by
      Adam Spiers.

*** Sorting improvements

    We are using a new routine for sorting entries, courtesy of
    John Wiegley.  Many thanks to John.

    - You can define your own function to extract a sorting key
      and in this way sort entries by anything you like.

    - Entries can now be sorted according to the value of a
      property.

    - Plain lists can be sorted.

*** HTML <div> structure

    There is now a <div>-based structure in exported HTML.

    - The table of context is wrapped into a div with a class
      "table-of-contents".

    - The outline structure is embedded in <div> elements with
      classes "outline-1", "outline-2" etc.

    - The postamble, containing the author information and the
      date is wrapped into a div with class "postamble".

    I am not sure if the class names are the best choice, let me
    know if there are more "canonical" choices.

    Thanks to Mike Newman and Cezar for input, and in particular
    to Mike for his clearly formulated specification.

*** Other stuff

    - New variable `org-agenda-window-frame-fractions' to
      customize the size limits of the agenda window in the case
      that you display the agenda window by reorganizing the
      frame.

    - Drawers can be set on a per-file basis using

      : #+DRAWERS: HIDDEN STATE PROPERTIES

      This will define the drawers :HIDDEN: and :STATE:.
      The :PROPERTY: drawer should always be part of this list, or
      your properties will not be folded away.
      Thanks to Richard G. Riley for this proposal.

    - `org-agenda-fontify-priorities' may now also be an
      association list of priorities and faces, to specify the
      faces of priorities in the agenda individually.

    - The variable `org-export-with-property-drawer' no longer
      exists, please use `org-export-with-drawers' instead.  Also,
      the corresponding switch in the #+OPTIONS line has changed
      from "p" to "d".  Thanks to Bastien for pointing out that we
      needed to handle not only the property drawer.

    - M-up and M-down now move the current line up and down (if
      not at a headline, item or table).  Among other things you
      can use this to re-order properties in the drawer.  This was
      a proposal by Bastien.

    - New variable `org-agenda-todo-ignore-with-date', based on a
      request by Wanrong Lin.

    - Aborting remember template selection with C-g now kills the
      remember buffer and restores the old window configuration.
      This was a request by Nuutti Kotivuori.

* Version 5.12

** Overview

   - Remember templates can now have name.
   - `C-c C-k' will abort taking a note (remember of log)
   - `C-c C-x C-w' and `C-c C-x M-w' now accept a prefix arg.
   - Lines in the agenda can be fontified according to priority.
   - New variable `org-scheduled-past-days'.
   - New variables `org-agenda-deadline-leaders' and
     `org-agenda-scheduled-leaders'.
   - New sparse tree function `org-sparse-tree'.
   - The variable `org-ellipsis' now defaults to `org-link'.
   - The #+OPTIONS line has a new option "tags".
   - New variable `org-use-property-inheritance'.

** Incompatible Changes

   - `C-c /' now calls `org-sparse-tree'.

** Details

   - Remember templates can now have a template name as the first
     element.  The name will be listed along with the selection
     character when prompting for a template.  It is best to have
     the name start with the selection character, for example if
     you use ("Note" "n"), you will be prompted like "[n]ote".
     Thanks to Matiyam for this proposal.

   - `C-c C-k' will abort taking a note.  You can use this in remember
     buffers and when taking a logging note (e.g. for a state
     change).  Thanks to Bastien.

   - `C-c C-x C-w' and `C-c C-x M-w' now accept a prefix arg to
     cut N sequential subtrees.  This was a proposal by John.

   - Lines in the agenda are now bold if they have priority A and
     italic if they have priority C.  You can turn this off using
     the variable `org-agenda-fontify-priorities'.  Thanks to
     John Wiegley for the idea and code.

   - New variable `org-scheduled-past-days' to set the number a
     scheduled item will be listed after its date has passed.
     Default is 10000, i.e. indefinitely.

   - New variables `org-agenda-deadline-leaders' and
     `org-agenda-scheduled-leaders' to adjust the leading text o
     scheduled items and deadline in the agenda.  Thanks to John
     Wiegley for a patch.

   - New sparse tree function `org-sparse-tree'.  This is now the
     default binding for `C-c /'.  It requires one additional
     keypress to select a command, but in return is provides a
     single interface to all the different sparse tree commands,
     with full completion support.

   - The variable `org-ellipsis' now defaults to the face
     `org-link' because the visibility of the dots is really bad
     and I have found this change very useful indeed.

   - The #+OPTIONS line has a new option "tags" which can be used
     to set `org-export-with-tags'.  Thanks to Wanrong Lin for
     this proposal.

   - New variable `org-use-property-inheritance'.  Configure it
     to `t' if you want that searching for entries with certain
     properties always should assume inheritance.  This is not
     well tested yet, please check it out.

   - Bug fixes

* Version 5.11

** Overview

   - SUMMARY, DESCRIPTION, LOCATION properties for iCalendar
   - Command to jump to the running clock
   - Clock entries can now have their own drawer
   - `C-c C-x C-r' only updates a clocktable at point
   - New way to assign a remember template to a single key
   - `C-n' and `C-p' are back to their default binding
   - `C-x C-s' in agenda buffer saves all org-mode buffers
   - Schedule/deadline leaves note in agenda buffer
   - Prefix argument for `C-c C-d/s' will remove date
   - New variable to make block aranda more compact
   - Better tag alignment in agenda

** Incompatible changes

   - If you have customized `org-drawers', you need to add
     "CLOCK" to the list of drawers.

   - The variable `org-agenda-align-tags-to-column' has been
     renamed to `org-agenda-tags-column'.  The old name is still
     an alias, in Emacs 22 and in XEmacs, but not in Emacs 21.

   - The default value for both `org-tags-column' and
     `org-agenda-tags-column' is now -80.

   - The variable
     `org-insert-labeled-timestamps-before-properties-drawer'
     is now obsolete.

** Details

   - The LOGGING property allows to modify the settings for
     progress logging for a single entry.  For example:

     : :PROPERTIES:
     :   :LOGGING: nologging nologrepeat
     : :END:

     turns off all progress logging for the current entry and its
     children.

   - The properties SUMMARY, DESCRIPTION and LOCATION have
     special meaning during iCalendar export, when they translate
     to the corresponding VEVENT and VTODO fields.  If not given,
     Org-ode continues to use cleaned-up version of the headline
     and body as the summary and the description, respectively.

   - New function to go to the entry with the currently running
     clock.  Bound to `C-c C-x C-j', in agenda also to "J".  If
     you use this often, you might even want to assign a global
     key.  Thanks to Bernt and Bastien.

   - Clock entries can now have their own drawer, the :CLOCK:
     drawer.  Check out the variable `org-clock-into-drawer' for
     configuration of this feature.  The default is to create a
     drawer when the second clocking line gets added to an entry.
     Note that "CLOCK" has been added to the default value of
     `org-drawers', but if you have configured that variable, you
     must go back and add "CLOCK" yourself to get this drawer
     folded away.  Thanks to Tom Weissman for pointing out that
     too many clock entries are visually annoying.

   - `C-c C-x C-r' no longer tries to find the first clocktable
     in a buffer and then updates it.  Instead, it will update
     the clocktable at point if there is one (same as C-c C-c
     will do if the cursor is in the "#+BEGIN" line of the
     table).  If there is none at point, a new one will be
     inserted.  This change was necessary because the new :scope
     parameter allows to have several clocktables in a buffer.
     Thanks to Bastien for pointing this out.
     To update all dynamic blocks in a file, use `C-u C-c C-x C-u'.

   - The function `org-remember' can now be called with a
     template selection key as argument.  This helps to make key
     bindings that go directly to a specific template without
     being prompted for a template, like this:

     : (global-set-key [f5] (lambda () (interactive) (org-remember "j")))

     Thanks to Richard G Riley for bringing this up.

   - `C-n' and `C-p' are back to their default binding
     (next/previous line) in the agenda buffer.  Enough people,
     including recently Denis Bueno, have complained about this,
     and I agree it is not good to break habits like that.

   - `C-x C-s' in an agenda buffer now saves all org-mode buffers
     (also `s' does this).

   - Setting schedule or deadline dates from the agenda now
     produces a note in the agenda, similarly to what happens
     with S-left/right.

   - Using a prefix argument for `C-c C-d' or `C-c C-s' will
     remove the deadline or scheduling date from an item.  Thanks
     to Wanrong Lin for this proposal.

   - New variable `org-agenda-compact-blocks'.  When set, the
     space between blocks in a block agenda is reduced as much as
     possible, to show more items on a single screen.

   - The variable `org-agenda-tags-column' (renamed from
     `org-agenda-align-tags-to-column') can now also be negative,
     to mean alignment to the left.  The new default is -80, just
     like it is now for `org-tags-column'.

   - Bug fixes

* Version 5.10

** Overview

   - Category and the archive location can be properties.
   - The clocktable has a new =:scope= parameter.
   - CSV support when importing a table.
   - Better defaults when modifying a time stamp.
   - New way to specify the duration of an appointment.
   - More aggressive version of orgstruct-mode improved wrapping.
   - Modifications to priority cycling.
   - Modifications to computations in column view.
   - New command `org-occur-in-agenda-files'.
   - Bug fixes.

** Details

   - Both the category and the archive location in a (sub)tree of
     the buffer can now be specified using a property, for
     example:

     : * Tree with special properties
     :   :PROPERTIES:
     :     :CATEGORY: Examples
     :     :ARCHIVE:  /some/special/file::
     :   :END:

     This is a much cleaner way of dealing with multiple
     categories and archives in a single file.  The preferred use
     of the =#+CATEGORY= and =#+ARCHIVE= lines is now to set a
     *single* default for the file which is then locally
     overruled by properties.  This was a proposal from Bastien
     if I remember correctly.  Multiple =#+= lines still work
     and I don't plan to remove this support soon, but I
     encourage you to stop using them.

   - The clocktable has a new =:scope= parameter that determines
     the range in the file from which clock entries should be
     taken.  This can be anything from the local subtree to the
     entire buffer to even the full list of agenda files.  Legal
     values are:

     | value   | scope                                           |
     |---------+-------------------------------------------------|
     | nil     | the current buffer or narrowed region           |
     | file    | the full current buffer                         |
     | subtree | the subtree where the clocktable is located     |
     | treeN   | the surrounding level N tree, for example tree3 |
     | tree    | the surrounding level 1 tree                    |
     | agenda  | all agenda files                                |

     Thanks to Jason F. McBrayer and Bernt Hansen for
     inspiration.  Thanks to cranreuch (what is you full name?)
     for mentioning, at the right moment, that the clocktable is
     not so bad - that remark made it seem worthwhile to add
     features.

   - The commands to import a table and to convert a region to a
     table can now handle comma-separated values (CSV).  The
     algorithm does not yet treat quoting correctly, but for
     basic input it works.

   - When modifying an existing time stamp, or when entering the
     second stamp of a range, the date prompt will now
     consistently default to the date/time in the existing stamp.
     This was triggered by Nuutti Kotivuori's request.

   - At the date/time prompt, there is a new way to specify a
     range of hours, by using "+DURATION" after the time.  For
     example:

     :  14:00+2  means 14:00-16:00
     :  2pm+2:30 means 14:00-16:30

     Again, Nuutti Kotivuori's request.

   - When you use the function `turn-on-orgstruct++' to turn on
     orgstruct-mode, the special org-mode settings for
     auto-filling, indentation and paragraphs are exported into
     the buffer, so that typing list items with indentation works
     better.  This was Bastien's idea and request.

   - New variable `org-priority-start-cycle-with-default'.  When
     t (the default), priority cycling will initially set the
     default priority and then increase or decrease.  When nil,
     the first priority set by cycling is already 1 different
     from the default priority.  This was mostly driven by
     Bastien.

   - In column view: When an entry has a property for a summary
     column defined, its value is normally overwritten by the sum
     of all the children's values each time you enter column
     view.  Now there is an exception to this rule: If none of
     the children has that particular property defined, the
     parent's value stays.  In this way you can still place TODO
     items under such an entry without getting the property value
     changed.  Thanks to Russel Adams for pointing out that this
     is a better way of doing things.

   - In column view, computed values are now bold face, and
     trying to edit them is an error.  I think this works, but
     testing is appreciated.

   - New command `org-occur-in-agenda-files', this is basically
     the quick command John Wiegley proposed the other day, but
     it also works when the agenda files are not yet in buffers.
     The key is `C-c C-x /', any better proposals?

   - Links containing a space will now be handled correctly when
     calling the browser.  Note that you need to enclose such
     links in square or angular brackets.

   - Bug fixes.

* Version 5.09

** Overview

   - Taking a note upon TODO state changes can be restricted to
     selected states.

   - The format in which dates are shown in the daily/weekly
     agenda can be configured.

   - The default for `org-remember-store-without-prompt' is now t.

   - `org-goto' has been made into a general lookup command.

   - Priority cycling goes back to the nil state.

   - You can store a remember note to the *last used* location.

   - On Emacs 23, the headline faces for org-mode are now
     inherited from the outline faces.

** Incompatible Changes

   - The default for `org-remember-store-without-prompt' is now
     t, in order to better match the original intent of
     remember.el (storing a note with minimum interruption of
     work flow).  I expect that many people will be hit by this
     incompatible change - nevertheless I believe it is the right
     thing to do.

** Details

   - You can now select specific states for recording a note when
     switching to that state.  With the setting

     : #+SEQ_TODO: TODO(t) ORDERED(o@) INVOICE(i@) PAYED(p) | RECEIVED(r)
     : #+STARTUP: lognotestate

     only the states ORDERED and INVOICE will record a timestamp
     and a note.

   - You can now set the format of the string for each day in the
     agenda and timeline buffers.  You can use a format string
     interpreted by `format-time-string', or you can write your
     own function.  Configure the new variable
     `org-agenda-format-date'.  Thanks to Levin for triggering
     this development with a patch.

   - The default for `org-remember-store-without-prompt' is now
     t, in order to better match the original intent of
     remember.el (storing a note with minimum interruption of
     work flow).  Since we can assign files and headlines to
     templates, I guess this takes care of selecting a filing
     location in most cases.  For interactive filing, you now
     need a prefix command when exiting `remember'.

   - `org-goto' (bound to `C-c C-j') now uses an indirect buffer
     and has additional commands enabled: Org-occur with `C-c /'
     or even faster with `/', and the commands needed to select
     and copy a region.  This make `org-goto' a more general
     lookup command instead of only a jumping command.  Remember
     that you can exit with `Q' to go back to the original
     location.  Thanks to William Henney for this idea.

   - Setting the priority with S-up/down now cycles back to a
     state where no priority is specified.  This was requested by
     Rick Moynihan.

   - You can store a remember note to the *last used* location.
     So if you select a location interactively once, you can
     re-use it without having to find it again.  For this, exit
     the remember buffer with `C-u C-u C-c C-c'.  The leading
     comment in the remember buffer will tell exactly where the
     note goes if you exit with a particular command.
     Thanks to Maxim Loginov for this idea.

   - On Emacs 23, the headline faces for org-mode are now
     inherited from the outline faces.  This is just a
     convenience, so that you only have to configure one set of
     faces, and that will then be outline-1 .. outline-8.  You
     will actually not see any difference in org-mode, because
     Stefan Monnier has made the outline faces in Emacs 23 to
     match the current org-mode faces.

     This change does not effect XEmacs, nor Emacs 21 and 22.

* Version 5.08

** Incompatible changes

   - The default for `org-deadline-warning-days' is now 14.

** Details

   - There is now a separate interface for fast and directly
     setting a TODO keyword.  This interface kicks in when you
     have configured keys for TODO keywords like

     : #+SEQ_TODO: TODO(t) WAITING(w) | DONE(d) CANCELED(c)

     C-c C-t still does the cycling thing, you need to use a
     prefix argument to get to the fast interface.  Or configure
     the variable `org-use-fast-todo-selection' to t, then this
     will be the default and the prefix argument will make the
     command fall back to cycling.

     The tag selection no longer does include TODO keywords -
     Leo's arguments have convinced me that this is not a good
     idea.  If you'd like to see the TODO keywords in the tags
     interface anyway, set the variable
     `org-fast-tag-selection-include-todo'.  Thanks to Leo and
     others for input on this issue.

   - New variable `org-edit-timestamp-down-means-later'.  When
     set, `S-down' on a timestamp will change the timestamp to
     later.  Thanks to Raman for this idea.

   - Property names can now contain non-ascii word characters.
     This follows a request from Daniel Clemente.

   - For export, the date that should be given in the exported
     file can now be set to a specific value with a line like

     : #+DATE: 15 November 2003

     If you want to use the date/time when the file was created,
     use a format string that will be interpreted by
     `format-time-string', for example:

     : #+DATE: %Y/%m/%d %X

   - The default of `org-deadline-warning-days' has changed to 14
     days.  30 was really too much, I suspect most people (me
     included) have changed this.

   - When a deadline has an individual lead time, this lead time
     obviously overrules `org-deadline-warning-days'.  However,
     if you bind `org-deadline-warning-days' to a number <=0, for
     example during a custom agenda command, then the absolute
     value of this number will be enforced also when a different
     lead time has been specified.  This is useful to get a list
     of all deadlines coming up in the next N days.

* Version 5.07

** Overview

   - Different faces for different TODO keywords.

   - Setting TODO states through the TAG setting interface.

   - Context information is stored when moving a tree to the archive.

   - Sorting can be done by priority.

   - `Org-ellipsis' can now also be a face.

   - Scheduling info is no longer removed entry is marked CLOSED.

   - Unavailable files in `org-agenda-files' can be skipped.

** Incompatible changes

   - The time of archiving is now stored as a property.
     ARCHIVED is no longer a special time keyword.

   - Scheduling info is no longer removed entry is marked CLOSED.

** Details

   - You can now define different faces for different TODO
     keywords.  This request has come up frequently, so here it
     is: Use the variable `org-todo-keyword-faces'.

     A Here is a configuration example:

     : (setq org-todo-keyword-faces
     :   '(("TODO"      . org-warning)
     :     ("DEFERRED"  . shadow)
     :     ("CANCELED"  . (:foreground "blue" :weight bold
     :                    :underline t))))

     Org mode continue still use `org-todo' and `org-done' for
     keywords that have no specific face assigned.

   - Some People use TODO states more like tags.  For them the
     TODO keywords mark special states and they like to quickly
     switch between states in arbitrary sequence.  The standard
     TODO interface is not perfect for this, because it assumes
     that the states are reached in sequence.  However, the fast
     tag setting interface is in fact perfect for this.  You can
     now "misuse" the TAG selection interface to also set TODO
     states.  All you need to do is to assign keys to the TODO
     states, just like you also do for tags.

     : #+SEQ_TODO: TODO(t) WAITING(w) | CANCELED(c) DONE(d)
     : #+TAGS: @HOME(h) @OFFICE(o) @SHOP(s)

     Next time you try to set tags with C-c C-c, the todo states
     will be offered as well, and the corresponding key will
     switch the entry to that state.

   - New variable `org-archive-save-context-info' governs if
     information that would be lost by moving a subtree to the
     archive file, should be stored as special properties.  For
     example,

     : (setq org-archive-save-context-info '(itags category))

     will store the inherited tags and the category in properties
     ARCHIVE_ITAGS and ARCHIVE_CATEGORY, respectively.  The
     default setting for this variable is to save everything that
     could be lost.  This was a proposal by John Wiegley.

   - Sorting (`C-c ^') can use the use the priority to sort.  Use
     the "p" and "P" keys at the prompt.  John Wiegley, again.

   - `Org-ellipsis' can now also be a face to make the folding
     ellipsis more visible.  This is based on a post by Tassilo
     Horn.  Since `org-ellipsis' only works in Org mode, you
     might want to use Tassilo Horn's hack directly in order to
     affect the folding ellipsis globally.

   - Scheduling info is no longer removed when an entry is marked
     CLOSED.  This was a request by Brian van den Broek.  Let me
     know if this breaks anything for you - then it will become
     an option.

   - New option `org-agenda-skip-unavailable-files'.  Currently,
     if a file does not exist, it will be removed from
     `org-agenda-files' after a query.  When this option is set,
     the file will simply be skipped.

   - Bug fixes.

* Version 5.06

** Overview

** Details

   - When exporting only a region and this region is a single
     (sub)tree (for example selected with `C-c @'), the title for
     the exported document is taken to be the heading of the
     subtree.  The sublevels become top-level entries in the
     export.  Furthermore, if the head entry of the tree has or
     inherits an EXPORT_FILE_NAME property, that file name (with
     appropriately substituted extension) will be used for the
     exported tree.  Thanks to Patrick Drechsler and Jost Burkart
     for these ideas.

   - org-special-ctrl-a/e has a third allowed value, `reversed'.
     When it is set to this value, the first C-a or C-e command
     behaves normally, i.e. it goes to the true beginning or end
     of the line.  Only when you press C-a or C-e immediately
     again, the the "special" position will be found.  Additional
     presses of the same key jump between the two positions.  I
     like this a lot better than the `t' setting, because now the
     keys behave more predictable and still give easy access to
     the special locations.

   - New command to set or remove a tag from all headlines in a
     region.

   - When Org mode visits a file, it will initially hide all
     drawers.

   - The default of the variable `org-cycle-global-at-bob' is now
     nil, meaning that TAB no longer does global visibility
     cycling at the beginning of the buffer.

   - Bug fixes, in particular the problems with scheduling and
     deadlines introduced in 5.05.  Please check carefully if
     this works correctly again, and complain if not.

* Version 5.05

** Overview

   - LaTeX export, finally, thanks to Bastien.

   - Extension mechanism for the hyperlink system.

   - Global access to commands inserting and following links.

   - Individual lead-times for deadlines.

   - Option to show only the next instance of repeating timestamp.

   - Store remember notes with only 2 keys: C-c C-c

   - Appointment reminders from Org mode.

   - Global values for selected properties.

   - Bug fixes.


** Details

   - Bastien's `org-export-latex.el' is now part of the org-mode
     distribution.  You can export an Org mode document to a
     LaTeX file with `C-c C-e l'.  For more options, see the
     manual, and the commentary in the Lisp file.  Kudos to
     Bastien for contributing this frequently requested feature.
     I am sure this has been tough because of the many different
     ways I have been allowing LaTeX snippets and environments to
     be incorporated in lazy free-format ways.

   - Org mode has now an extension mechanism for the hyperlink
     system.  This should clear the road for all those mairix and
     other ideas that have been floating around.  Now it is on
     *you* to write and share new link types for Org mode.  The
     interface for adding a new link type is described in the
     appendix of the manual, section A2.  The unsolved problem is
     currently how to handle the new link types for
     export/publishing.

   - New *global* commands `org-open-at-point-global' and
     `org-insert-link-global'.  You can bind these commands to
     global keys and use them to insert and follow Org mode-like
     links anywhere in Emacs.  Thanks to Adam Spiers for this
     excellent idea.

   - Each deadline timestamp may now specify its own interval of
     lead-time display, given in days, weeks, months or years.
     The syntax is like this

     : DEADLINE: <2007-08-13 Mon -5d>

     When combined with a repeater, the repeater has to come
     first:

     : DEADLINE: <2007-08-13 Mon +2w -5d>

     You may now also customize the faces that are used in the
     agenda to indicate the distance of an approaching deadline.
     See the new option `org-agenda-deadline-faces'.

     Thanks to Pavel Chalmoviansky and John Wiegley proposals in
     this direction.

   - New option `org-agenda-repeating-timestamp-show-all'.  When
     set to nil, repeating time stamps will only show up once in
     the agenda, either today or in the near future.  Other
     matches will be ignored.  Thanks to John Wiegley for this
     proposal.

   - New variable `org-remember-store-without-prompt'.  When set,
     exiting the remember buffer with C-c C-c will store the note
     without further prompts to the default location, and `C-u
     C-c C-c' will get the prompts for file and location.  So
     this variable reverses the prefix-argument functionality for
     storing remember notes.  This follows a request from John
     Wiegley.

   - A new function `org-agenda-to-appt' activates all
     appointments for the current day so that Emacs will display
     reminders.  This uses appt.el.  Thanks to Bastien for this
     function.

   - You can now set default values for properties that can be
     inherited by all entries in a buffer, or by all entries
     globally.  Global properties are set in the variable
     `org-global-properties', like this:

       (setq org-global-properties '(("NAME" "This is the value")))

     Buffer-local values are set like this:

       #+PROPERTY: NAME This is the value

     When using org-entry-get to get the value of a property with
     the `inherit' flag and the hierarchy above the entry does
     not contain this property, the buffer-local and global lists
     are checked as well.  This is mostly useful (I think) to set
     the list of allowed values for a property.  Thanks to Bernt
     Hansen and Bastien for these ideas.

   - Bug fixes.

* Version 5.04

** Details

   - New variables `org-export-author-info' and
     `org-export-time-stamp-file' to turn off inclusion of author
     and time information into exported files.  Thank to Patrick
     Drechsler for pointing out that this would be useful.

   - New variable to avoid moving DEADLINE and SCHEDULED info
     into the property drawer.  The default is now to not move
     this stuff into the drawer.
     `org-insert-labeled-timestamps-before-properties-drawer'

   - `org-archive-mark-done' can be a string now, to select a
     specific keyword that should be used for archived entries.

   - New command "j" in agenda to jump to an arbitrary date.
     Thanks to Bernt Hansen for the patch.

   - Lots of minor fixes.

* Version 5.03

** Incompatible Changes

   - The variable `org-special-ctrl-a' has been renamed to
     `org-special-ctrl-a/e'.  The old one is still an alias (but
     not on Emacs 21 where variable aliases cannot be defined).

** Details

  - When the variable `org-special-ctrl-a/e' is set, C-e in a
    headline first goes to the end of the headline ignoring the
    tags.  A second C-e then goes to after the tags.

  - Typing and removing single characters in a headline now
    keeps the tags in the headline aligned.  This could have a
    little impact on performance while deleting stuff - let me
    know if we need to make this customizable.

  - New option `org-n-level-faces' can be used to set the number
    of different faces that are used for headlines.  Default is
    all 8 faces Org mode defines for this purpose, level 9 uses
    again the level-1 face.  However, you can use fewer, and then
    the level-1 face will be reused already for level N+1, etc.

  - Column View and hidestars now work together.

  - Bug fixes.

* Version 5.02

** Overview

   - The interfaces for properties and column view are finished
     now and work well.

   - Properties can be summaries, i.e. the parent nodes can
     compute their value from the children's values.

   - Headlines finally require a space ofter the star(s).  The
     conflict with bold text at the beginning of the line is no
     longer there.

** Incompatible Changes

   - Bad news.  It looks like it is going to be really hard to
     make column view work on XEmacs and on Emacs 21.  Emacs 22
     is currently the only Emacs where this works.  If you are
     using Emacs 21 or XEmacs, you can still use properties, but
     not column view.

** Details

   - Improvements for properties:

     + There are interactive commands to insert and delete
       properties.  Read the manual chapter 7 for details.

     + You can define /allowed values/ for a property.  When
       these are defined, you can change the value of a property
       with S-left and S-right.  And you may use completion when
       inserting the property.  This goes a long way to prevent
       typos when entering properties.

   - Improvements for column view.

     + In column view, you may use the keys S-left/right (and
       also the keys `n' and `p') to switch from one allowed
       value to the next.

     + You can define summaries for columns.  For example,
       parents can contain the sum of all children values of a
       property, or the parent node can have a check box property
       that is automatically checked when all children's boxes are
       checked.

     + There are interactive commands to add and remove columns,
       and to change the attributes of a column like the summary
       type.

     These additions lead to the exciting fact that the example from
     [[http://www.omnigroup.com/images/applications/omnioutliner/features/multicolumn.jpg][omni outliner]] posted by Scott Jaderholm can now be accurately
     reproduced by Org mode.

   - The space after the stars is now required in a headline, in
     order to remove the conflict with bold words at the
     beginning of a line.  So

     :    * This is a level 1 headline
     :    *this is bold text*

   - S-up and S-down to navigate plain item lists are now also
     available in orgstruct-mode.

* Version 5.01

** Overview

   - A new minor mode, orgstruct-mode, exports the Org mode
     structure editing commands into any other mode.

   - DRAWERS are a new level off folding for special sections
     that should stay closed during visibility cycling and only
     open if explicitly asked.

   - Entries can now have PROPERTIES.

   - A COLUMN VIEW implementation allows to easily view and edit
     the properties of a hierarchy of entries (Emacs only, for
     now).

   - Formula evaluation in the spreadsheet is more consistent
     now.  Properties and per-file constants can be used during
     evaluation.

   - Bug fixes and minor changes.

** Incompatible changes

   - When using LEVEL=N in a tags search, things have changed if
     you are also using `org-odd-levels-only'.  If you are using
     only odd levels (i.e. 1 or 3 or 5... stars), LEVEL=2 will
     now refer to 3 stars, LEVEL=3 to 5 stars etc.  Many thanks
     to Leo (or blame on him if you must) who has convinced me
     that this is the better convention.

** Details

*** Orgstruct minor mode

    There is a new minor mode, orgstruct-mode.  This modes works
    in a similar way as Orgtbl-mode.  It can be used to export
    the Org mode structure-editing commands into arbitrary major
    modes in Emacs.  For example, you can use it in Mail-mode to
    easily create lists.

    The functionality in Orgstruct mode is only active, if the
    cursor is in a line that looks either like a headline, or
    like the first line of a plain list item.  Then the commands
    `TAB', `M-cursor', `M-S-cursor', `M-RET', `M-S-RET', `C-c ^',
    `C-c C-c', and `C-c -' will do structure-related editing just
    like in Org mode.  If the cursor is not in such a line, all
    these keys will do whatever the major mode or other active
    minor modes have assigned to them.

    Orgstruct-mode is the result of a proposal by Raman, quite
    some time ago.  It has taken a long time, but here is finally
    the promised implementation.

*** Drawers

    The new concept of /drawers/ allows to create sections
    that remain folded during visibility cycling.  Drawers need
    to be configured using the variable `org-drawers'.  A drawer
    starts with a line containing only the name of the drawer
    bracketed by colons. It ends with :END:.  For example,
    after setting

    :   (setq org-drawers '("PROPERTIES" "HIDDEN"))

    you can then create drawers like this:

    :   :HIDDEN:
    :     here is some stuff that remains hidden
    :     unless TAB is pressed directly in that line
    :   :END:

    The PROPERTIES drawer has special meaning for ORG-mode, it
    contains properties of an entry (see below).

*** Properties and Column View

    - Entries in Org mode can now have arbitrary /properties/
      associated with them.  Org mode handles some default
      properties like the TODO state, the priority, the local
      tags, and planning information like DEADLINE and SCHEDULED.
      In addition, you can assign arbitrary properties by creating
      a property drawer and inserting a line like

      :   :PROPNAME: This is the value of the property

      Org mode has an API for properties, if you want to write a
      program using properties, use the functions
      `org-entry-properties', `org-entry-get', `org-entry-put',
      and `org-entry-delete'.

    - Planning information like DEADLINE can be hidden in the
      properties drawer.

      If the PROPERTIES drawer starts in the first line after a
      headline, also the DEADLINE, SCHEDULED and CLOCK information
      will be inserted inside the drawer.  If no PROPERTIES drawer
      is present, or if it does not start in the line right after
      the headline, this information remains in the lines directly
      after the headline, outside the drawer.

    - TAGS searches can now also query properties.  For example,
      the search

      :   LEVEL=3+BOSS+ASSIGNED="Hans"/WAITING

      will find entries that
      - are level 3
      - have the tag BOSS
      - have an ASSIGNED property with the value "Hans"
      - are TODO status WAITING.

	So here is an entry that will match:

	:   *** WAITING Clean up the factory     :BOSS:
	:       :PROPERTIES:
	:       :ASSIGNED: Hans
	:       :END:

	You may also use a regular expression to match against a
	property value.  For example, to find stuff assigned to Hans
	or Sarah, use

	:   ASSIGNED={^\(Hans\|Sarah\)$}

    - Column View is a special way to look at property values in
      tabular form.  Column View can be used in any org-mode
      file, and also in any agenda buffer.  It works by placing
      an overlay over each headline (or agenda line) that shows a
      table of selected properties.  You can look at and edit
      properties from this view.  Which properties are shown in
      the table must be set up using the COLUMNS property.  You
      can set up different property columns on different levels
      of an outline tree.  For example:

      :   * People
      :     :PROPERTIES:
      :     :COLUMNS: %25ITEM %Name
      :     :END:
      :   ** Family
      :      :PROPERTIES:
      :      :COLUMNS: %25ITEM %Name %3Age
      :      :END:
      :   *** Sam
      :       Info about Sam, including a property list with Name and Age.
      :   *** Sarah
      :       Info about Sarah, including a property list with Name and Age.
      :   ** Office
      :      :PROPERTIES:
      :      :COLUMNS: %25ITEM %Name %Function %Salary
      :      :END:
      :   *** Boss
      :       Info about the Boss, including a property list with Name,
      :       Function and Salary (if only we knew....).

      Now we have defined three different sets of columns.  If
      you switch to column view in the /Family/ section, you
      will get a different table than if you do it in the
      /Office/ section.  However, if you switch to column
      view with the cursor on the /People/ section, the
      table will cover all entries, but contain only the
      /Name/.

      Column view does, for the time being, only work on Emacs.
      The XEmacs implementation needs a bit of work.

    - Properties can be used in table formulas.  To access the
      value of the property :XYZ:, use $PROP_XYZ.  The property
      needs to be defined in the hierarchy above the table, not
      necessarily in the same entry as the table.  This was a
      request by Eddward.  File-wide constants can be defined with
      #+CONSTANTS, see below.

    - Things that still need to be sorted out about drawers,
      properties and column view - comments and suggestions
      welcome!

      + How to deal with drawers and properties in HTML and ASCII
	export?
      + What key could be used to insert an empty property drawer
	into an entry?
      + Right now column view is invoked through the command C-c
	C-x C-c.  It is too easy to type C-x C-c by mistake, and
	that causes Emacs to quit.  Suggestions for a different
	key?
      + Fontification of drawers and properties is not good yet.
	Any suggestions for better defaults?
      + Mouse support for editing properties in column view would
	be nice - maybe Piotr is interested to add this to
	org-mouse.el?

*** Spreadsheet

    - In the spreadsheet, the evaluation of formulas has changed.
      Previously, first the column formulas would be evaluated
      everywhere, and then the field formulas would kick in, and
      in some cases overwrite the results of column formulas in
      the appropriate fields.  This had the side effect that some
      formulas might always use the wrong, intermediate content of
      a field that is computed both by a column and a field
      formula.

      From now on, column formulas will no longer temporarily
      overwrite field formulas.  This gives much more consistent
      results.  For example you can now finally have a column of
      increasing numbers by setting the first field to a fixed
      number, and let the rest follow from a column formula.

      Here is an example

      :   | 1 |
      :   | 2 |
      :   | 3 |
      :   #+TBLFM: $1=@-1+1::@1$1=1

    - Constants for formulas in spreadsheets are globally defined
      with the variable `org-table-formula-constants'.  File-local
      constants can now be set with a line like:

      :   #+CONSTANTS: c=299792458.  pi=3.14  eps=2.4e-6

*** Minor changes

    - When entries are archived, a timestamp for the moment of
      archiving is added to the line with planning information.
      It looks like this:

      : ARCHIVED: [2007-07-02 Mon 11:34]

      Thanks to J. David Boyd for constructive comments.

    - Bug fixes

      Many bugs are fixed, as usually all the ones where I replied
      "fixed" on emacs-orgmode.  If you reported one of these
      bugs, please check if it really has disappeared in the new
      version, and complain if not.  Thanks!

* Version 4.79

** Details

   - We are back to a single file org.el that works both on Emacs
     and on XEmacs.  Merging comes at a speed penalty for you as
     an XEmacs user, but *only if you do not compile* org.el.
     Compilation completely removes the penalty.

   - New L flag for literal interpolation in Lisp formulas.
     See manual section 3.5.3.

   - New options for turning off footnotes.
     This was a request from Ignotus.
     See the option `org-export-with-footnotes'.

   - Default length for Agenda entries, but this is off by
     default.  This was a request from Micheal.
     See the option `org-agenda-default-appointment-duration'.

   - Bug fixes:

     + org-agenda-date-later (Juraj Kubelka)
     + letters off margin in orgcard.ps (Charles Cave)
     + TODO export problems on XEmacs (ignotus@freemail.hu)
     + args-out-of-range with table formulas (Cecil Westerhof)
     + problem with org-file without a heading (Tim O'Callaghan)

* Version 4.78

** Overview

   - Time stamps with a time range *included*, like
     : <2007-06-18 Mon 17:33-18:23>

   - Clock times without clocking in/out: CLOCK: => 2:00

   - Language-specific characters allowed in TAGS (Emacs only).

   - Promotion and demotion of items gets the indentation right.

   - Indenting lines with TAB is more intelligent.

** Incompatible changes

   - There is now a special version of `org.el' for XEmacs.
     Before installation, as an XEmacs user you must rename the
     file org_xemacs.el to org.el, i.e. you must overwrite org.el
     with the xemacs version.  For example:

     : mv org_xemacs.el org.el

     This is necessary so that I can make use of some features
     that would be cumbersome to support in a single file.  The
     XEmacs version is derived from the Emacs version with a
     program, so no reason to fear that I might be dropping
     XEmacs support any time soon.  Sorry for the trouble.

** Details

   - A time stamp may now contain a range of times.  So you no
     longer need to use two separate stamps to indicate a time
     interval on a single day.  For example

     : <2007-06-18 Mon 17:30-18:20>

     This is now fully supported, including changing the time
     with S-up/down while the cursor is on the end time.  Also,
     da the date/time prompt, you can simply write your time like
     12:00-14:00 and the range will be inserted.

     This was proposed by Leo some time ago, and recently by
     Michael.

   - You may specify clocking times by hand (i.e. without
     clocking in and out) using this syntax.

     : CLOCK: => 2:00

     Thanks to Scott Jaderholm for this proposal.

   - TAGS may now contain language-specific word characters, as
     long as they are matched by the "[:alnum:]" regexp syntax.
     This is for Emacs only, the XEmacs version continues to use
     the character class "a-zA-Z0-9_@" for tag names.  Thanks to
     David Smith for a patch to this effect (a modified version
     of that patch was applied).  I am considering to make the
     same change for TODO keywords, but not yet.  Note that files
     using localization features may not work correctly in the
     Emacs configuration of another user, so if you are sharing
     org-mode files with other users, it might still be best to
     stick to the ASCII characters.

   - Promotion and demotion of plain list items (commands M-left,
     M-right) no longer changes the indentation by just one
     space.  Instead, it uses intelligence gathered from the
     surrounding list structure to do the right thing.  Thanks to
     William Henney for starting the discussion about this.

   - TAB does now a better job of indenting lines.

     + After tables and code segments (lines starting with ":"),
       indentation goes back to what it was before (thanks to
       William Henney for suggesting this behavior).

     + When plain lists items are involved, we had a long
       discussion on emacs-orgmode where I tried to show that a
       too-sophisticated implementation will still be easily
       fooled.   Here is what I have implemented now - lets see
       if we can agree on this:

       Indentation will flatten lists with the same bullet type,
       but indent another bullet type further.  The time when
       this fails is in a nested list, when you want to get back
       out to a previous level.  For example

       : - item 1
       : - item 2
       : + item 2a
       : + item 2b
       : - item 3

       When using TAB on every line in this list, the structure
       will change to

       : - item 1
       : - item 2
       :   + item 2a
       :   + item 2b
       :     - item 3

       So you need to change the level of the last line by hand,
       using promotion and demotion functions.

* Version 4.77

** Overview

   - Vertical lines in exported tables.
   - New default for `org-show-following-heading'.

** Incompatible changes

   - The default for `org-show-following-heading' is now nil.

** Details

   - You can now specify column groups in tables, to the effect
     that the groups will be separated by vertical lines in HTML
     and ASCII output.  Column groups are specified by the
     characters "<" and ">" in a special table row.  "<" starts a
     group, ">" ends a group (in each case including the the
     column where the character is specified).  You may also use
     "<>" to make a group a single column wide.  For example:

     : |   |  N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N) |
     : |---+----+-----+-----+-----+---------+------------|
     : | / | <> |   < |     |   > |       < |          > |
     : | # |  1 |   1 |   1 |   1 |       1 |          1 |
     : | # |  2 |   4 |   8 |  16 |  1.4142 |     1.1892 |
     : | # |  3 |   9 |  27 |  81 |  1.7321 |     1.3161 |
     : #+TBLFM: $3=$2^2::$4=$2^3::$5=$2^4::$6=sqrt($2)::$7=sqrt(sqrt(($2))

     A table row with with nothing but "/" in the first field is never
     exported, but can be used to place column group information into
     the table.  In this table, we create a group for column 2, one for
     columns 3-5 and one for columns 6-7.  HTML export will render a
     vertical line between these groups.

     Because HTML does not require closing <colgroup> tags with
     </colgroup>), you can also simply start a new column wherever you
     want a vertical line:

     : | N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N0 |
     : |---+-----+-----+-----+---------+------------|
     : | / | <   | <   |     | <       |            |

   - Vertical lines are now also omitted in ASCII export, unless
     grouping explicitly requests these lines.

   - The default for `org-show-following-heading' is now nil,
     meaning that sparse trees will be more compact.  This has
     become possible due to in important remark by Jason Dunsmore
     who pointed out that TAB should behave differently in the
     inconsistent trees produced by the sparse tree commands.
     TAB does now make sure that the heading after a freshly
     unfolded tree is made visible at all, removing the confusing
     behavior we had before.

   - Several bugs fixed.  In particular:

     + Strings produced by agenda batch processing with
       `org-batch-agenda' and `org-batch-agenda-csv' are now
       properly encoded, so that you should be able to use
       special characters in other languages as along as your
       post-processing program handles them correctly.  At least
       for Emacs this should work now, but have not yet figured
       out how to do this in XEmacs.

* Version 4.76

** Overview

   - Exporting Footnotes to HTML

** Details

   - Footnotes like =here[1]= are now exported to HTML

     :   [1]This is a footnote

     Thanks to Scott Jaderholm for this proposal and a detailed
     HTML example on how the exported text should look like.

   - Special version of the reference card, for letter paper.

   - Switching to OVERVIEW with S-TAB no loner moves the cursor,
     so after three `S-TAB' commands, you will be back where you
     started.

   - Bug fixes, lots of them again.

* Version 4.75

** Overview

   - Cyclic time stamps that repeat after an interval.
   - Special timestamps for appointments like "every 2nd Thursday
     in a month".
   - Completion of link abbreviation prefixes inside `C-c C-l'.
   - Replacing a region of org-mode syntax with HTML.
   - iCalendar export now honors ARCHIVE etc.
   - New command to add/change emphasis markers.

** Incompatible Changes

   - The REPEAT(...) cookie is no longer supported, the repeater
     interval now goes directly into the time stamp.

** Details

   - Time stamps can contain a repeater code, like +1w for once
     every week, +2d for every two days, etc.  For example,

          <2007-05-16 Wed 12:30 +1w>

     will apply to every Wednesday, starting from the date given.
     I believe this syntax was actually suggested by someone on
     the mailing list, but I cannot find the email back.  To
     collect your credit, let me know!

   - You can use an sexp diary entry (with the syntax used by the
     Emacs calendar/diary) in a time stamp, like this:

     : *** The nerd club meets on 2nd Thursday of every month
     :     <%%(diary-float t 4 2)>

   - You can put diary-style sexp entries directly into an
     org-mode file, where they will be interpreted just like they
     would in the diary.  For example

     : * Birthdays and similar stuff
     : #+CATEGORY: Holiday
     : %%(org-calendar-holiday) ; special function for holiday names
     : #+CATEGORY: Ann
     : %%(diary-anniversary 14  5 1956) Artur Dent %d is years old
     : %%(diary-anniversary  2 10 1869) Mahatma Gandhi

     These entries must start at column 0 to be evaluated.

     It turns out that evaluating the entries in an org-mode file
     is actually faster than in the diary itself, because using
     the diary has some overhead (creating fancy diary display,
     then reading and re-interpreting the entries).  I have moved
     all the sexp entries from my diary into an org-mode file,
     put in a few categories, and then turned off
     `org-agenda-include-diary'.  This has led to a noticeably
     faster agenda display.

   - New command `org-replace-region-by-html' that converts the
     current region from org-mode syntax into HTML.  For example,
     you might write an itemized list in plain text in an HTML
     buffer, and then invoke this command to convert it.  Thanks
     to Raman for this idea.

   - When inserting a link with `C-c C-l', completion will now
     fill in all valid link prefixes, like http or ftp, but also
     link abbreviation prefixes.  This is based on an idea by
     Bastien.

   - Highest, lowest, and default priority can be set on a
     per-file basis with #+PRIORITIES: H L D
     For example, to use priorities from 1 to 9, you could use

     : #+PRIORITIES: 1 9 9

     Thanks to Dmitri Minaev for a patch to this effect.

   - iCalendar export now honors (i.e. skips) subtrees marked as
     ARCHIVE, COMMENT, or QUOTE.

   - There is a new command to add or change the emphasis (like
     bold or italic) of a piece of text.  For lack of better
     available keys the command is at `C-c C-x C-f', but you may
     well want to choose a more convenient key like `C-c f' in
     your private setup:

     #+begin_src emacs-lisp
     (add-hook 'org-load-hook
      (lambda () (define-key org-mode-map "\C-cf" 'org-emphasize)))
     #+end_src

     The command will prompt for an emphasis type, and you may
     reply either with the marker that triggers the emphasis, or
     with the first letter of the corresponding HTML tag.  For
     example, to select italic, press either "/" or "i".

     If there is an active region, the emphasis of this region
     will be set or changed.  If there is no region, only the
     emphasis markers will be inserted and the cursor positioned
     between them.  Thanks to Bastien for proposing this feature.

   - Bug fixes, everything where I have replied "fixed" on the
     mailing list.  Thanks to all of you for keeping these reports
     coming.

* Version 4.74

** Overview

   This release is about exporting agenda views, to HTML, to
   postscript for printing, and to a special format (CSV) for
   further processing in scripts.

** Incompatible Changes

   - The variable `org-agenda-remove-tags-when-in-prefix' has
     been renamed to `org-agenda-remove-tags'.

** Details

   - Agenda views can be exported as plain text, as HTML, and as
     Postscript(R).  This can simply be done from the agenda
     buffer with `C-x C-w' and then specifying a filename like
     `myagenda.html' or `myagenda.ps'.  See section 8.6.4 of the
     manual.

   - Each custom agenda view can specify a list of associated
     files names.  The command `C-c a e' then creates all views
     that have associated file names and exports the views to
     these files.  This is great for producing paper versions of
     your views, to take with you when you don't have your
     computer.  The manual has an example on how to do this, and
     in particular on how to customize the format of the printed
     version.  See section 8.6.4 of the manual.

   - You can produce a CSV format of agenda information with an
     Emacs batch command.  This is greate for further processing
     in scipts.  Thanks to Jason F. McBrayer for this idea.
     See section 8.6.5 of the manual.

   - New variable `org-agenda-skip-deadline-if-done'.  When set,
     a deadline associated with a DONE item will not be shown in
     the agenda.  This is based upon a report by Denis Bueno.

   - Quite a few bug fixes.

* Version 4.73

  Minor bug fixes.

* Version 4.72

** Overview

   - Control over blank lines between trees in collapsed view.

   - Info about the running clock is shown in the modeline.

   - C-a can behave specially in headlines.

   - Better color and scaling defaults for LaTeX fragments.

   - Customizable list of keys in org-mode to be replaced.

   - Stuck project descriptions have been extended.

   - Emphasis code has been modified to fix some issues.

   - Bug fixes.

** Incompatible changes

   - The option `org-format-latex-options' has changed.  If you
     have customized it, please revert to default and then redo
     your customization.

   - `org-CUA-compatible' no longer modifies S-RET by default,
     because newer versions of CUA don't use this key anymore.
     If you need this replacement, customize the variable
     `org-disputed-keys'.

   - The variable `org-CUA-compatible' is obsolete, please use
     `org-replace-disputed-keys' instead.  `org-CUA-compatible'
     is still an alias for this new variable, though.

** Details

   - Better control over blank lines between trees in collapsed
     view.  This has come up several times in the past and most
     recently by Scott Jaderholm.  There is now a new variable
     `org-cycle-separator-lines' with default value 2.  It says
     how many empty lines there need to be after the end of a
     subtree to get an empty line in collapsed view.  So with the
     default, if you leave only one empty line it will disappear
     in collapsed view.  If you leave two, one empty line will
     remain so that you can use double empty lines to structure
     the collapsed views of a file.  I love it, so many thanks to
     Scott fro bringing this up again.

     One property of the new setup is that you will never get
     more than one blank line in collapsed view.  We could do
     something special to allow *several* empty lines in
     collapsed view, but I think this is counter-productive.

     In Emacs 22, if you want to make full use of this, make sure
     that you have not set `outline-blank-line'.

   - When the clock is running, Org mode will put info about it
     into the modeline.  The info consists of the elapsed time
     and the heading of the clocked item.  This was a proposal
     from Bastien who got the idea from Muse.

   - C-a can behave specially in headlines when you set the
     variable `org-special-ctrl-a'.  It will bring the cursor
     first back only to the beginning of the headline *text*,
     i.e. after the stars and the TODO keyword, if any.  A second
     C-a will then move the cursor to the beginning of the line.
     If the cursor is already at the beginning of the line, C-a
     will spring *forward* to the headline text.  This was a
     proposal from Leo, based on a request from Scott Jaderholm.

     I have not turned this turned this on by default, should I?

   - When LaTeX fragments are processed into images, there is now
     more control and (hopefully) betters defaults for colors and
     scaling.  Special values can be set for HTML export, so that
     these values can differ from what is used for display in an
     emacs buffer.  The default foreground and background colors
     for images embedded in emacs are now taken from the default
     emacs face.  Thanks to Xiao-Yong Jin for proposing these
     changes.

   - There is now a much better mechanism to change some keys in
     org-mode if these keys clash with other modes you use.  Turn
     this on by setting `org-replace-disputed-keys' (aliased to
     `org-CUA-compatible').  The list of keys to replace is now
     fully customizable, see the option `org-disputed-keys'.
     Many thanks to Meciej Katafiasz for a patch implementing
     this.

   - Stuck project descriptions have been extended.  You can now
     use "*" as a TODO keyword or tag to say that *any* TODO
     keyword or TAG marks a project as non-stuck.  You also can
     give an arbitrary regular expression that, if it matches,
     indicates a non-stuck project.

   - The code for emphasis like bold, italic etc has been
     modified - I might have broken something in the process,
     please let me know if you find problems.

   - A number of bugs have been fixed - those where I have
     replied "Fixed" on the mailing list.

* Version 4.71

** Overview

** Incompatible changes

** Details

  - New variables to customize the header and data tags in
    exported HTML.  These are the variables
    `org-export-table-header-tags' and
    `org-export-table-data-tags'.  This follows a request from
    Scott Otterson.

  - New option `org-format-latex-header' for customizing the
    header of the LaTeX file used to convert embedded LaTeX to
    images.  Thanks to `Matthieu Lemerre' for the suggestion.

  - The prefix version of `org-todo-list' works again.  This
    means that `C-1 C-c a t' produces the list of TODO entries
    for the first TODO keyword.  If you use different TODO setups
    in different agenda files, be careful:  This number now
    refers to the list of *all* todo keywords used in files
    that are scanned for the agenda.

  - Many bug fixes.

* Version 4.70

** Overview

   - Dust settles after revamp of TODO keyword system.
   - The export title can be taken from the first text line.
   - TTY replacement keys have changed.

** Incompatible changes

   - Some TTY replacement keys are changed, see below.

** Details

  - Further development concerning TODO keywords.

    + You can now have several DONE states in a sequence, like

      : #+SEQ_TODO: TODO VERIFY | DONE DELEGATED

      The difference to the proposal discussed on the mailing
      list (and which is also works!)

      : #+SEQ_TODO: TODO VERIFY | DONE
      : #+SEQ_TODO: | CANCELED

      is that in the first case, the extra DONE states will be reached
      with `C-c C-t' (or with `t' from the agenda), while in the second
      case you need S-<right> to get to the special states.  I guess
      both ideas can be useful - I am leaning toward using the latter.

    + Setting up TODO keywords in Lisp previously used two
      separate variables: `org-todo-keywords' and
      `org-todo-interpretation'.  The preferred way is now to use
      only `org-todo-keywords', with a new structure:

      #+begin_src emacs-lisp
        (setq org-todo-keywords
          '((sequence "TODO" "|" "DONE")
            (sequence "BUG" "KNOWNCAUSE" "|" "FIXED" "IGNORED")
            (type "Fred" "Lisa" "Peter" "|" "DONE")
            (sequence "CANCELED")    ; for things we decide to not do.
            ))
      #+end_src
      
      If your setting has this new structure,
      `org-todo-interpretation' will be ignored.  This change
      does not break backward compatibility.  The old way of
      using a flat list in `org-todo-keywords' and taking the
      interpretation from the other variable still works.

    + When listing *specific* TODO entries via a sparse tree
      (`C-u C-c C-v') or via the agenda (`C-c a T' or `C-u C-c a
      t'), you can now specify several keywords to be selected,
      like "TODO|VERIFY|WAITING".  This also works for custom
      agenda commands.  Thanks to Jason F. McBrayer for pointing
      out this omission.

  - If you have configured Org mode to export also the text
    before the first headline (this is done by setting the
    variable `org-export-skip-text-before-1st-heading' to nil),
    then the first normal text line in the buffer becomes the
    title of the exported document.  A title set with #+TITLE
    overules this default, and the first line then belongs to the
    normal text.  Thanks to David House for this proposal.

  - TTY replacement keys.  Some of the key bindings used by
    Org mode do not work on a tty, so replacement key sequences
    are provided on ttys.  In version 4.70, there are some
    changes in the tty replacements.  Thanks to Jason F. McBrayer
    for coming up with the idea to use C-c <cursor> keys.

    | Command           |           | Old TTY       | New TTY       |
    | org-.....         | Main Key  | Replacement   | Replacement   |
    |-------------------+-----------+---------------+---------------|
    | shiftleft         | S-left    | C-c C-x left  | C-c left      |
    | shiftright        | S-right   | C-c C-x right | C-c right     |
    | shiftup           | S-up      | C-c C-x up    | C-c up        |
    | shiftdown         | S-down    | C-c C-x down  | C-c down      |
    | shiftcontrolleft  | C-S-left  |               | C-c C-x left  |
    | shiftcontrolright | C-s-right |               | C-c C-x right |

* Version 4.69

** Overview

   This time the changes affect the following areas:

   - TODO keywords:  Multiple sequences in a single file.
   - Export: More control over text before the first heading.
   - Export: More control over sub/superscript interpretation.
   - Plain lists:  Option to let empty lines terminate lists.
   - Tables: New command to insert hline and move into line below.
   - REPEATing items:  Turn of note taking.
   - Bug fixes.

** Incompatible changes

   - It used to be possible to spread the list of TODO keywords
     over several lines, like

     : #+SEQ_TODO: TODO
     : #+SEQ_TODO: PROGRESS
     : #+SEQ_TODO: DONE

     This is no longer possible.  Each such line now specifies an
     independent set of TODO keywords, with its own DONE state.
     See below for details.

   - The #+TEXT construct has been used to insert unchanged HTML into an
     exported file.  This is no longer possible, the TEXT lines will be
     processed like any other lines.  However, there are now much better
     ways of getting quoted HTML into the exported file.

** Details

   - You can now use multiple sets of TODO keywords in the same
     buffer.  For example, you may put the following three lines into a
     file:

     : #+SEQ_TODO: TODO DONE
     : #+SEQ_TODO: REPORT BUG KNOWNCAUSE RESOLVED
     : #+TYP_TODO: Fred Laura Peter Me OK

     Each sub-sequence has its own DONE state.  It is best to use
     different keywords in all sequences, to make sure Org mode does not
     loose track in which specific sequence it is working.  You could
     use the same word for all DONE states, but then cycling through to
     a TODO state might not bring you where you want to be.

     After initially setting a keyword, `C-c C-t' cycles through a
     sublist, i.e. is cycles from TODO to DONE or from KNOWNCAUSE to
     RESOLVED and further to (nothing) and back to REPORT.

     S-right and S-left allow to select any keyword, so they move from
     DONE to REPORT and from RESOLVED to Fred.

     C-S-right and C-S-left jump from one sub-sequence to the next, for
     example from TODO or DONE to REPORT to Fred.

     Thanks to Rick Moynihan for triggering this development.

   - Text before the first headline can now be exported if you configure
     Org mode accordingly.  Either set the variable
     `org-export-skip-text-before-1st-heading' to nil, or use the new
     in-buffer option

     : #+OPTION: skip:nil

   - Export content specified via the #+TEXT construct is now fully
     processed, i.e. links, emphasis etc. are all interpreted.  #+TEXT
     lines may include #+BEGIN_HTML... #+END_HTML sections to embed
     literal HTML.

   - During HTML export, you can request to have a_{b} interpreted as a
     subscript, but to leave a_b as it is.  This can be done by setting
     the variable org-export-sub-superscript to the symbol `{}' with

     : (setq org-export-sub-superscript '{})

     or by using

     : #+OPTIONS: ^:{}

     Thanks to Eddward DeVilla for this idea.

   - New variable `org-empty-line-terminates-plain-lists'.  Default is
     nil, meaning that empty lines are part of the previous list item,
     and that you can have several paragraphs in one such item.  Set
     this to t if you want an empty line terminate all levels of plain
     list items.

     Thanks to Mike Newman for triggering this development.

   - C-c RET does insert a horizontal separator line and move the
     cursor into the table line below it.  Thanks to Bastien for
     this proposal.

   - Org mode always offers you to record a note when a TODO item
     automatically repeats, even if you are not logging state
     changes.  The new variable `org-log-repeat' allows to turn
     this off, so that notes are really only been taken if you
     are logging all state changes.

   - Various Bug fixes, thanks to everyone who reported.

* Version 4.68

** Overview

   - Priority handling in the tags view
   - Date/time prompt follows the popup calender, and accepts AM/PM times.
   - Standard references like B4 in the spreadsheet.
   - Improvements to the formula editor.
   - C-j does better indentation.
   - Bug fixes

** Details

   - Priority handling in the tags view

     + Agenda lists selected by tag are now sorted by priority.
       Thanks to Andrew Korty for reporting this omission.

   - Improvements to the date/time prompt.

     + When you move (using S-cursor keys) the cursor in the pop-up
       calendar window while responding to a date/time prompt, the
       prompt is updated with the new default date (Emacs only).

     + You can now enter AM/PM times at this prompt.

   - Changes in the spreadsheet

     + You can now also write B4 instead of @4$2 as a reference in
       formulas.  The column references without specified row can be
       written as C& instead of $3.  Such references make formulas
       easier to read and are now the default way how references are
       shown when you edit existing formulas.  To get the old behavior
       back (i.e. only @row$col references), set the variable
       `org-table-use-standard-references' to nil.

       Relative references like @-3$-2 or @II..III continue to use the
       internal format.

   - Changes in the formula editor (the one you get with "C-c '")

     + The formulas are organized in a more logical way.

     + There is now a menu with commands.

     + When starting the formula editor with "C-c '", the cursor
       immediately moves to the formula for the current field.

     + With the cursor on a reference in the formula, you can use
       S-cursor keys to change the field being referenced.

   - C-j indents the following line correctly whe used in a headline
     or in aplain list item.  Thanks to Leo for this suggestion.

   - Bug fixes

     + Flyspell now knows about special org-mode commands.
       Thanks to Vinod Valsalam for reporting this problem, and to
       Andrew Korty for showing how to fix it.

     + Most other bugs discussed recently on emacs-orgmode@gnu.org
       should be fixed, except the problem with non-ASCII characters
       in tags....

* Version 4.67

   - Expert mode for fast tag selection.
     When org-fast-tag-selection-single-key is `expert', not even
     the selection window is shown, only the prompt.  One more C-c
     gets you the window, another one goes to multiple selection mode.

   - Synchronized with Emacs once more:  Emacs CVS has now org-mode
     4.67.  At least until it causes a problem, then the Emacs people
     will switch back to 4.56.  Lets hope there will be no problem.

   - Code cleanup

   - Bug fixes

* Version 4.66

** Overview

   - Sorting of top-level entries works now if the region contains
     top-level entries, or if the cursor is before the first headline.
     Thanks to "redblue" for reporting this bug.

   - When entering date and time at the prompt, you can now mix
     entering text and selecting something in the calendar.  For
     example, enter 22:15 at the prompt without pressing RET, and then
     click on a date in the calendar.  Both pieces of information will
     be included in the resulting time stamp.  You can also use
     S-curser to move the cursor in the calendar to the desired date
     and then enter 22:15 and press RET at the prompt.

   - When setting a deadline or a schedule, entering a time now
     automatically selects the time stamp format that includes the
     time. Bug report (by means of a question) from Bastre.

   - C-c C-l can be used to convert a plain link into a bracket link.

   - Internal links now match inside (the visible part of) other
     links.  Thanks to Scott Otterson for reporting this bug.

   - iCalendar export of TODO items fixed, see also the variable
     `org-icalendar-include-todo'.  Thanks to Philipp Raschdorf.

   - The number of levels in the table of contents of an exported
     document can now be set independently of the number of headline
     levels.  For example:

     : #+OPTIONS: H:4 toc:2

   - The command `C-c }' toggles the display of row and column numbers
     the the current table, to aid constructing formulas.  To try it,
     move the cursor to a table and press `C-c }', or use the menu
     entry.

   - Orgtbl translation functions (introduced in 4.65) have been
     simplified using a generic function `orgtbl-to-generic' that can
     be used for very general languanges.  Writing your own translator
     should be very easy now.  More info in the manual.

   - CONTENTS visibility can be limited to a certain level.  The
     command `C-3 S-TAB' will switch to CONTENTS view and show the
     first 3 levels.

   - Bug fixes.

* Version 4.65

** Overview

   - Orgtbl can be used to maintain tables in LaTeX, and in any other mode
   - Editing Lisp formulas for tables improved.
   - Better structure for HTML exported tables.
   - New "calculation" marker "/" to mark lines that should not be exported.

** Detailed description of changes

   - You can use orgtbl mode to maintain a LaTeX table, or pretty much
     any table in any mode.

     This does *not* work by making Orgtbl aware of LaTeX syntax.  That
     would be a box of Pandora I am not willing to open.  Instead, you
     use a normal Orgtbl-mode table, and a converter program to
     automatically place a LaTeX version of the table into the correct
     spot in the LaTeX file.  The orgtbl-mode table can be maintained
     inside the same file, in a block comment.

     I am providing translators for LaTeX, HTML, and TeXInfo.  For
     other applications, you need to write one yourself - but that is
     not hard if you start from the LaTeX version and just modify it.
     Thanks to Thomas Baumann for triggering this development through
     a request for a table-to-LaTeX converter.

   - In the special buffer to edit the formulas of a table (created
     with "C-c '"), there is now better support for editing Lisp
     formulas.  TAB and M-TAB work like in an Emacs Lisp buffer,
     indenting lines and completing lisp symbols.  With the cursor on
     a line defining a complex Lisp formula, a first press on TAB will
     convert the formula into a pretty-printed version with proper
     linebreaks and indentation.  A second TAB folds the line back to
     the compact form.

   - Tables in HTML export have now additional structure elements
     defined.  The header (before the first hline) is wrapped into
     <thead>..</thead>, and each part of the body (as separated in
     org-mode by hlines) is wrapped into <tbody>..</tbody> tags.  I
     have also changed the CSS style for <td> fields and the value of
     `org-export-html-table-tag' to get cleaner tables. Basically,
     tables now have horizontal lines only where needed, and no
     vertical lines at all, as generally recommended for tables in
     printed text.  I like the new look, but I am not sure if this
     change will find general approval, please throw in your view if
     you like.  Thanks to Scott for driving this, and to goud-H for
     pointing me to the row grouping in tables.

   - In a table with calculation markers in the first column, you can
     now also put "/" into the first column.  It indicates that this
     line should not be exported.  The foremost application for this
     are lines containing only "<N>" markers for narrowing columns.

* Version 4.64

** Overview

   - Email links get better, configurable descriptions
   - When inserting a link, selected text becomes the description
   - Easier access to the list of stored links.
   - Horizontal lines in HTML export.
   - Remember templates and storing of notes improved.

** Detailed description of changes

   - The descriptive part of links to email messages can be configured
     using the variable `org-email-link-description-format'.  The new
     default is "Email %c: %.30s" and leads to

     : Email from NAME: SUBJECT

     If you configure the variable `org-from-is-user-regexp'
     correctly, then for email you *sent* this will actually change to

     : Email to NAME: SUBJECT

     The subject is limited to 30 characters.  If you have become
     attached to the previous default (look twice, the new one is
     better), use "%f on: %s" as your format.

   - Selecting text before entering a new link with C-c C-l now really
     works, the selected text becomes the description part of the
     link.  Requested by Scott, buggy 4.62 implementation is now fixed.

   - Stored links are part of the history list for C-c C-l, so to
     reach them, you can use up/down rather than completion.  Thanks
     to Raman for this excellent idea.

   - A line consisting only of "-", and at least 5 of them, is
     exported into HTML as <hr/>, as proposed by Giovanni Ridolfi.

   - Several changes to org <-> remember integration

       - You can use `org-remember' as your default command to start
         remember.  It will automatically detect if there is an active
         region and use it as initial content (we will probably make
         remember.el work like this as well).
         Also, when calling `org-remember' in a remember buffer that
         was created with a template, you will again be asked to
         select a template.  The buffer is then re-created with the
         new template, but the old context information.  This is
         useful if you change your mind about the template to use
         (Leo's idea).

       - Besides specifying a default *target* file for a note, you
         can also give a default *heading* of which the note should
         become a subitem.  In many cases this avoids or speeds up
         navigating to the right location.  Both file and heading can
         be different for each template.  Both are non-binding, you
         can change them while storing the note.  However, when you
         exit remember with C-u C-c C-c, these defaults will be used
         without interaction.

       - Templates can specify interactive fields.  During expansion
         of the template, you will be prompted for the information in
         that field.  For example %^t will pop up a calendar and ask
         you to select a date. This new feature follows a proposal
         from Leo, who in the mean time has said he does not need it
         anymore.  But I liked it, so here it is :-)

       - Templates can access information specific to the link type
         created, for example the author and subject of an email.
         Syntax is %:fromname, %:fromaddress, %:subject etc, details
         in the manual.  Proposed by Peder O. Klingenberg.

       - I have been considering to move, at some stage, the template
         functionality into remember.el itself - which would of course
         require consent of the remember.el maintainers.  I am not
         sure how well this would work though, since some things like
         the interactive time stamps are org.el specific, so treating
         them would require special hooks.  Comments?

* Version 4.63

   - Bug fixes

* Version 4.62
   - Many changes to the spreadsheet functions in the table editor.
     For details, please re-read the manual section 3.4.
     + New Features
       - It is much easier to assign formulas to individual fields.
       - References to arbitrary fields and ranges.
       - Absolute references are modified in row-editing commands.
       - Formula editor that highlights referenced fields.
     + Incompatible changes
       - Empty fields are excluded in range references, see "E" mode flag.
       - &... ranges no longer supported, use new @... ranges.
       - Variable insertion into Lisp formulas work differently.
   - Selected text becomes the default description for C-c C-l links.(Scott)
   - The date format in the agenda/timeline views is now customizable.
     See the new option `org-agenda-date-format'. (request by Victor)
   - Link abbreviations no longer need a double colon, single colon is fine.
   - Bug fixes.

* Version 4.61
   - Avoiding keybinding clashes with flyspell
     - Archiving is now also on `C-C C-x C-s' (was just `C-c $')
     - Cycling through agenda files is now also on "C-'" (was just "C-,")
   - Colon is considered part of number, to align times in clock tables.
   - Fixed bug for list of stuck projects.
   - Fixed several bugs/problems concerning linking to gnus.
   - Block agendas can contain the list of stuck projects.
   - #+ARCHIVE may now appear several times in the buffer.
   - More bug fixes.

* Version 4.60
   - HTML export: inlining images, clickable images (manual 10.2.4).
   - Incremental search now shows proper context when exiting.
   - Tables calculation and Calc package.
     - Calc is no longer needed when using only elisp formulas.
     - Proper error messages when calc is needed and not available.
   - Tracking TODO state changes with time stamps and notes.
   - Empty entries go full circle.
   - Links in iCalendar export cleaned up.
   - Bug fixes.

* Version 4.59
   - Cleanup code, bug fixes.

* Version 4.58
   - Full undo support in the agenda buffer.
   - Listing stuck GTD projects (projects without any NEXT ACTIONS).
     Configure `org-stuck-projects' before using it.
   - C-c C-x b shows the current subtree in an indirect buffer, in
     another, dedicated frame.
   - Custom agenda commands take precedence over builtin commands.
   - auto-fill for comments works on the Emacs side, XEmacs not yet.

* Version 4.57
   - Sorting of outline items on same level.
   - Sorting tables automatically selects line range between hlines.
   - Changes in Agenda buffer
     - `C-c C-o' follows a link in the current line.
     - `C-c $' archives the subtree corresponding to the line.
     - Changing dates with S-left and S-right show new date in agenda,
       but still do not move the entry to the new date.
     - new option `org-agenda-skip-scheduled-if-done'.
   - Agenda and sparse tree construction using tag matches can now
     use regular expressions.
   - When prompted for a date/time, entering "+7" indicates a date
     7 days from now - but only this is the only thing you give.
   - Custom time formats also apply to exported html and ascii.
   - Bug fixes.

* Version 4.56
   - `C-k' in agenda kills current line and corresponding subtree in file.
   - XEmacs compatibility issues fixed, in particular tag alignment.
   - M-left/right now in/outdents plain list items, no Shift needed.
   - Bug fixes.

* Version 4.55
   - Bug fixes.

* Version 4.54
   - Improvements to fast tag selection
     + show status also in target line.
     + option to auto-exit after first change to tags list (see manual).
   - Tags sparse trees now also respect the settings in
     `org-show-hierarchy-above' and `org-show-following-heading'.
   - Bug fixes.

* Version 4.53
   - Custom time formats can be overlayed over time stamps.
   - New option `org-agenda-todo-ignore-deadlines'.
   - Work-around for flyspell bug (CVS Emacs has this fixed in flyspell.el).
   - Work-around for session.el problem with circular data structures.
   - Bug fixes.

* Version 4.52
   - TAG matches can also specify conditions on TODO keywords.
   - The fast tag interface allows setting tags that are not in the
     predefined list.
   - Bug fixes.

* Version 4.51
   - Link abbreviations (manual section 4.5).
   - More control over how agenda is displayed.  See the new variables
     `org-agenda-window-setup', `org-agenda-restore-windows-after-quit'.
   - Bug fixes.

* Version 4.50
   - Closing a TODO item can record an additional note.
     See variables `org-log-done' and `org-log-note-headings'.
   - Inserting headlines and bullets can leave an extra blank line.
     See variable `org-blank-before-new-entry'. (Ed Hirgelt patch)
   - =[[bracket links]]= in the agenda are active just as in org-mode buffers.
   - C-c C-o on a date range displays the agenda for exactly this range.
   - The default for `org-cycle-include-plain-lists' is back to nil.
   - Calls to `org-occur' can be stacked by using a prefix argument.
   - The options `org-show-hierarchy-above' and `org-show-following-heading'
     now always default to `t', but can be customized differently for
     different types of sparse trees or jump commands.
   - Bug fixes.

* Version 4.49
   - Agenda views can be made in batch mode from the command line.
   - `org-store-link' does the right thing in dired-mode.
   - File links can contain environment variables.
   - Full Emacs 21 compatibility has been restored.
   - Bug fixes.

* Version 4.47
   - Custom commands may produce an agenda which contains several blocks,
     each block created by a different agenda command.
   - Agenda commands can be restricted to the current file, region, subtree.
   - The timeline command must now be called through the agenda
     dispatcher (C-c a L).  `C-c C-r' no longer works.
   - Agenda items can be sorted by tag.  The *last* tag is used for this.
   - The prefix and the sorting strategy for agenda items can depend
     upon the agenda type.
   - The handling of `mailto:' links can be customized, see the new
     variable `org-link-mailto-program'.
   - `mailto' links can specify a subject after a double colon,
     like [[mailto:dominik@science.uva.nl::Org mode%20is%20buggy][mailto:dominik@xxx.uva.nl::Org mode is buggy]].
   - In the #+STARTUP line, M-TAB completes valid keywords.
   - In the #+TAGS: line, M-TAB after ":" inserts all currently used tags.
   - Again full Emacs 21 support:  Checkboxes and publishing are fixed.
   - More minor bug fixes.

* Version 4.45
   - Checkbox lists can show statistics about checked items.
   - C-TAB will cycle the visibility of archived subtrees.
   - Documentation about checkboxes has been moved to chapter 5.
   - Bux fixes.

* Version 4.44
   - Clock table can be done for a limited time interval.
   - Obsolete support for the old outline mode has been removed.
   - Bug fixes and code cleaning.

* Version 4.43
   - Bug fixes
   - `s' key in the agenda saves all org-mode buffers.

* Version 4.41
   - Shift-curser keys can modify inactive time stamps (inactive time
     stamps are the ones in [...] brackets.
   - Toggle all checkboxes in a region/below a headline.
   - Bug fixes.

* Version 4.40
   - Bug fixes.

* Version 4.39
   - Special tag ARCHIVE keeps a subtree closed and away from agenda lists.
   - LaTeX code in Org mode files can be converted to images for HTML.
   - Bug fixes.
   - CDLaTeX-mode features can be used in Org mode to help inserting
     LaTeX environment and math.

* Version 4.38
   - noutline.el is now required (important for XEmacs users only).
   - Dynamic blocks.
   - Archiving of all level 1 trees without open TODO items.
   - Clock reports can be inserted into the file in a special section.
   - FAQ removed from the manual, now only on the web.
   - Bug fixes.

* Version 4.37
   - Clock-feature for measuring time spent on specific items.
   - Improved emphasizing allows configuration and stacking.

* Version 4.36
   - Improved indentation of ASCII export, when headlines become items.
   - Handling of 12am and 12pm fixed.  Times beyond 24:00 can be used
     and will not lead to conflicts.
   - Support for mutually exclusive TAGS with the fast tags interface.
   - Bug fixes.

* Version 4.35
   - HTML export is now valid XHTML.
   - Timeline can also show dates without entries.  See new option
     `org-timeline-show-empty-dates'.
   - The bullets created by the ASCII exporter can now be configured.
     See the new option `org-export-ascii-bullets'.
   - New face `org-upcoming-deadline' (was `org-scheduled-previously').
   - New function `org-context' to allow testing for local context.

* Version 4.34
   - Bug fixes.

* Version 4.33
   - New commands to move through plain lists: S-up and S-down.
   - Bug fixes and documentation update.

* Version 4.32
   - Fast (single-key-per-tag) interface for setting TAGS.
   - The list of legal tags can be configured globally and locally.
   - Elisp and Info links (thanks to Todd Neal).
   - `org-export-publishing-directory' can be an alist, with different
     directories for different export types.
   - All context-sensitive commands use `call-interactively' to dispatch.
   - `org-confirm-shell-links' renamed to `org-confirm-shell-link-function'.
   - Bug fixes.

* Version 4.31
   - Bug fixes.

* Version 4.30
   - Modified installation: Autoloads have been collected in org-install.el.
   - Logging (org-log-done) is now a #+STARTUP option.
   - Checkboxes in plain list items, following up on Frank Ruell's idea.
   - File links inserted with C-c C-l will use relative paths if the linked
     file is in the current directory or a subdirectory of it.
   - New variable `org-link-file-path-type' to specify preference for
     relative and absolute paths.
   - New CSS classes for tags, timestamps, timestamp keywords.
   - Bug and typo fixes.

* Version 4.29
   - Inlining images in HTML export now depends on wheather the link
     contains a description or not.
   - TODO items can be scheduled from the global TODO list using C-c C-s.
   - TODO items already scheduled can be made to disappear from the global
     todo list, see `org-agenda-todo-ignore-scheduled'.
   - In Tables, formulas may also be Lisp forms.
   - Exporting the visible part of an outline with `C-c C-x v' works now
     for all available exporters.
   - Bug fixes, lots of them :-(

* Version 4.28
   - Bug fixes.

* Version 4.27
   - HTML exporter generalized to receive external options.
     As part of the process, author, email and date have been moved to the
     end of the HTML file.
   - Support for customizable file search in file links.
   - BibTeX database links as first application of the above.
   - New option `org-agenda-todo-list-sublevels' to turn off listing TODO
     entries that are sublevels of another TODO entry.

* Version 4.26
   - Bug fixes.

* Version 4.25
   - Revision of the font-lock faces section, with better tty support.
   - TODO keywords in Agenda buffer are fontified.
   - Export converts links between .org files to links between .html files.
   - Better support for bold/italic/underline emphasis.

* Version 4.24
   - Bug fixes.

* Version 4.23
   - Bug fixes.

* Version 4.22
   - Bug fixes.
   - In agenda buffer, mouse-1 no longer follows link.
     See `org-agenda-mouse-1-follows-link' and `org-mouse-1-follows-link'.

* Version 4.20
   - Links use now the =[[link][description]]= format by default.
     When inserting links, the user is prompted for a description.
   - If a link has a description, only the description is displayed
     the link part is hidden.  Use C-c C-l to edit the link part.
   - TAGS are now bold, but in the same color as the headline.
   - The width of a table column can be limited by using a field "<N>".
   - New structure for the customization tree.
   - Bug fixes.

* Version 4.13
   - The list of agenda files can be maintainted in an external file.
   - Bug fixes.

* Version 4.12
   - Templates for remember buffer.  Note that the remember setup changes.
     To set up templates, see `org-remember-templates'.
   - The time in new time stamps can be rounded, see new option
     `org-time-stamp-rounding-minutes'.
   - Bug fixes (there are *always* more bugs).

[...]

Version 4.00
   - Headlines can contain TAGS, and Org mode can produced a list
     of matching headlines based on a TAG search expression.
   - `org-agenda' has now become a dispatcher that will produce the agenda
     and other views on org-mode data with an additional keypress.

* Version 3.24
   - Switching and item to DONE records a time stamp when the variable
     `org-log-done' is turned on.  Default is off.

* Version 3.23
   - M-RET makes new items as well as new headings.
   - Various small bug fixes

* Version 3.22
   - CamelCase words link to other locations in the same file.
   - File links accept search options, to link to specific locations.
   - Plain list items can be folded with `org-cycle'.  See new option
     `org-cycle-include-plain-lists'.
   - Sparse trees for specific TODO keywords through numeric prefix
     argument to `C-c C-v'.
   - Global TODO list, also for specific keywords.
   - Matches in sparse trees are highlighted (highlights disappear with
     next buffer change due to editing).

* Version 3.21
   - Improved CSS support for the HTML export.  Thanks to Christian Egli.
   - Editing support for hand-formatted lists
     - M-S-cursor keys handle plain list items
     - C-c C-c renumbers ordered plain lists

* Version 3.20
   - There is finally an option to make TAB jump over horizontal lines
     in tables instead of creating a new line before that line.
     The option is `org-table-tab-jumps-over-hlines', default nil.
   - New command for sorting tables, on `C-c ^'.
   - Changes to the HTML exporter
     - hand-formatted lists are exported correctly, similar to
       markdown lists.  Nested lists are possible.  See the docstring
       of the variable `org-export-plain-list-max-depth'.
     - cleaned up to produce valid HTML 4.0 (transitional).
     - support for cascading style sheets.
   - New command to cycle through all agenda files, on C-,
   - C-c [ can now also be used to change the sequence of agenda files.

* Version 3.19
   - Bug fixes

* Version 3.18
   - Export of calendar information in the standard iCalendar format.
   - Some bug fixes.

* Version 3.17
   - HTML export specifies character set depending on coding-system.

* Version 3.16
   - In tables, directly after the field motion commands like TAB and RET,
     typing a character will blank the field.  Can be turned off with
     variable `org-table-auto-blank-field'.
   - Inactive timestamps with `C-c !'.  These do not trigger the agenda
     and are not linked to the calendar.
   - Additional key bindings to allow Org mode to function on a tty emacs.
   - `C-c C-h' prefix key replaced by `C-c C-x', and `C-c C-x C-h' replaced
     by `C-c C-x b' (b=Browser).  This was necessary to recover the
     standard meaning of C-h after a prefix key (show prefix bindings).

* Version 3.15
   - QUOTE keyword at the beginning of an entry causes fixed-width export
     of unmodified entry text. `C-c :' toggles this keyword.
   - New face `org-special-keyword' which is used for COMMENT, QUOTE,
     DEADLINE and SCHEDULED, and priority cookies.  Default is only a weak
     color, to reduce the amount of aggressive color in the buffer.

* Version 3.14
   - Formulas for individual fields in table.
   - Automatic recalculation in calculating tables.
   - Named fields and columns in tables.
   - Fixed bug with calling `org-archive' several times in a row.

* Version 3.13
   - Efficiency improvements:  Fewer table re-alignments needed.
   - New special lines in tables, for defining names for individual cells.

* Version 3.12
   - Tables can store formulas (one per column) and compute fields.
     Not quite like a full spreadsheet, but very powerful.
   - table.el keybinding is now `C-c ~'.
   - Numeric argument to org-cycle does `show-subtree' above on level ARG.
   - Small changes to keys in agenda buffer.  Affected keys:
     [w] weekly view; [d] daily view; [D] toggle diary inclusion.
   - Bug fixes.

* Version 3.11
   - Links inserted with C-c C-l are now by default enclosed in angle
     brackets.  See the new variable `org-link-format'.
   - ">" terminates a link, this is a way to have several links in a line.
     Both "<" and ">" are no longer allowed as characters in a link.
   - Archiving of finished tasks.
   - C-<up>/<down> bindings removed, to allow access to paragraph commands.
   - Compatibility with CUA-mode (see variable `org-CUA-compatible').
   - Compatibility problems with viper-mode fixed.
   - Improved html export of tables.
   - Various clean-up changes.

* Version 3.10
   - Using `define-derived-mode' to derive `org-mode' from `outline-mode'.

* Version 3.09
   - Time-of-day specifications in agenda are extracted and placed
     into the prefix.  Timed entries can be placed into a time grid for
     day.

* Version 3.08
   - "|" no longer allowed as part of a link, to allow links in tables.
   - The prefix of items in the agenda buffer can be configured.
   - Cleanup.

* Version 3.07
   - Some folding inconsistencies removed.
   - BBDB links to company-only entries.
   - Bug fixes and global cleanup.

* Version 3.06
   - M-S-RET inserts a new TODO heading.
   - New startup option `content'.
   - Better visual response when TODO items in agenda change status.
   - Window positioning after visibility state changes optimized and made
     configurable.  See `org-cycle-hook' and `org-occur-hook'.

* Version 3.05
   - Agenda entries from the diary are linked to the diary file, so
     adding and editing diary entries can be done directly from the agenda.
   - Many calendar/diary commands available directly from agenda.
   - Field copying in tables with S-RET does increment.
   - C-c C-x C-v extracts the visible part of the buffer for printing.
   - Moving subtrees up and down preserves the whitespace at the tree end.

* Version 3.04
   - Table editor optimized to need fewer realignments, and to keep
     table shape when typing in fields.
   - A new minor mode, orgtbl-mode, introduces the Org mode table editor
     into arbitrary major modes.
   - Fixed bug with realignment in XEmacs.
   - Startup options can be set with special #+STARTUP line.
   - Heading following a match in org-occur can be suppressed.

* Version 3.03
   - Copyright transfer to the FSF.
   - Effect of C-u and C-u C-u in org-timeline swapped.
   - Timeline now always contains today, and `.' jumps to it.
   - Table editor:
     - cut and paste of rectangular regions in tables
     - command to convert org-mode table to table.el table and back
     - command to treat several cells like a paragraph and fill it
     - command to convert a buffer region to a table
     - import/export tables as tab-separated files (exchange with Excel)
   - Agenda:
     - Sorting mechanism for agenda items rewritten from scratch.
     - Sorting fully configurable.
     - Entries specifying a time are sorted together.
   - Completion also covers option keywords after `#-'.
   - Bug fixes.

* Version 3.01
   - New reference card, thanks to Philip Rooke for creating it.
   - Single file agenda renamed to "Timeline".  It no longer shows
     warnings about upcoming deadlines/overdue scheduled items.
     That functionality is now limited to the (multifile) agenda.
   - When reading a date, the calendar can be manipulated with keys.
   - Link support for RMAIL and Wanderlust (from planner.el, untested).
   - Minor bug fixes and documentation improvements.

* Version 3.00
   - Multifile Agenda shows current entries from many different files.
   - TeXInfo documentation (thanks to Christian Egli for the conversion).
   - Additional applications for TODO keywords, see documentation.
     Different files may have different TODO keywords etc.
   - Priorities for TODO items.
   - The browser mode used by `org-remember-handler' is improved.
   - Images get inlined in HTML export (thanks to Carsten Wimmer).
   - File links can contain line numbers, like file:/usr/etc/config:255
   - Minor bug fixes.

* Version 2.10
   - TODO entries can have additional states besides TODO and DONE.
     See new variable `org-todo-keywords'.
   - TODO keywords can be interpreted as categories.  See variable
     `org-todo-interpretation'.
   - M-TAB completion on TODO keywords, TeX symbols, and normal words.
   - All keywords (like TODO, DEADLINE etc) are configurable.
   - Cursor positioning optimized after pro/demotion and TODO cycling.
   - Emphasizing in HTML works now for *bold*, /italic/ and _underline_.
   - New commands to kill, copy and yank entire subtrees.  Yanking
     modifies the level of the tree before insertion.
   - New command `org-goto' (C-c C-j) to quickly move to other locations
     in the buffer without affecting outline visibility.
   - Hooks for John Wiegley's remember.el.
   - `org-read-date' pops up calendar for date selection with the mouse.
     See variable `org-popup-calendar-for-date-prompt'.

* Version 2.6
   - TODO items can be SCHEDULED to a certain date.
   - Expired DEADLINEs are ignored if in an entry marked DONE.
   - From the diary or time-sorted view (C-c C-r), C-c C-t can be used to
     change the TODO state of an item remotely.
   - Horizontal computations in table editor. See `org-table-eval-formula'.
   - Fixed bug with summing tables (command `org-table-sum', `C-c +').
   - Calendar window follows the timestamp when a timestamp is changed.
     New variable `org-calendar-follow-timestamp-change'.
   - Time-sorted view (`org-diary-view', C-c C-r) now uses the prefix
     argument to force inclusion of unscheduled TODO items.
   - New variable `org-confirm-shell-links' to turn of safety query.
   - New variable `org-open-non-existing-files'.

* Version 2.4
   - A time-sorted view on all time stamps can be created with C-c C-r.
   - Timestamps and Deadlines can be shown in the Emacs diary.
   - Date ranges introduced.
   - Time-string formats are no longer configurable.
   - Vertical lines in tables can be made invisible with `C-c |'.
   - New "link" type to execute shell commands, like "shell:ls *.org"
   - Upon export, "myfile.org" becomes "myfile.html" or "myfile.txt",
     instead of "myfile.org.html" or "myfile.org.txt".
   - When the cursor is in the white space at the beginning of a line,
     TAB removes the whitespace before indenting again.

* Version 2.0
   - Windows (NT/2000) support.
   - Works with both Emacs and XEmacs.
   - Fully automatic table editor.
   - New link types into Gnus, VM and BBDB.
   - Other link system changes
     - Time stamps are treated as links to the calendar.
     - Easy creation of links with global command `org-store-link'.
     - Insertion of links with `C-c C-l' works differently now.
     - Space characters allowed as part of a link.
     - Options in `org-file-apps' extended.  The command may now be
       symbol 'emacs', or a lisp form.
   Please re-read the manual section about links.
   - Timestamp changes
     - `org-deadline' now prompts for a date.
     - A line can now contain several timestamps.  Updating of a
       timestamp only happens if the cursor is at the timestamp.
     - Changed the time-stamp-format to ISO, to make sure it will
       always work (non-English month names had caused problems
       with `parse-time-string'.).  Changing the time stamp format
       is not recommended.
   - Picture mode enhancements have been removed from org.el

* Version 1.4
   - Some option name changes, not backward compatible.
   - ASCII exporter upgrade: Table of contents.
   - HTML exporter upgrade: fixed-width regions, better
     sub/superscripts, many TeX symbols supported.
   - Calendar support.

* Version 1.3
   - HTML exporter upgrade, in particular table of contents
