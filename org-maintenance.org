#+TITLE:      Org maintenance
#+EMAIL:      bzg at gnu dot org
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+LANGUAGE:   en
#+PRIORITIES: A C B
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:nil -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc ':t
#+HTML_LINK_UP:    index.html
#+HTML_LINK_HOME:  https://orgmode.org/worg/

# This file is released by its authors and contributors under the GNU
# Free Documentation license v1.3 or later, code examples are released
# under the GNU General Public License v3 or later.

This document describes the tasks the Org-mode maintainers have to do
and how they are performed.

* Current maintainers
:PROPERTIES:
:CUSTOM_ID: current-maintainers
:END:

Ihor Radchenko is the official maintainer since December 2024.

Carsten Dominik created Org and is still active on the list.

Bastien Guerry has been the maintainer between 2011 and 2024.  He
hosts the [[https://orgmode.org][orgmode.org]] website and the [[https://tracker.orgmode.org/][tracker]] based on [[https://github.com/bzg/woof][Woof]] on his
server.

Kyle Meyer is backporting patches made against Org in the Emacs
repository and he updates the Emacs repository with Org latest
releases ; he also hosts the [[https://public-inbox.org/README.html][public-inbox]] of the mailing list at
[[https://list.orgmode.org][list.orgmode.org]].

Timothy (aka "TEC") and Tim Cross are contributor stewards: they make
sure that all contributions get the attention they deserve.

A team of Org users is moderating the mailing list.

Some files have a dedicated maintainer: just grep =;; Maintainer= in
Org's repository to find them.

* Web presence of maintainers
:PROPERTIES:
:CUSTOM_ID: web-presense-maintainers
:END:

The recommended way to contact the Org maintainers is by sharing your
question, patch or bug report on [[https://orgmode.org/worg/org-mailing-list.html][the mailing list]].

Some maintainers have account on websites like github.com, reddit.com,
stackoverflow.com, etc. It may be useful sometimes to add them to your
conversations.  Beware that, if the conversation leads to a bug fix or
a change, this will have to be discussed on the mailing list.  Here is
a list of the accounts of the current maintainers:

1. Ihor Radchenko (the current Org mode maintainer)
   - Reddit: [[https://reddit.com/user/yantar92/][yantar92]]
   - GitHub: [[https://github.com/yantar92][yantar92]]
   - IRC: =yantar92= at =#org-mode=
   - Matrix: =@yantar92:matrix.org= at =#org-mode:matrix.org=
2. Timothy (=org-plot=, =ox-html=)
   - Reddit: [[https://reddit.com/u/tecosaur][tecosaur]]
   - GitHub: [[https://github.com/tecosaur][tecosaur]]
3. Bastien (hosting the orgmode.org website)
   - Reddit: [[https://www.reddit.com/user/bzg/][bzg]]
   - Stackoverflow: [[https://stackoverflow.com/users/1037678/bzg][bzg]]
   - GitHub: [[https://github.com/bzg/][bzg]]
   - GitLab: [[https://gitlab.com/bzg][bzg]]
   - SourceHut: [[https://sr.ht/~bzg/][bzg]]

* What is the role of a maintainer?
:PROPERTIES:
:CUSTOM_ID: maintainer-role
:END:

If you speak [[https://learnxinyminutes.com/docs/elisp/][Emacs lisp]] and are a regular user of an Org file, please
consider becoming a maintainer for it: you can simply ask on the [[https://orgmode.org/worg/org-mailing-list.html][list]].

You do not need to be an expert of the functionality in the file or to
actively improve the file.  Just take care of bug reports and feature
requests against this file by participating to the discussion on the
[[https://orgmode.org/worg/org-mailing-list.html][list]].

You are not strictly required to follow the mailing list closely and
watch for the relevant emails.  When necessary, the relevant messages
will be directly forwarded to your email.

As a maintainer, you will need to join [[https://savannah.gnu.org/git/?group=emacs][the Emacs group on Savannah]].
When this is done, you will have access to the [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/][org-mode.git]] repository
and will be able to push changes without asking for permission first.
If your change is a new feature, discuss it on the [[https://orgmode.org/worg/org-mailing-list.html][list]] first.

In case the change touches files maintained by other maintainers, ask
them to review and validate it first.  If Org's maintainer disagrees
with a change, he can ask you to revert it.

When possible, please accompany bug fixes and new features with tests.
The Org test infrastructure is detailed in [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/tree/testing/README][testing/README]] file in the
Org repository.

If you are the maintainer of one of the babel language backends,
please make sure that the [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][language documentation in WORG]] is
up-to-date.

See also this steps for [[https://orgmode.org/worg/org-contribute.html#devs][your first commit as a]] maintainer.

* General guidelines for Org maintenance
:PROPERTIES:
:CUSTOM_ID: guidelines
:END:

We have a set of rules to follow when maintaining Org mode.
Exceptions can be made, but we try our best to follow the rules as
closely as possible.

- Do not break user experience
  - Keep old =.org= files working
  - Do not remove features
  - Do not change established workflows
  - Do not force users to upgrade configuration
- If we do need to break things, make the transition easy
  - Notify users (in =ORG-NEWS=)
  - Provide functions and/or UI to simplify migration
- Keep Org a _simple_ text markup
  - Org should remain readable and legit as plain text
  - Org should be easy to write, even outside Emacs
  - In Emacs, opening an Org file first time (with defaults) should
    present a simple outline/markup text file

* What's in a release?
:PROPERTIES:
:CUSTOM_ID: release
:END:

** We don't follow a release schedule
:PROPERTIES:
:CUSTOM_ID: release-schedule
:END:

Org development is the work of volunteers and we cannot promise to
follow a release schedule.  You can support the work of contributors
through the [[https://liberapay.com/org-mode/][Org Mode Liberapay team]].

** We don't use semantic versioning
:PROPERTIES:
:CUSTOM_ID: semantic-versioning
:END:

We use the same numbering convention than semantic versioning, but we
don't follow the rules of SemVer, as expressed in [[https://semver.org][semver.org]].

A /major/ release (e.g. =10=) means: "Hear ye, hear ye!  *All users* should
pay attention and read the release notes before upgrading!".

A /minor/ release (e.g. =10.1=) means: "Hear ye, hear ye!  *Power users and
Org contributors* should pay attention and read the release notes before
upgrading!  All other users are welcome to read them too."

This de facto convention has been made explicit after =9.4=.

** What's in major, minor and bugfix releases?
:PROPERTIES:
:CUSTOM_ID: release-types
:END:

- Major release :: The release number for a major release look like
  this: =10=.  Major releases are made whenever Org is in a state where
  the feature set is consistent and we know that the features that are
  implemented will be supported in the future.  Major releases have
  release notes published on https://orgmode.org/Changes.html.

- Minor release :: The release number for minor releases look like
  this: =10.1=.  Minor releases are amends to main releases: small new
  features or bugfixes.  Minor releases have release notes published
  on https://orgmode.org/Changes.html.

- Bugfix-only releases :: The release number for bugfixes-only
  releases looks like this: =10.1.1=.  These releases contain no new
  feature at all, big or small.  Fixes in these releases are either
  critical or trivial, for both the core code and the tests.

  This is because Org bugfix releases should always be ready to be
  sync'ed with Emacs development version and we don't want to worry
  about adding non-critical and non-trivial changes there when Emacs
  comes close to a release.

** Org releases are compatible with the latest three major Emacs releases
:PROPERTIES:
:CUSTOM_ID: emacs-compatibility
:END:

We aim at keeping the latest stable version of Org compatible with the
*last three major releases of Emacs*.

For example, if the latest release of Emacs is 28.x, you can expect
the latest release of Org to be compatible with Emacs 28.x, 27.x and
26.x, but not with Emacs 25.x.

It does not mean that Org will not be usable, at least partially, with
older Emacsen: but maintainers are not bound to fix bugs reported on
them.

Some Org components also depend on third-party packages available
through package archives.  Org is only guaranteed to be compatible
with the latest stable versions of these third-party packages.

Org versions that are not yet released (from the main or bugfix
branch) don't come with any promise regarding compatibility.

Before any release, maintainers test the release against the last
three major releases of Emacs.

* Where can I track bugs, patches and updates?
:PROPERTIES:
:CUSTOM_ID: bug-tracker
:END:

On [[https://tracker.orgmode.org][tracker.orgmode.org]], which uses [[https://github.com/bzg/woof][Woof!]] to advertize important
changes (upcoming breaking changes, new releases), confirmed bugs,
submitted patches and help requests.

Here is a super-quick Woof! primer:

- Patches sent to the mailing list are automatically tracked.

- To mark a patch as applied, you just need to place =Applied= at the
  beginning of your reply to the patch submitter.

- Bugs reported to the list are /not/ tracked until some confirms them
  by placing =Confirmed= at the beginning of a line in his reply to the
  bug.

You don't need to do much more: confirming bugs is a critical
contribution.

You can check the [[https://github.com/bzg/woof/blob/master/resources/md/howto.org][Woof! howto]] if you want to explore the details.

* Tests for the Org development branch
:PROPERTIES:
:CUSTOM_ID: org-tests
:END:

The =main= branch of Org is tested against the three latest stable
versions of GNU Emacs every three hours, with these rules:

- If the repository didn't change, don't rerun the tests.
- If the repository changed, report new test failures to the
  [[https://lists.sr.ht/~bzg/org-build-failures][org-build-failures]] mailing list.
- If the repository changed and the last test against a specific Emacs
  version failed, report new failures against the same Emacs version
  to bzg@gnu.org.

Tests are run using [[https://man.sr.ht/builds.sr.ht/#build-manifests][SourceHut build manifests]] called from the
orgmode.org server.  You can get the manifests files from the
[[https://git.sr.ht/~bzg/org-mode-tests/][org-mode-tests]] repository.

* For the release manager and core maintainers
:PROPERTIES:
:CUSTOM_ID: release-checklist
:END:
** Releasing a new version of Org
:PROPERTIES:
:CUSTOM_ID: new-release-checklist
:END:
*** What goes on the =bugfix= and =main= branches
:PROPERTIES:
:CUSTOM_ID: branches
:END:

The [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/][git repository]] has two branches: =main= for current development and
=bugfix= for bug fixes against latest major or minor release.

Critical or trivial bug fixes always go on =bugfix= and are merged on
=main=.  Non-trivial and non-critical fixes go on =main=.  New features
(e.g. new options) always go on =main=.

The =;; Version:= header of the =main= branch is set to the next stable
release suffixed by =-pre=: e.g. =9.6-pre=.  The =;; Version:= header of the
==bugfix= branch is set to the last stable release, e.g. =9.5.5=.

*** For all releases
:PROPERTIES:
:CUSTOM_ID: merging
:END:

The =bugfix= branch should always be merged into =main.=

All releases are created from the =bugfix= branch.

Always remember to set the =;; Version: [...]= metadata in =org.el=
correctly.

*** For bugfix releases
:PROPERTIES:
:CUSTOM_ID: bugfix-releases
:END:

When doing a bugfix release (and only then), you should *NOT* merge the
=main= branch into the =bugfix= branch.

Security fixes trigger an immediate bugfix release.  For other
important fixes, we generally wait a week between bugfix releases.
Whenever possible for the maintainers, we wait less than two weeks
before releasing important fixes.

*** For minor and major releases
:PROPERTIES:
:CUSTOM_ID: minor-major-releases
:END:

When doing a minor or major release, the =main= branch should be merged
into the =bugfix= branch.  Before the merge, all the changes from Emacs
upstream should be ported to =bugfix= (see [[#emacs-sync][Synchronization Org and
upstream Emacs]]).

~:package-version~ tags should be added to new and changed ~defcustom~
statements as needed.  If a statement also contains ~:version~ tag, it
should be removed in favor of ~:package-version~.

=FIXME= comments in the code should be reviewed before the release.
They often mark obsolete code to be removed in future releases.

The bugs listed on [[#bug-tracker][the bug tracker]] should be reviewed and possibly
acted upon, especially feature regressions. Ideally, the bug tracker
should be left with a minimal number of bugs listed.

=etc/ORG-NEWS= file should be reviewed, and the most impacting changes
should be moved closer to the top, so that users can see them first
without reading through less impacting changes.  The first heading
should be changed from =Version X.Y (not yet released)= to =Version X.Y=.

Emacs version requirements should be bumped according to the latest
Emacs release version minus 2 (see [[#emacs-compatibility][Emacs version support]]).

The manuals and Changelog pages served at https://orgmode.org and [[https://orgmode.org/worg/org-release-notes.html][WORG]]
will be automatically updated once the new version lands onto =bugfix=
branch.

At the very end, the new release should be announced on the mailing
list, with subject appropriately tagged as announcement on [[#bug-tracker][the bug
tracker]].  See an example in
https://list.orgmode.org/orgmode/87pmd6p7qs.fsf@gnu.org/. It is also a
good idea share the release announcement on major Org mode/Emacs user
forums, like [[https://reddit.com/r/orgmode/][/r/orgmode]], [[https://reddit.com/r/emacs/][/r/emacs]], and [[https://emacs.ch/home][Mastodon]].

*** Releasing by adding a new tag
:PROPERTIES:
:CUSTOM_ID: release-tags
:END:

When doing a major and a minor release, after all necessary merging is
done, you need to tag the =bugfix= branch for the release with:

  : git tag -a release_9.2 -m "Adding release tag"

and push tags with

  : git push --tags

We also encourage you to sign the release tags like this:

  : git tag -s release_9.1.7 -m "Adding release tag"

Pushing the new tag will trigger the release on GNU ELPA.

*** Preparing and annoncing the release
:PROPERTIES:
:CUSTOM_ID: release-announcement
:END:

Bugfix releases don't require specific annoucements.

Minor and major releases should be announced on the mailing list a few
weeks in advance so that contributors can test the development branch
and report problems.

When the release is done, it is announced on the mailing list.

Also, the contents of [[https://orgmode.org/Changes.html][orgmode.org/Changes.html]] needs to be updated by
copying the first section of =etc/ORG-NEWS= in the =Changes.org= page of
the [[https://git.sr.ht/~bzg/orgweb][orgweb]] repository.

** Synchronization Org and upstream Emacs
:PROPERTIES:
:CUSTOM_ID: emacs-sync
:END:

Below it is described how Org is kept in sync with the upstream Emacs.

*** Backporting changes from upstream Emacs
:PROPERTIES:
:CUSTOM_ID: backporting-emacs
:END:

Sometimes Emacs maintainers make changes to Org files.  The process of
propagating the changes back to the Org repository is called
/backporting/ for historical reasons.

To find changes that need to be ported from the Emacs repository, look
for commits in the Emacs repo that touched Org files since the last
sync using the following command:

#+begin_src shell
git log $rev..$target -- lisp/org \
  doc/misc/org.org doc/misc/org-setup.org \
  etc/ORG-NEWS etc/org etc/refcards/orgcard.tex etc/schema/
#+end_src

Here =$target= is the Emacs branch of interest (e.g., =emacs-29=), and
=$rev= is the last commit ported from that branch.

There is also a [[http://git.savannah.gnu.org/cgit/emacs.git/atom/lisp/org/][feed]] to keep track of new changes in the =lisp/org=
folder in the Emacs repository.

A log of ported commits is kept at
<https://git.kyleam.com/orgmode-backport-notes>.

*** Updating the Org version in upstream Emacs
:PROPERTIES:
:CUSTOM_ID: org-version-emacs
:END:

New releases of Org should be added to the [[https://git.savannah.gnu.org/cgit/emacs.git][Emacs repository]].

Typically, Org can be synchronized by copying over files from the
=emacs-sync= branch of the Org repository to the =master= branch of
Emacs repository.  The =emacs-sync= branch has a few extra changes
compared with the =bugfix= branch.  If the Emacs maintainers are
planning a new release of Emacs soon, it is possible that another
branch should be used.

If the new release of Org contains many changes, it may be useful to
use a separate branch before merging, e.g. =scratch/org-mode-merge=.
This branch can then be merged with the =master= branch, when
everything has been tested.

Please see [[http://git.savannah.gnu.org/cgit/emacs.git/tree/CONTRIBUTE][CONTRIBUTE]] in the Emacs repository for guidelines on
contributing to the Emacs repository.

**** Where do files go
:PROPERTIES:
:CUSTOM_ID: emacs-folders
:END:

The following list shows where files in Org repository are copied to
in the Emacs repository, folder by folder.

***** =org-mode/doc=

- =org.org= :: Copy to =emacs/doc/misc=.

- =org-setup.org= :: Copy to =emacs/doc/misc=.

- =orgcard.tex= :: Copy to =emacs/etc/refcards=.  Make sure that
     ~\def\orgversionnumber~ and ~\def\versionyear~ are up to date.

***** =org-mode/etc=

- =styles/*= :: Copy to =emacs/etc/org=.

- =etc/csl/*= :: Copy to =emacs/etc/org=.

- =schema/*.rnc= :: Copy to =emacs/etc/schema=.

- =schema/schemas.xml= :: Any new entries in this file should be added
     to =emacs/etc/schema/schemas.xml=.

- =ORG-NEWS= :: Copy to =emacs/etc=

***** =org-mode/lisp=

- Copy =*.el= files to =emacs/lisp/org=, except =org-loaddefs.el=!

- You should create =org-version.el= in =emacs/lisp/org=.  The file is
  created when you =make= Org.

***** TODO =org-mode/testing=

**** Update  =emacs/etc/NEWS=
:PROPERTIES:
:CUSTOM_ID: emacs-news
:END:

Whenever a new (major) version of Org is synchronized to the Emacs
repository, it should be mentioned in the NEWS file.

** Additional Org mode repositories

In addition to the main Org repository at [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git][savannah]], we maintain
[[file:org-contribute.org::#repos-overview][several others]]:
- Org mode website ::
   is what is served at https://orgmode.org and should be kept
   up-to-date all the time.
- Org wiki ::
  has many community-contributed articles, but also contains important
  information for contributors and maintainers.  The
  maintenance-related information (like this page) should also be kept
  current.
- =org-contrib= ::
  is for libraries we want someone else to take responsibility for.
  Before =org-contrib= empties, we should provide minimum (the lowest
  priority) maintenance: fix simple bugs and accept trivial patches.

  Non-trivial new contributions to =org-contrib= are an opportunity to
  get a new maintainer for one of the libraries there.

** Updating the list of hooks/commands/options on Worg
:PROPERTIES:
:CUSTOM_ID: release-auto-documentation
:END:

Load the =mk/eldo.el= file then =M-x eldo-make-doc RET=.

This will produce an org file with the documentation.

Import this file into =worg/doc.org=, leaving the header untouched
(except for the release number).

Then commit and push the change on the =worg.git= repository.

** Copyright assignments
:PROPERTIES:
:CUSTOM_ID: copyright
:END:

*** Assignment and verification

Maintainers need to keep track of copyright assignments.  A [[https://orgmode.org/worg/contributors.html][list of
contributors who have assigned copyright to the FSF]] is available so
that committers can confirm whether a patch can be installed.

****************** TODO Even better, find a volunteer to maintain this information!

New contributors need to submit the [[https://orgmode.org/request-assign-future.txt][form]][fn::The form is the same with
what Emacs CONTRIBUTE file [[https://git.savannah.gnu.org/cgit/gnulib.git/plain/doc/Copyright/request-assign.future][links]] to, with one answer filled in.] to
the FSF.

****************** WAITING Get updated version of the form
The existing form, as previously [[https://lists.gnu.org/archive/html/emacs-devel/2024-03/msg00101.html][pointed]] on emacs-devel, will be
updated to include the line asking the secretary to send confirmation
to interested parties (i.e. the Org maintainers).  But it is not yet
official.  We need to get the form updated at its official site -
Gnulib repository.  See
https://lists.gnu.org/archive/html/bug-gnulib/2024-03/msg00037.html
****************** END

The assignment process does not always go quickly; occasionally it may
get stuck or overlooked at the FSF.  If there is no response to the
contributor from FSF within a month[fn:: The official response time is
5 business days, according
https://www.gnu.org/prep/maintain/maintain.html.  We allow a bit
more.], the maintainers can ask the contributor to follow up with the
FSF, CCing the Org maintainers.

*** Authorship information

When submitting a change on someone's behalf, it's important that the
~author~ field of the commit has the correct name and email address of
the person who authored the change.  This may be done with the
~--author~ option:

#+begin_src sh :eval never
git commit --author "Arthur D. Author <author@example.com>"
#+end_src

Making sure the author field corresponds to the contributor, and not
the committer, helps us track the number of changed lines for
contributors without FSF copyright assignment.
* Keeping in touch with the community

[[file:org-mailing-list.org][Org mailing list]] is the main communication channel between Org
community and Org developers.

** Why mailing list?

We use mailing list rather than more popular in-browser forums for the
purposes to archiving - mailing list archives are freely available to
store by anyone and are reliably hosted on FSF servers. We can be
confident that the archives will not get lost due to for-profit
company shutting down their servers in the next dozens of years.

All the /serious/ discussions related to Org mode development should
happen on the mailing list, so that decision-making history is
preserved for later examination.

** Scope of the mailing list

We do not aim to limit the mailing list to bug reports only.
Instead, the mailing list should be a "breeding ground" to improve Org
mode /and also to gain new Org contributors/. On the list, we can have:
1. Bug reports
2. Discussions about present and future Org features (both inside and
   outside Emacs)
3. Requests for help, especially from new users

In the nutshell, Org mailing list should be treated as Org forum,
albeit somewhat skewed towards Org development. This way we can get
more people involved in the development.

** Encourage new members of the community

From the maintainer perspective, when replying to mailing list
messages, some users should be treated with care:
1. New users (especially those posing on the list for the first time)
2. New contributors submitting patches or feature ideas

Users and contributors sometimes have difficult time posting for the
first time, because email is often viewed as "too serous". So, it is
crucial to be especially welcoming and patient - we should not
discourage more people from contributing.

We cannot develop Org mode without the help of the community.

That said, maintainers should not forget that the ultimate goal is
making Org mode better rather than helping every single user.  Check
out what GNU software guidelines says about [[https://www.gnu.org/prep/maintain/maintain.html#Replying-to-Mail][replying to email]].

** Communications beyond the mailing list

While the mailing list should be the main communication media where
the most important development topics are to be discussed, we should
(optionally) appreciate the existing Org mode community in the
web-based forums like Reddit and web-based development platforms like
GitHub/GitLab.

A number of people simply feel uncomfortable reaching out to the
mailing list (for various reasons). So, if possible, it is a good idea
to keep an eye after the major Org forums and chats:
- https://reddit.com/r/orgmode/
- https://reddit.com/r/emacs/
- IRC: https://web.libera.chat/#org-mode
- Matrix: https://matrix.to/#/%23org-mode:matrix.org and
  https://matrix.to/#/%23emacs:matrix.org

Also, consider adding yourself to [[#web-presense-maintainers]].  Some
users may prefer talking via chat and some third-party package
maintainers may have easier time dropping a ping on GitHub.

** Org meetup

Finally, there is [[file:orgmeetup.org][Org meetup]] where maintainer, potential contributors,
and users discuss Org mode-related topics and Org development live.
Some people find it easier to report problems and propose features in
more casual discussion that does not involve writing an email or forum
post.

For every meetup, meeting notes are posted on the mailing list, making
sure that ideas can be recorded for future use and followed up more
seriously on the mailing list.

Currently, the meetup is managed by Ihor Radchenko, including posting
the meeting notes. Other maintainers are free to join there to discuss
Org development live with interested users and other maintainers.
