#+OPTIONS:    H:3 num:nil toc:2 \n:nil ::t |:t ^:{} -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc broken-links:nil
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate hideblocks
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c) noexport(n)
#+TITLE:      Scheme Code Blocks in Babel
#+AUTHOR:     Thomas S. Dye
#+EMAIL:      tsd [at] tsdye [dot] online
#+LANGUAGE:   en
#+HTML_LINK_UP:    index.html
#+HTML_LINK_HOME:  https://orgmode.org/worg/
#+EXCLUDE_TAGS: noexport

#+name: banner
#+begin_export html
  <div id="subtitle" style="float: center; text-align: center;">
  <p>
  Babel support for <a href="https://en.wikipedia.org/wiki/List_of_compilers#Scheme_compilers_and_interpreters">Scheme</a>
  </p>
  <p>
  <a href="http://www.scheme-reports.org/">
  <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Lambda_lc.svg/240px-Lambda_lc.svg.png"/>
  </a>
  </p>
  </div>
#+end_export

* Template Checklist [11/12]                                       :noexport:
  - [X] Revise #+TITLE:
  - [X] Indicate #+AUTHOR:
  - [X] Add #+EMAIL:
  - [X] Revise banner source block [3/3]
    - [X] Add link to a useful language web site
    - [X] Replace "Language" with language name
    - [X] Find a suitable graphic and use it to link to the language
      web site
  - [X] Write an [[Introduction]]
  - [X] Describe [[Requirements and Setup][Requirements and Setup]]
  - [X] Replace "Language" with language name in [[Org Mode Features for Language Source Code Blocks][Babel Features for Language Code Blocks]]
  - [X] Describe [[Header Arguments][Header Arguments]]
  - [X] Describe support for [[Sessions]]
  - [X] Describe [[Result Types][Result Types]]
  - [X] Describe [[Other]] differences from supported languages
  - [ ] Provide brief [[Examples of Use][Examples of Use]]
* Introduction

Scheme is a compact and elegant dialect of Lisp with a wide variety of
divergent implementations.

* Requirements and Setup

Babel support for session-based Scheme evaluation requires [[https://www.nongnu.org/geiser/][Geiser]],
which supports [[https://www.nongnu.org/geiser/geiser_2.html#Installation][several scheme implementations]].  You'll need to [[https://www.nongnu.org/geiser/geiser_2.html#Installation][install
Geiser]] and at least one Scheme supported by Geiser.  You might also
want to install [[https://www.nongnu.org/geiser/geiser_2.html#Friends][packages that augment Geiser]].

To configure Scheme code blocks in Babel, add the appropriate dotted
pair to =org-babel-load-languages=:

#+begin_src emacs-lisp :exports code
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((scheme . t)))
#+end_src

#+RESULTS:

* Babel Features for Scheme Code Blocks

** Header Arguments

There are no language-specific default values for header arguments to
Scheme code blocks.

The following two options are available for Scheme code blocks:
- :host :: the host of a remotely running Scheme process.
- :port :: the port of the remotely running Scheme process.

** Sessions

Scheme sessions depend on Geiser, which will be invoked if it is not
running when the Scheme code block is evaluated.  Note that sessions
are off by default, so you will need the =:session= header argument.

** Result Types

All result types are supported.

* Examples of Use

Here is the standard Hello World example.

In the Org mode buffer:

#+begin_example
,#+name: hello-world
,#+header: :session :var message="Hello World!"
,#+begin_src scheme 
message
,#+end_src
#+end_example

HTML export of the Scheme code block:

#+name: hello-world
#+header: :session :var message="Hello World!" :exports both
#+begin_src scheme
message
#+end_src

HTML export of the Scheme code block result:

#+RESULTS: hello-world
: Hello World!

Here is a Hello World example from the [[https://racket-lang.org/][Racket homepage]].

#+begin_example
,#+name: hello-world-racket
,#+header: :session :var my-language='Greek
,#+begin_src scheme
(define translations
  #hash([English . "Hello world"]
        [French . "Bonjour le monde"]
        [German . "Hallo Welt"]
        [Greek . "Γειά σου, κόσμε"]
        [Portuguese . "Olá mundo"]
        [Spanish . "Hola mundo"]
        [Thai . "สวัสดีชาวโลก"]))
(hash-ref translations my-language
            "hello world")
,#+end_src
#+end_example

HTML export of the Scheme code block:

#+name: hello-world-racket
#+header: :session :var my-language='Greek :exports both
#+begin_src scheme
(define translations
  #hash([English . "Hello world"]
        [French . "Bonjour le monde"]
        [German . "Hallo Welt"]
        [Greek . "Γειά σου, κόσμε"]
        [Portuguese . "Olá mundo"]
        [Spanish . "Hola mundo"]
        [Thai . "สวัสดีชาวโลก"]))
(hash-ref translations my-language
            "hello world")
#+end_src

HTML export of the Scheme code block result:

#+RESULTS: hello-world-racket
: Γειά σου, κόσμε
