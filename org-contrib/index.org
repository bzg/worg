#+TITLE:      Org-mode Contributed Packages
#+AUTHOR:     Worg people
#+EMAIL:      bzg AT gnu DOT org
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c) NEW(n)
#+LANGUAGE:   en
#+CATEGORY:   worg
#+LINK:       repofile https://git.savannah.gnu.org/cgit/emacs/org-mode.git/tree/
#+LINK:       contribfile https://git.sr.ht/~bzg/org-contrib/blob/master/
#+HTML_LINK_UP: ../index.html
#+HTML_LINK_HOME: https://orgmode.org/worg/

# This file is released by its authors and contributors under the GNU
# Free Documentation license v1.3 or later, code examples are released
# under the GNU General Public License v3 or later.

This page lists some contributed packages to Org-mode, with links to
available documentation.

Most of these packages are located in the [[https://git.sr.ht/~bzg/org-contrib][org-contrib]] repository.

Some used to live in the /contrib/ directory of the Org distribution.
Some have made it into the core by now, but we keep the documentation
here because it is more extensive than what is available in the
manual.  If no documentation link is present, see the file header of
the package -- it will hopefully have some documentation.

* org-contrib

- docco side-by-side annotated code export to HTML :: The =docco= tool
     (see [[http://ashkenas.com/docco/]]) generates HTML from JavaScript
     source code providing an attractive side-by-side display of
     source code and comments.  This file (see [[../org-docco/index.org][org-docco.org]])
     generates the same type of output from Org-mode documents with
     code embedded in code blocks.  For example org-docco output see
     [[http://eschulte.github.io/org-docco/org-docco.html]].

- /org-annotate-file.el/ -- annotate a file with org syntax ::
  The annotation is in a separate file, with links back to the
  annotated file.  Written by /Philip Jackson/.
  [[contribfile:lisp/org-annotate-file.el][Link to raw file]].

- /org-bibtex-extras.el/ -- extras for working with org-bibtex entries ::
  Written by /Eric Schulte/.
  [[contribfile:lisp/org-bibtex-extras.el][Link to raw file]].

- ol-bookmark.el/ -- support for links to Emacs bookmarks ::
  Written by /Tokuya Kameshima/.
  [[contribfile:lisp/ol-bookmark.el][Link to raw file]].

- [[file:org-checklist.org][/org-checklist.el/ -- org functions for checklist handling]] ::
  Reset checklists in repeating entries.  Written by /James TD Smith/.
  [[contribfile:lisp/org-checklist.el][Link to raw file]].

- [[file:org-choose.org][/org-choose.el/ -- decision management for org-mode]] ::
  Org-choose helps documenting a decision-making process by using
  TODO keywords for different degrees of /chosenness/, and by
  automatically keeping a set of alternatives in a consistent state.
  Writen by /Tom Breton/.
  [[contribfile:lisp/org-choose.el][Link to raw file]].

- [[file:org-collector.org][/org-collector.el/ -- collect properties into tables]] ::
  Collect and process properties into a table.
  Written by /Eric Schulte/.
  [[contribfile:lisp/org-collector.el][Link to raw file]].

- [[file:org-depend.org][/org-depend.el/ -- TODO dependencies for Org-mode]] ::
  Make TODO state changes in one entry trigger changes in another, or
  be blocked by the state of another entry.  Also, easily create
  chains of TODO items with exactly one active item at any time.
  Written by /Carsten Dominik/.
  [[contribfile:lisp/org-depend.el][Link to raw file]].

- /org-elisp-symbol.el/ -- Org links to emacs-lisp symbols. ::
  This can create annotated links that exactly point to the definition
  location of a variable of function.  Written by /Bastien Guerry/.
  [[contribfile:lisp/org-elisp-symbol.el][Link to raw file]].

- /org-expiry.el/ -- expiry mechanism for Org entries ::
  Written by /Bastien Guerry/.  [[contribfile:lisp/org-expiry.el][Link to raw file]].

- [[file:org-git-link.org][/org-git-link.el/ -- link to files under git version control]] ::
  This package adds new link types to link to specific versions of a
  file, which will be checked out when the link is activated.
  Written by /Reimar Finken/.
  [[contribfile:lisp/org-git-link.el][Link to raw file]].

- /org-interactive-query.el/ -- interactive modification of tags queries ::
  After running a general query in Org, this package allows to narrow
  down the results by adding more tags or keywords.  Written by
  /Christopher League/.
  [[contribfile:lisp/org-interactive-query.el][Link to raw file]].

- /org-invoice.el/ -- help manage client invoices ::
  Written by /Peter Jones/.
  [[contribfile:lisp/org-invoice.el][Link to raw file]].

- /org-learn.el/ -- Implements SuperMemo's incremental learning algorithm ::
  Written by /John Wiegley/.
  [[contribfile:lisp/org-learn.el][Link to raw file]].

- [[file:org-mac-iCal.org][/org-mac-iCal.el/ -- import OS X iCal.app events into Emacs diary]] ::
  Written by /Christopher Suckling/.
  [[contribfile:lisp/org-mac-iCal.el][Link to raw file]].

- /org-mairix.el/ -- hook mairix search into Org for different MUAs ::
  Written by /Georg C. F. Greve/.
  [[contribfile:lisp/org-mairix.el][Link to raw file]].

- /org-man.el/ -- support for links to manpages in Org-mode. ::
  Written by /Carsten Dominik/.
  [[contribfile:lisp/org-man.el][Link to raw file]].

- /org-mew.el/ -- Support for links to Mew messages from within Org-mode ::
  Written by /Tokuya Kameshima/
  [[contribfile:lisp/org-mew.el][Link to raw file.]]

- /org-notify.el/ -- notifications for Org-mode ::
  Written by /Peter Münster/.
  [[contribfile:lisp/org-notify.el][Link to raw file]].

  This package looks for todo-entries with deadline in your agenda files.
  For such entries, you can get configurable reminders:
  notification-pop-ups, emails, noise, and so on. You can define various
  notification-types, each one with its own actions and timings. Each
  todo-entry can have its own notification-type, defined by a property. For
  some notification actions (pop-ups) it's possible to mark something
  "done", or to shift the deadline just by one mouse-click.

- /org-notmuch.el/ -- support for links to notmuch messages ::
  Written by /Matthieu Lemerre/.
  [[contribfile:lisp/org-notmuch.el][Link to raw file]].

- /org-panel.el/ -- simplified and display-aided access to some Org commands ::
  Written by /Lennart Borgman/.
  [[contribfile:lisp/org-panel.el][Link to raw file]].

- /org-registry.el/ -- a registry for Org links ::
  Find out from where links point to a given file or location.
  Written by /Bastien Guerry/.
  [[contribfile:lisp/org-registry.el][Link to raw file]].

- /org-screen.el/ -- visit screen sessions through Org-mode links ::
  Written /Andrew Hyatt/.
  [[contribfile:lisp/org-screen.el][Link to raw file]].

- /org-screenshot.el/ -- Take and manage screenshots in Org-mode files ::
  Written by /Max Mikhanosha/
  [[contribfile:lisp/org-screenshot.el][Link to raw file.]]

- [[http://juanreyero.com/article/emacs/org-teams.html][/org-secretary.el/ -- Team management with org-mode]] ::
  Written by /Juan Reyero/.
  [[contribfile:lisp/org-secretary.el][Link to raw file]].

- /org-sudoku.el/ -- Create and solve SUDOKU games in Org tables ::
  Written by /Carsten Dominik/.
  [[contribfile:lisp/org-sudoku.el][Link to raw file]]. ::

- [[https://orgmode.org/worg/org-tutorials/multitarget-tables.html][/orgtbl-sqlinsert.el/ -- convert Org-mode tables to SQL insertions]] ::
  Written by /Jason Riedy/.
  [[contribfile:lisp/orgtbl-sqlinsert.el][Link to raw file]].

- /org-toc.el/ -- table of contents in a separate buffer ::
  With fast access to sections and easy visibility cycling.
  Written by /Bastien Guerry/.
  [[contribfile:lisp/org-toc.el][Link to raw file]].

- [[https://git.sr.ht/~bzg/org-contrib/blob/master/lisp/org-track.el][/org-track.el/ -- Keep current with Org-mode development: M-x org-track-update]] ::
  Download [[https://orgmode.org/org-latest.tar.gz][org-latest.tar.gz]], unpack it, generate autoloads file and compile
  sources using one simple command. \\
  Written by /Bastien Guerry/, /Eric S Fraga/ and /Sebastian Rose/.
  [[contribfile:lisp/org-track.el][Link to raw file]].

- /org-velocity.el/ -- something like Notational Velocity for Org ::
  Written by /Paul M. Rodriguez/.
  [[contribfile:lisp/org-velocity.el][Link to raw file]].

- /org-vm.el/ -- Support for links to VM messages from within Org-mode ::
  Written by /Carsten Dominik/
  [[contribfile:lisp/org-vm.el][Link to raw file.]]

- [[file:org-wikinodes.org][/org-wikinodes.el/ -- CamelCase wiki-like links to nodes]] ::
  Written by /Carsten Dominik/.
  [[contribfile:lisp/org-wikinodes.el][Link to raw file]].

- /org-wl.el/ -- Support for links to Wanderlust messages from within Org-mode ::
  Written by /Tokuya Kameshima/ and /David Maus/
  [[contribfile:lisp/org-wl.el][Link to raw file.]]

** Exporter
See [[file:../exporters/index.org][Exporters]].

- /ox-bibtex.el/ -- Export bibtex fragments ::
  Formerly known as /org-exp-bibtex.el/.
  Written by /Taru Karttunen/.
  [[contribfile:lisp/ox-bibtex.el][Link to raw file]].

- /ox-confluence.el/ -- Confluence Wiki Back-End for Org Export Engine ::
     Written by /Sébastien Delafond/.
     [[contribfile:lisp/ox-confluence.el][Link to raw file]].

- /ox-deck.el/ -- deck.js Presentation Back-End for Org Export Engine ::
     Written by /Rick Frankel/.
     [[contribfile:lisp/ox-deck.el][Link to raw file]].

- /ox-freemind.el/ -- Freemind Mindmap Back-End for Org Export Engine ::
     Written by /Jambunathan K/.
     [[contribfile:lisp/ox-freemind.el][Link to raw file]].

- [[file:../exporters/ox-groff.org][/ox-groff.el/ -- Groff Back-End for Org Export Engine]] ::
     Written by /Nicolas Goaziou/ and /Luis R Anaya/.
     [[contribfile:lisp/ox-groff.el][Link to raw file]].

- [[file:../exporters/koma-letter-export.org][/ox-koma-letter.el/ -- An exporter to Write KOMA]] ::
     Written by Nicolas Goaziou.
     [[http://gpl.coulmann.de/scrlttr2.html][Scrlttr2]] letters in Org.

- /ox-rss.el/ -- RSS 2.0 Back-End for Org Export Engine ::
     Written by /Bastien Guerry/.
     [[contribfile:lisp/ox-rss.el][Link to raw file]].

- /ox-s5.el/ -- S5 Presentation Back-End for Org Export Engine ::
     Written by /Rick Frankel/.
     [[contribfile:lisp/ox-s5.el][Link to raw file]].

- /ox-taskjuggler.el/ -- TaskJuggler Back-End for Org Export Engine ::
     See [[file:../org-tutorials/org-taskjuggler.org][Tutorial]].
     Written by /Christian Egli/ and /Nicolas Goaziou/.
     [[contribfile:lisp/ox-taskjuggler.el][Link to raw file]].

- /org-static-mathjax.el/ -- Muse-like tags in Org-mode ::
     Written by /Jan Böker/.
     [[contribfile:lisp/org-static-mathjax.el][Link to raw file]].

** Babel
- /ob-eukleides.el/ -- Org-babel functions for eukleides evaluation ::
  Written by /Luis Anaya/
  [[contribfile:lisp/ob-eukleides.el][Link to raw file.]]

- /ob-fomus.el/ -- Org-babel functions for fomus evaluation ::
  Written by /Torsten Anders/
  [[contribfile:lisp/ob-fomus.el][Link to raw file.]]

- /ob-mathomatic.el/ -- Org-babel functions for mathomatic evaluation ::
  Written by /Eric S Fraga/ and /Eric Schulte/ and /Luis Anaya (Mathomatic)/
  [[contribfile:lisp/ob-mathomatic.el][Link to raw file.]]

- /ob-oz.el/ -- Org-babel functions for Oz evaluation ::
  Written by /Torsten Anders/ and /Eric Schulte/
  [[contribfile:lisp/ob-oz.el][Link to raw file.]]

- /ob-tcl.el/ -- Org-babel functions for tcl evaluation ::
  Written by /Dan Davison/ and /Eric Schulte/ and /Luis Anaya/
  [[contribfile:lisp/ob-tcl.el][Link to raw file.]]

* External

- [[file:org-drill.org][/org-drill.el/ -- flashcards and spaced repetition for org-mode]] ::
  Items in org-mode outlines can be used as flashcards. The user can
  conduct interactive "drill sessions" to memorize the material in a
  set of flashcards; cards are scheduled for review using the spaced
  repetition algorithms popularised by [[http://supermemo.com/index.htm][SuperMemo]] and similar
  programs. Numerous flashcard types are defined, and the user can add
  their own card types using elisp.  Written by /Paul Sexton/.

- [[https://github.com/Neil-Smithline/org-auto-shorten-url/blob/master/org-auto-shorten-url.el][org-auto-shorten-url.el]] :: By Neil Smithline.  Automatically shorten URLs
     in `org-mode' using Bit.ly or a link shortener of your choice.  See
     the comment in the code to make sure you load the needed dependancies.

- [[file:org-bom.org][/Org-bom/ -- Bill of Materials]] ::
  This add-on by /Christian Fortin/ helps you build collections from
  your Org buffer and gather data in tables. Every item identified as a
  component will be totalized in a temporary database, from which you
  can extract useful information, such as the number of item per
  section. You should find here all you would expect from a BOM of a
  professionnal CAD software.
  [[https://github.com/Frozenlock/Org-Bill-of-materials][Link to raw file]]

- [[http://julien.danjou.info/software/google-weather.el][/org-google-weather.el/ -- weather forecast in the agenda buffer]] ::
  Allow %%(org-google-weather "New York") sexps for displaying weather
  forecast in the agenda buffer.
  Written by /Julien Danjou/.

- [[http://ozymandias.dk/emacs/org-import-calendar.el][/org-import-icalendar.el/]] -- import iCal events in an Org buffer ::
  Written by /Vagn Johansen/.

- [[file:org-mac-link.org][/org-mac-link/ -- grab links from various mac applications]] ::
  Grab the current link or selection from an open mac application and
  insert it as a hyperlink at point in an org-mode document. Written
  by /Anthony Lander/, /John Wiegley/ and /Christopher Suckling/.
  This file replaces the earlier org-mac-message.el and
  org-mac-link-grabber.el.
  [[https://gitlab.com/aimebertrand/org-mac-link][project page]].

- [[https://github.com/sigma/org-magit][/org-magit/]] -- basic support for [[https://github.com/magit/magit][magit]] links ::
  Written by /Yann Hodique/.

- [[http://www.emacswiki.org/emacs/org-occur-goto.el][/org-occur-goto.el/]] -- search open org buffers with an occur interface ::
  Usage: M-x oog, then start typing.  Select from the occur matches with
  up/down/pgup/pgdown and press enter (you can navigate the history with
  M-p/M-n).  The search string must be at least 3 characters long (by
  default).

- [[http://www.emacswiki.org/emacs/org-search-goto.el][/org-search-goto.el/]] -- Use search to go to locations in your org buffers ::
  Usage: M-x osg, then start typing.  Select from the matches with
  up/down/pgup/pgdown and press enter to go that location (you can navigate
  the history with M-p/M-n).  If the search string contains several strings
  separated by spaces then these substrings can appear in any order in the
  results.  See the [[https://list.orgmode.org/loom.20111211T094124-814@post.gmane.org][announcement]] on the list.

- [[http://www.emacswiki.org/emacs/org-search-goto-ml.el][/org-search-goto-ml.el/]]  -- Use multiline search to go to locations in your org buffers ::
  Usage: M-x osg, then start typing.  Select from the matches with
  up/down/pgup/pgdown and press enter to go that location (you can navigate
  the history with M-p/M-n).  If the search string contains several strings
  separated by spaces then these substrings can appear in any order in the
  results.  The search handles an org heading and its text as one block, so
  the substrings can match in any part of an org entry.  If the heading is
  not matching, only the body, the heading is added to the results anyway
  to indicated which entry is matched.

- /org-superstar.el/ -- Prettify headings and plain lists in Org mode ::
  Written by /D. Williams/.
  Partially based on org-bullets, prettifying headline bullets with
  UTF-8 characters, this package also supports special headline
  bullets for TODO keywords, item bullets for plain lists and
  further options for handling leading stars, such as the ability
  to hide leading stars in the same way Org hides emphasis markers.
  Link to the github [[https://github.com/integral-dw/org-superstar-mode][project page]].

- /org-link-minor-mode.el/ -- Enables Org links in non org-mode buffers ::
  Written by /Sean O'Halpin/.
  [[https://github.com/seanohalpin/org-link-minor-mode/blob/master/org-link-minor-mode.el][Link to github file]] and the github [[https://github.com/seanohalpin/org-link-minor-mode][project page]].

- /org-impress-js.el/ -- impress.js export for Org mode ::
  Written by /kinjo/.
  Link to the github [[https://github.com/kinjo/org-impress-js.el][project page]].

- /org-weights.el/ -- display the "weight" of a headline, with the # of sub headlines ::
  Written by [[http://pinard.progiciels-bpi.ca/index.html][François Pinard]].
  Link to the github [[https://github.com/pinard/org-weights][project page]].

* Moved to core

- [[file:babel/index.org][/Org-babel/ -- execution of source code blocks]] ::
  The embedded code evaluation and literate programming subsystem
  written by /Eric Schulte/ and /Dan Davison/ \\
  Org Babel is now part of the Org core and [[https://orgmode.org/manual/Working-with-source-code.html#Working-with-source-code][documented in the manual]].
  See also [[Babel]] for contrib files regarding org-babel.

- /org-element.el/ -- Parser and applications for Org syntax ::
  Written by /Nicolas Goaziou/.
  [[repofile:lisp/org-element.el][Link to raw file]].

- [[file:org-exp-blocks.org][/org-exp-blocks.el/ -- pre-process blocks when exporting org files]] ::
  Org-export-blocks allows for the pre-processing or blocks in
  org-mode files to create images, or specially formatted HTML or
  LaTeX output.  Written by /Eric Schulte/. \\
  Org-exp-blocks is now part of the Org core as [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/tree/lisp/ob-exp.el][ob-exp.el]].

- /org-export.el/ -- Generic Export Engine For Org ::
  Generic export engine for Org built on Org Elements.
  Written by /Nicolas Goaziou/.
  [[repofile:contrib/lisp/org-export.el][Link to raw file.]] \\
  Back-ends for /org-export.el/ (ascii, html, latex, odt, publish) were
  currently located in the /EXPERIMENTAL/ directory of the Org
  distribution. They are now a part of org-mode core as ox.el and ox-\ast{}.el since 8.0.

- /org-eww.el/ -- Support link/copy/paste from eww to Org-mode ::
  Makes it possible to store an org-link to the url of an eww-buffer.
  The second feature is to copy a region from eww keeping the links.
  Written by /Marco Wahl/.
  [[repofile:lisp/ol-eww.el][Link to raw file]].

- [[file:org-feed.org][/org-feed.el/ -- add RSS feed items to Org files]] ::
  Read RSS feeds from the web, add new items to Org files, and trigger
  actions when items have changed.
  Written by /Carsten Dominik/.
  [[repofile:lisp/org-feed.el][Link to raw file]]. \\
  This module is part of the Org core [[https://orgmode.org/manual/RSS-feeds.html#RSS-feeds"][documented in the manual]].

- [[file:org-protocol.org][/org-protocol.el/ -- Trigger actions through URLs]] ::
  org-protocol intercepts calls from emacsclient to trigger custom
  actions without external dependencies. Only one protocol has to be
  configured with your external applications or the operating
  system.\\
  This package is part of the Org core and also [[https://orgmode.org/manual/Protocols.html#Protocols][documented in the manual]].

- [[file:../org-tutorials/org-R/org-R.org][/org-R.el/ -- Computing and data visualisation in Org-mode using R]] ::
  Written by /Dan Davison/.
  [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/tree/contrib/lisp/org-R.el?id=470fba60861a7a2b9d5cc4251905918eba06e528][Link to legacy raw file]].
  This modules has been superseded by the Org Babel functionality,
  which is part of the Org core and [[https://orgmode.org/manual/Working-with-source-code.html#Working-with-source-code"][documented in the manual]].

- [[file:org-special-blocks.org][/org-special-blocks.el/ -- turn blocks into LaTeX envs and HTML divs]] ::
  Written by /Chris Gray/. \\
  This package is part of the Org core.

* Moved out of Org repo

- /htmlize.el/ -- convert buffer text and decorations to HTML ::
  Written by /Hrvoje Niksic/. \\
  [[https://github.com/hniksic/emacs-htmlize][Repo]].

- /org-bullets.el/ -- Show bullets in org-mode as UTF-8 characters ::
  Written by /sabof/ \\
  [[https://github.com/sabof/org-bullets][Repo]].

- /org-jira.el/ -- add a jira:ticket protocol to Org ::
  Written by /Jonathan Arkell/, later maintained by /Bao Haojun/ and
     then /Matthew Carter/. \\
  [[https://github.com/ahungry/org-jira][Repo]].

- [[file:org-mime.org][/org-mime.el/ -- org html export for text/html MIME emails]] ::

  =org-mime= can be used to send HTML email using Org-mode HTML export.

  This approximates a WYSiWYG HTML mail editor from within Emacs, and
  can be useful for sending tables, fontified source code, and inline
  images in email.  Written by /Eric Schulte/, maintained by /Chen Bin/.
  [[https://github.com/org-mime/org-mime][Repo]].

- /org-contacts.el/ -- manage contacts ::
  Managing contacts information, recording, searching etc in Org
  mode. As contacts database backend for mu4e etc.  Written by /Julien
  Danjou/, now maintained by /stardiviner/. Link to [[https://repo.or.cz/org-contacts.git][project repo page]].

* Obsolete

- [[file:org-annotation-helper.org][/org-annotation-helper.el/ -- managing browser bookmarks]] ::
  Org-annotation-helper allows to create Org-mode links and
  annotations while working in a browser, by simply clicking a
  bookmarklet.  Written by /Bastien Guerry/ and /Daniel M German/.  [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/tree/contrib/lisp/org-annotation-helper.el?id=bb2b3f34f11a1a40de2919066d3e3b62484b3c6b][Link
  to legacy raw file]].  This module has been superseded by
  /org-protocol.el/, part of the Org core, and [[https://orgmode.org/manual/Protocols.html#Protocols][documented in the manual]].

- HTML presentations from an Org file :: Several possibilities here:

     *Note*: These were all written for the old exporter, and
     will most likely /not/ work with the new export framework.

     - [[https://github.com/eschulte/org-S5][org-S5]] from Eric Schulte
     - [[https://github.com/relevance/org-html-slideshow.git][org-html-slideshow]] from Stuart Sierra
     - [[https://gist.github.com/509761][org-html5presentation.el]] from kinjo

     For use with the new exporter, /ox-s5.el/ ([[contribfile:lisp/ox-s5.el][link to raw file)]] and
     /ox-deck.el/ ([[contribfile:lisp/ox-deck.el][link to raw file]]), both by Rick Frankel, are
     included in the /contrib/ directory. The latest source and
     documentation for both are at
     [[https://github.com/cybercode/org-slides]].

- /org-browser-url.el/ --  bookmark from a browser into org links ::
  Written by /Ross Patterson/.
  [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/tree/contrib/lisp/org-browser-url.el?id=0b9b7d7b58a928240d3f4d4ca427d5361020c892][Link to legacy raw file]].
  This module has been superseded by /org-protocol.el/, part
  of the Org core, and [[https://orgmode.org/manual/Protocols.html#Protocols][documented in the manual]].

- /org-colview-xemacs.el/ -- Column View in Org-mode, XEmacs-specific version ::
  Written by /Carsten Dominik <carsten at orgmode dot org>/
  Removed in [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=a54dd63e289f0c21ab3d5c01ac026aaf570bd45e][this commit]].

- /org-eval.el/ -- show evaluation result of code ::
  The =<lisp>= tag, adapted from Emacs Wiki and Emacs Muse, allows
  text to be included in a document that is the result of evaluating
  some code.  Other scripting languages like /perl/ can be
  supported with this package as well.
  Written by /Carsten Dominik/.
  [[contribfile:lisp/org-eval.el][Link to raw file]]. \\
  This modules has been superseded by the Org Babel functionality,
  which is part of the Org core and [[https://orgmode.org/manual/Working-with-source-code.html#Working-with-source-code][documented in the manual]].

- [[file:org-eval-light.org][/org-eval-light.el/ -- display result of evaluating code in various languages (light)]] ::
  Org-eval-light allows the execution of source code embedded in an
  org-mode file.  The results of the execution are placed into the
  org-mode file.  It is a reworking of Carsten's org-eval with the
  goals of a more uniform syntax, safer default execution rules, and
  increased ease of execution.
  Written by /Eric Schulte/.
  [[contribfile:lisp/org-eval-light.el][Link to raw file]]. \\
  This modules has been superseded by the Org Babel functionality,
  which is part of the Org core and [[https://orgmode.org/manual/Working-with-source-code.html#Working-with-source-code][documented in the manual]].

- [[file:org-export-generic.org][/org-export-generic.el/ -- Export org files to user-defined output formats]] ::
  Org-export-generic provides the ability to create an org file and
  then export it to any given format you desire.  This is done by
  defining a set of variables that include prefixes and suffixes for
  each line type (E.G., header, list item, etc ...) and then running
  org-export-generic on the file to process it.
  Written by /Wes Hardaker/.

- /org-mtags.el/ -- support for some Muse-like tags in Org-mode ::
  This package allows you to write =<example>= and =<src>= and other
  syntax copied from Emacs Muse, right inside an Org file.  The goal
  here is to make it easy to publish the same file using either
  org-publish or Muse.  Written by /Carsten Dominik/.
  Removed in [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=94939bd4736ea2b98e4260506e541aa4aadd75e8][this commit]].

- /org2rem.el/ -- Convert org appointments into reminders for /remind/ ::
  Written by /Bastien Guerry/ and /Sharad Pratap/.

* Maintenance
Keeping this list maintained is quite a challenge.  Here are some elisp
functions to help with it.  They require cl-lib (Emacs 24.3) and org-mode
with =contrib/= (git).
#+BEGIN_SRC emacs-lisp
(require 'cl-lib)
(defun worg-parse-contrib-index.org (&optional buffer)
 "Return an alist of elisp file names.
The files are either documented, not-in-contrib, or undocumented.
TODO: Do not check files in sections except for \"contrib/\"."
 (with-current-buffer (or buffer "index.org")
   (let* ((items
           (cl-remove-duplicates
            (cl-reduce
             #'(lambda (a b) (append a b))
             (org-element-map
                 (org-element-parse-buffer)
                 'plain-list
               #'(lambda (e)
                   (delq nil
                         (mapcar
                          (lambda (item)
                            (let ((title (nth 5 item)))
                              (when (and (stringp title)
                                         (string-match "/\\([^/]+\\.el\\)/"
                                                       title))
                                (match-string 1 title))))
                          (org-element-property :structure e))))))))
          (org-contrib-files
           (directory-files
            (expand-file-name "../contrib/lisp/"
                              (file-name-directory
                               (find-lisp-object-file-name #'org-mode
                                                           #'org-mode)))
            nil "\\.el\\'" 'nosort)))
     (list
      (cons 'documented
            (cl-union items org-contrib-files))
      (cons 'not-in-contrib
            (cl-set-difference items org-contrib-files :test #'string=))
      (cons 'undocumented
            (cl-set-difference org-contrib-files items :test #'string=))))))

(require 'lisp-mnt)

(defun worg-generate-missing-contrib-index (&optional index-buffer)
  "Return a string containing auto formated entries for undocumented files."
  (let* ((parsed (worg-parse-contrib-index.org index-buffer))
         (missing (sort (cdr (assq 'undocumented parsed))
                        #'(lambda (a b) (not (string< a b)))))
         (contrib-path (expand-file-name "../contrib/lisp/"
                                         (file-name-directory
                                          (find-lisp-object-file-name #'org-mode
                                                                      #'org-mode))))
         misc babel ox)
    (dolist (i missing)
      (push
       (ignore-errors
         (lm-with-file (expand-file-name i contrib-path)
           (format "- /%s/ -- %s ::
  Written by %s
  [[contribfile:lisp/%s][Link to raw file.]]\n\n"
                   i (lm-summary)
                   (mapconcat #'(lambda (a) (concat "/" (car a) "/"))
                              (lm-authors)
                              " and ")
                   i)))
       (cond
        ((string-prefix-p "ox-" i) ox)
        ((string-prefix-p "ob-" i) babel)
        (t misc))))
    (concat
     (apply #'concat misc)
     "* Export\n"
     (apply #'concat ox)
     "* Babel\n"
     (apply #'concat babel))))
#+END_SRC
